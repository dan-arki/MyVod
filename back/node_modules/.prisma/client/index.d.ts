
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model User_Platform
 * 
 */
export type User_Platform = $Result.DefaultSelection<Prisma.$User_PlatformPayload>
/**
 * Model Platform
 * 
 */
export type Platform = $Result.DefaultSelection<Prisma.$PlatformPayload>
/**
 * Model Media_Platform
 * 
 */
export type Media_Platform = $Result.DefaultSelection<Prisma.$Media_PlatformPayload>
/**
 * Model Watching
 * 
 */
export type Watching = $Result.DefaultSelection<Prisma.$WatchingPayload>
/**
 * Model Categorie
 * 
 */
export type Categorie = $Result.DefaultSelection<Prisma.$CategoriePayload>
/**
 * Model Media
 * 
 */
export type Media = $Result.DefaultSelection<Prisma.$MediaPayload>
/**
 * Model Actor_Media
 * 
 */
export type Actor_Media = $Result.DefaultSelection<Prisma.$Actor_MediaPayload>
/**
 * Model Actor
 * 
 */
export type Actor = $Result.DefaultSelection<Prisma.$ActorPayload>
/**
 * Model WatchList
 * 
 */
export type WatchList = $Result.DefaultSelection<Prisma.$WatchListPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model Season
 * 
 */
export type Season = $Result.DefaultSelection<Prisma.$SeasonPayload>
/**
 * Model Episode
 * 
 */
export type Episode = $Result.DefaultSelection<Prisma.$EpisodePayload>
/**
 * Model Categorie_Movie
 * 
 */
export type Categorie_Movie = $Result.DefaultSelection<Prisma.$Categorie_MoviePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.user_Platform`: Exposes CRUD operations for the **User_Platform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_Platforms
    * const user_Platforms = await prisma.user_Platform.findMany()
    * ```
    */
  get user_Platform(): Prisma.User_PlatformDelegate<ExtArgs>;

  /**
   * `prisma.platform`: Exposes CRUD operations for the **Platform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Platforms
    * const platforms = await prisma.platform.findMany()
    * ```
    */
  get platform(): Prisma.PlatformDelegate<ExtArgs>;

  /**
   * `prisma.media_Platform`: Exposes CRUD operations for the **Media_Platform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Media_Platforms
    * const media_Platforms = await prisma.media_Platform.findMany()
    * ```
    */
  get media_Platform(): Prisma.Media_PlatformDelegate<ExtArgs>;

  /**
   * `prisma.watching`: Exposes CRUD operations for the **Watching** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Watchings
    * const watchings = await prisma.watching.findMany()
    * ```
    */
  get watching(): Prisma.WatchingDelegate<ExtArgs>;

  /**
   * `prisma.categorie`: Exposes CRUD operations for the **Categorie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categorie.findMany()
    * ```
    */
  get categorie(): Prisma.CategorieDelegate<ExtArgs>;

  /**
   * `prisma.media`: Exposes CRUD operations for the **Media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Media
    * const media = await prisma.media.findMany()
    * ```
    */
  get media(): Prisma.MediaDelegate<ExtArgs>;

  /**
   * `prisma.actor_Media`: Exposes CRUD operations for the **Actor_Media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actor_Medias
    * const actor_Medias = await prisma.actor_Media.findMany()
    * ```
    */
  get actor_Media(): Prisma.Actor_MediaDelegate<ExtArgs>;

  /**
   * `prisma.actor`: Exposes CRUD operations for the **Actor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actors
    * const actors = await prisma.actor.findMany()
    * ```
    */
  get actor(): Prisma.ActorDelegate<ExtArgs>;

  /**
   * `prisma.watchList`: Exposes CRUD operations for the **WatchList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WatchLists
    * const watchLists = await prisma.watchList.findMany()
    * ```
    */
  get watchList(): Prisma.WatchListDelegate<ExtArgs>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs>;

  /**
   * `prisma.season`: Exposes CRUD operations for the **Season** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seasons
    * const seasons = await prisma.season.findMany()
    * ```
    */
  get season(): Prisma.SeasonDelegate<ExtArgs>;

  /**
   * `prisma.episode`: Exposes CRUD operations for the **Episode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Episodes
    * const episodes = await prisma.episode.findMany()
    * ```
    */
  get episode(): Prisma.EpisodeDelegate<ExtArgs>;

  /**
   * `prisma.categorie_Movie`: Exposes CRUD operations for the **Categorie_Movie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorie_Movies
    * const categorie_Movies = await prisma.categorie_Movie.findMany()
    * ```
    */
  get categorie_Movie(): Prisma.Categorie_MovieDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.0
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    User_Platform: 'User_Platform',
    Platform: 'Platform',
    Media_Platform: 'Media_Platform',
    Watching: 'Watching',
    Categorie: 'Categorie',
    Media: 'Media',
    Actor_Media: 'Actor_Media',
    Actor: 'Actor',
    WatchList: 'WatchList',
    Rating: 'Rating',
    Season: 'Season',
    Episode: 'Episode',
    Categorie_Movie: 'Categorie_Movie'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'user_Platform' | 'platform' | 'media_Platform' | 'watching' | 'categorie' | 'media' | 'actor_Media' | 'actor' | 'watchList' | 'rating' | 'season' | 'episode' | 'categorie_Movie'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      User_Platform: {
        payload: Prisma.$User_PlatformPayload<ExtArgs>
        fields: Prisma.User_PlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.User_PlatformFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.User_PlatformFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload>
          }
          findFirst: {
            args: Prisma.User_PlatformFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.User_PlatformFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload>
          }
          findMany: {
            args: Prisma.User_PlatformFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload>[]
          }
          create: {
            args: Prisma.User_PlatformCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload>
          }
          createMany: {
            args: Prisma.User_PlatformCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.User_PlatformDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload>
          }
          update: {
            args: Prisma.User_PlatformUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload>
          }
          deleteMany: {
            args: Prisma.User_PlatformDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.User_PlatformUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.User_PlatformUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$User_PlatformPayload>
          }
          aggregate: {
            args: Prisma.User_PlatformAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser_Platform>
          }
          groupBy: {
            args: Prisma.User_PlatformGroupByArgs<ExtArgs>,
            result: $Utils.Optional<User_PlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.User_PlatformCountArgs<ExtArgs>,
            result: $Utils.Optional<User_PlatformCountAggregateOutputType> | number
          }
        }
      }
      Platform: {
        payload: Prisma.$PlatformPayload<ExtArgs>
        fields: Prisma.PlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlatformFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlatformFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findFirst: {
            args: Prisma.PlatformFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlatformFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findMany: {
            args: Prisma.PlatformFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          create: {
            args: Prisma.PlatformCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          createMany: {
            args: Prisma.PlatformCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlatformDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          update: {
            args: Prisma.PlatformUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          deleteMany: {
            args: Prisma.PlatformDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlatformUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlatformUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          aggregate: {
            args: Prisma.PlatformAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlatform>
          }
          groupBy: {
            args: Prisma.PlatformGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlatformCountArgs<ExtArgs>,
            result: $Utils.Optional<PlatformCountAggregateOutputType> | number
          }
        }
      }
      Media_Platform: {
        payload: Prisma.$Media_PlatformPayload<ExtArgs>
        fields: Prisma.Media_PlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Media_PlatformFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Media_PlatformFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload>
          }
          findFirst: {
            args: Prisma.Media_PlatformFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Media_PlatformFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload>
          }
          findMany: {
            args: Prisma.Media_PlatformFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload>[]
          }
          create: {
            args: Prisma.Media_PlatformCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload>
          }
          createMany: {
            args: Prisma.Media_PlatformCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Media_PlatformDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload>
          }
          update: {
            args: Prisma.Media_PlatformUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload>
          }
          deleteMany: {
            args: Prisma.Media_PlatformDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Media_PlatformUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Media_PlatformUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Media_PlatformPayload>
          }
          aggregate: {
            args: Prisma.Media_PlatformAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedia_Platform>
          }
          groupBy: {
            args: Prisma.Media_PlatformGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Media_PlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.Media_PlatformCountArgs<ExtArgs>,
            result: $Utils.Optional<Media_PlatformCountAggregateOutputType> | number
          }
        }
      }
      Watching: {
        payload: Prisma.$WatchingPayload<ExtArgs>
        fields: Prisma.WatchingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload>
          }
          findFirst: {
            args: Prisma.WatchingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload>
          }
          findMany: {
            args: Prisma.WatchingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload>[]
          }
          create: {
            args: Prisma.WatchingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload>
          }
          createMany: {
            args: Prisma.WatchingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WatchingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload>
          }
          update: {
            args: Prisma.WatchingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload>
          }
          deleteMany: {
            args: Prisma.WatchingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WatchingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WatchingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchingPayload>
          }
          aggregate: {
            args: Prisma.WatchingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWatching>
          }
          groupBy: {
            args: Prisma.WatchingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WatchingGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchingCountArgs<ExtArgs>,
            result: $Utils.Optional<WatchingCountAggregateOutputType> | number
          }
        }
      }
      Categorie: {
        payload: Prisma.$CategoriePayload<ExtArgs>
        fields: Prisma.CategorieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategorieFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategorieFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findFirst: {
            args: Prisma.CategorieFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategorieFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          findMany: {
            args: Prisma.CategorieFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>[]
          }
          create: {
            args: Prisma.CategorieCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          createMany: {
            args: Prisma.CategorieCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategorieDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          update: {
            args: Prisma.CategorieUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          deleteMany: {
            args: Prisma.CategorieDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategorieUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategorieUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriePayload>
          }
          aggregate: {
            args: Prisma.CategorieAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategorie>
          }
          groupBy: {
            args: Prisma.CategorieGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategorieGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategorieCountArgs<ExtArgs>,
            result: $Utils.Optional<CategorieCountAggregateOutputType> | number
          }
        }
      }
      Media: {
        payload: Prisma.$MediaPayload<ExtArgs>
        fields: Prisma.MediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findFirst: {
            args: Prisma.MediaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findMany: {
            args: Prisma.MediaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>[]
          }
          create: {
            args: Prisma.MediaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          createMany: {
            args: Prisma.MediaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MediaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          update: {
            args: Prisma.MediaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          deleteMany: {
            args: Prisma.MediaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MediaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MediaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          aggregate: {
            args: Prisma.MediaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedia>
          }
          groupBy: {
            args: Prisma.MediaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaCountAggregateOutputType> | number
          }
        }
      }
      Actor_Media: {
        payload: Prisma.$Actor_MediaPayload<ExtArgs>
        fields: Prisma.Actor_MediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Actor_MediaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Actor_MediaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload>
          }
          findFirst: {
            args: Prisma.Actor_MediaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Actor_MediaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload>
          }
          findMany: {
            args: Prisma.Actor_MediaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload>[]
          }
          create: {
            args: Prisma.Actor_MediaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload>
          }
          createMany: {
            args: Prisma.Actor_MediaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Actor_MediaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload>
          }
          update: {
            args: Prisma.Actor_MediaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload>
          }
          deleteMany: {
            args: Prisma.Actor_MediaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Actor_MediaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Actor_MediaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Actor_MediaPayload>
          }
          aggregate: {
            args: Prisma.Actor_MediaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActor_Media>
          }
          groupBy: {
            args: Prisma.Actor_MediaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Actor_MediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.Actor_MediaCountArgs<ExtArgs>,
            result: $Utils.Optional<Actor_MediaCountAggregateOutputType> | number
          }
        }
      }
      Actor: {
        payload: Prisma.$ActorPayload<ExtArgs>
        fields: Prisma.ActorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload>
          }
          findFirst: {
            args: Prisma.ActorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload>
          }
          findMany: {
            args: Prisma.ActorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload>[]
          }
          create: {
            args: Prisma.ActorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload>
          }
          createMany: {
            args: Prisma.ActorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ActorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload>
          }
          update: {
            args: Prisma.ActorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload>
          }
          deleteMany: {
            args: Prisma.ActorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActorPayload>
          }
          aggregate: {
            args: Prisma.ActorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActor>
          }
          groupBy: {
            args: Prisma.ActorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActorCountArgs<ExtArgs>,
            result: $Utils.Optional<ActorCountAggregateOutputType> | number
          }
        }
      }
      WatchList: {
        payload: Prisma.$WatchListPayload<ExtArgs>
        fields: Prisma.WatchListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchListFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchListFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload>
          }
          findFirst: {
            args: Prisma.WatchListFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchListFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload>
          }
          findMany: {
            args: Prisma.WatchListFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload>[]
          }
          create: {
            args: Prisma.WatchListCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload>
          }
          createMany: {
            args: Prisma.WatchListCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WatchListDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload>
          }
          update: {
            args: Prisma.WatchListUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload>
          }
          deleteMany: {
            args: Prisma.WatchListDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WatchListUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WatchListUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WatchListPayload>
          }
          aggregate: {
            args: Prisma.WatchListAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWatchList>
          }
          groupBy: {
            args: Prisma.WatchListGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WatchListGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchListCountArgs<ExtArgs>,
            result: $Utils.Optional<WatchListCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>,
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      Season: {
        payload: Prisma.$SeasonPayload<ExtArgs>
        fields: Prisma.SeasonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeasonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeasonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findFirst: {
            args: Prisma.SeasonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeasonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          findMany: {
            args: Prisma.SeasonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>[]
          }
          create: {
            args: Prisma.SeasonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          createMany: {
            args: Prisma.SeasonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SeasonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          update: {
            args: Prisma.SeasonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          deleteMany: {
            args: Prisma.SeasonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SeasonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SeasonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeasonPayload>
          }
          aggregate: {
            args: Prisma.SeasonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSeason>
          }
          groupBy: {
            args: Prisma.SeasonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SeasonGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeasonCountArgs<ExtArgs>,
            result: $Utils.Optional<SeasonCountAggregateOutputType> | number
          }
        }
      }
      Episode: {
        payload: Prisma.$EpisodePayload<ExtArgs>
        fields: Prisma.EpisodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EpisodeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EpisodeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          findFirst: {
            args: Prisma.EpisodeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EpisodeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          findMany: {
            args: Prisma.EpisodeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>[]
          }
          create: {
            args: Prisma.EpisodeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          createMany: {
            args: Prisma.EpisodeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EpisodeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          update: {
            args: Prisma.EpisodeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          deleteMany: {
            args: Prisma.EpisodeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EpisodeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EpisodeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EpisodePayload>
          }
          aggregate: {
            args: Prisma.EpisodeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEpisode>
          }
          groupBy: {
            args: Prisma.EpisodeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EpisodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EpisodeCountArgs<ExtArgs>,
            result: $Utils.Optional<EpisodeCountAggregateOutputType> | number
          }
        }
      }
      Categorie_Movie: {
        payload: Prisma.$Categorie_MoviePayload<ExtArgs>
        fields: Prisma.Categorie_MovieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Categorie_MovieFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Categorie_MovieFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload>
          }
          findFirst: {
            args: Prisma.Categorie_MovieFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Categorie_MovieFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload>
          }
          findMany: {
            args: Prisma.Categorie_MovieFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload>[]
          }
          create: {
            args: Prisma.Categorie_MovieCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload>
          }
          createMany: {
            args: Prisma.Categorie_MovieCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Categorie_MovieDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload>
          }
          update: {
            args: Prisma.Categorie_MovieUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload>
          }
          deleteMany: {
            args: Prisma.Categorie_MovieDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Categorie_MovieUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Categorie_MovieUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Categorie_MoviePayload>
          }
          aggregate: {
            args: Prisma.Categorie_MovieAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategorie_Movie>
          }
          groupBy: {
            args: Prisma.Categorie_MovieGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Categorie_MovieGroupByOutputType>[]
          }
          count: {
            args: Prisma.Categorie_MovieCountArgs<ExtArgs>,
            result: $Utils.Optional<Categorie_MovieCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    platform: number
    watching: number
    WatchList: number
    rating: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platform?: boolean | UserCountOutputTypeCountPlatformArgs
    watching?: boolean | UserCountOutputTypeCountWatchingArgs
    WatchList?: boolean | UserCountOutputTypeCountWatchListArgs
    rating?: boolean | UserCountOutputTypeCountRatingArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlatformArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: User_PlatformWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchingWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWatchListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchListWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }



  /**
   * Count Type PlatformCountOutputType
   */

  export type PlatformCountOutputType = {
    user: number
    media: number
  }

  export type PlatformCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | PlatformCountOutputTypeCountUserArgs
    media?: boolean | PlatformCountOutputTypeCountMediaArgs
  }

  // Custom InputTypes

  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlatformCountOutputType
     */
    select?: PlatformCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: User_PlatformWhereInput
  }


  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Media_PlatformWhereInput
  }



  /**
   * Count Type CategorieCountOutputType
   */

  export type CategorieCountOutputType = {
    media: number
  }

  export type CategorieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | CategorieCountOutputTypeCountMediaArgs
  }

  // Custom InputTypes

  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategorieCountOutputType
     */
    select?: CategorieCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Categorie_MovieWhereInput
  }



  /**
   * Count Type MediaCountOutputType
   */

  export type MediaCountOutputType = {
    platforms: number
    categories: number
    actor: number
    watchlist: number
    Rating: number
    season: number
    watching: number
  }

  export type MediaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platforms?: boolean | MediaCountOutputTypeCountPlatformsArgs
    categories?: boolean | MediaCountOutputTypeCountCategoriesArgs
    actor?: boolean | MediaCountOutputTypeCountActorArgs
    watchlist?: boolean | MediaCountOutputTypeCountWatchlistArgs
    Rating?: boolean | MediaCountOutputTypeCountRatingArgs
    season?: boolean | MediaCountOutputTypeCountSeasonArgs
    watching?: boolean | MediaCountOutputTypeCountWatchingArgs
  }

  // Custom InputTypes

  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaCountOutputType
     */
    select?: MediaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountPlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Media_PlatformWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Categorie_MovieWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountActorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Actor_MediaWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountWatchlistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchListWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountSeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountWatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchingWhereInput
  }



  /**
   * Count Type ActorCountOutputType
   */

  export type ActorCountOutputType = {
    media: number
  }

  export type ActorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | ActorCountOutputTypeCountMediaArgs
  }

  // Custom InputTypes

  /**
   * ActorCountOutputType without action
   */
  export type ActorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActorCountOutputType
     */
    select?: ActorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ActorCountOutputType without action
   */
  export type ActorCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Actor_MediaWhereInput
  }



  /**
   * Count Type SeasonCountOutputType
   */

  export type SeasonCountOutputType = {
    episodes: number
  }

  export type SeasonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    episodes?: boolean | SeasonCountOutputTypeCountEpisodesArgs
  }

  // Custom InputTypes

  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeasonCountOutputType
     */
    select?: SeasonCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SeasonCountOutputType without action
   */
  export type SeasonCountOutputTypeCountEpisodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodeWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    pseudo: string | null
    password: string | null
    created_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    pseudo: string | null
    password: string | null
    created_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    pseudo: number
    password: number
    created_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    pseudo?: true
    password?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    pseudo?: true
    password?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    pseudo?: true
    password?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    pseudo: string
    password: string
    created_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    pseudo?: boolean
    password?: boolean
    created_at?: boolean
    platform?: boolean | User$platformArgs<ExtArgs>
    watching?: boolean | User$watchingArgs<ExtArgs>
    WatchList?: boolean | User$WatchListArgs<ExtArgs>
    rating?: boolean | User$ratingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    pseudo?: boolean
    password?: boolean
    created_at?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platform?: boolean | User$platformArgs<ExtArgs>
    watching?: boolean | User$watchingArgs<ExtArgs>
    WatchList?: boolean | User$WatchListArgs<ExtArgs>
    rating?: boolean | User$ratingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      platform: Prisma.$User_PlatformPayload<ExtArgs>[]
      watching: Prisma.$WatchingPayload<ExtArgs>[]
      WatchList: Prisma.$WatchListPayload<ExtArgs>[]
      rating: Prisma.$RatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      pseudo: string
      password: string
      created_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    platform<T extends User$platformArgs<ExtArgs> = {}>(args?: Subset<T, User$platformArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'findMany'> | Null>;

    watching<T extends User$watchingArgs<ExtArgs> = {}>(args?: Subset<T, User$watchingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'findMany'> | Null>;

    WatchList<T extends User$WatchListArgs<ExtArgs> = {}>(args?: Subset<T, User$WatchListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'findMany'> | Null>;

    rating<T extends User$ratingArgs<ExtArgs> = {}>(args?: Subset<T, User$ratingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly pseudo: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.platform
   */
  export type User$platformArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    where?: User_PlatformWhereInput
    orderBy?: User_PlatformOrderByWithRelationInput | User_PlatformOrderByWithRelationInput[]
    cursor?: User_PlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_PlatformScalarFieldEnum | User_PlatformScalarFieldEnum[]
  }


  /**
   * User.watching
   */
  export type User$watchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    where?: WatchingWhereInput
    orderBy?: WatchingOrderByWithRelationInput | WatchingOrderByWithRelationInput[]
    cursor?: WatchingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchingScalarFieldEnum | WatchingScalarFieldEnum[]
  }


  /**
   * User.WatchList
   */
  export type User$WatchListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    where?: WatchListWhereInput
    orderBy?: WatchListOrderByWithRelationInput | WatchListOrderByWithRelationInput[]
    cursor?: WatchListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchListScalarFieldEnum | WatchListScalarFieldEnum[]
  }


  /**
   * User.rating
   */
  export type User$ratingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model User_Platform
   */

  export type AggregateUser_Platform = {
    _count: User_PlatformCountAggregateOutputType | null
    _avg: User_PlatformAvgAggregateOutputType | null
    _sum: User_PlatformSumAggregateOutputType | null
    _min: User_PlatformMinAggregateOutputType | null
    _max: User_PlatformMaxAggregateOutputType | null
  }

  export type User_PlatformAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    platformId: number | null
  }

  export type User_PlatformSumAggregateOutputType = {
    id: number | null
    userId: number | null
    platformId: number | null
  }

  export type User_PlatformMinAggregateOutputType = {
    id: number | null
    userId: number | null
    platformId: number | null
  }

  export type User_PlatformMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    platformId: number | null
  }

  export type User_PlatformCountAggregateOutputType = {
    id: number
    userId: number
    platformId: number
    _all: number
  }


  export type User_PlatformAvgAggregateInputType = {
    id?: true
    userId?: true
    platformId?: true
  }

  export type User_PlatformSumAggregateInputType = {
    id?: true
    userId?: true
    platformId?: true
  }

  export type User_PlatformMinAggregateInputType = {
    id?: true
    userId?: true
    platformId?: true
  }

  export type User_PlatformMaxAggregateInputType = {
    id?: true
    userId?: true
    platformId?: true
  }

  export type User_PlatformCountAggregateInputType = {
    id?: true
    userId?: true
    platformId?: true
    _all?: true
  }

  export type User_PlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User_Platform to aggregate.
     */
    where?: User_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Platforms to fetch.
     */
    orderBy?: User_PlatformOrderByWithRelationInput | User_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: User_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned User_Platforms
    **/
    _count?: true | User_PlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_PlatformAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_PlatformSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_PlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_PlatformMaxAggregateInputType
  }

  export type GetUser_PlatformAggregateType<T extends User_PlatformAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_Platform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_Platform[P]>
      : GetScalarType<T[P], AggregateUser_Platform[P]>
  }




  export type User_PlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: User_PlatformWhereInput
    orderBy?: User_PlatformOrderByWithAggregationInput | User_PlatformOrderByWithAggregationInput[]
    by: User_PlatformScalarFieldEnum[] | User_PlatformScalarFieldEnum
    having?: User_PlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_PlatformCountAggregateInputType | true
    _avg?: User_PlatformAvgAggregateInputType
    _sum?: User_PlatformSumAggregateInputType
    _min?: User_PlatformMinAggregateInputType
    _max?: User_PlatformMaxAggregateInputType
  }

  export type User_PlatformGroupByOutputType = {
    id: number
    userId: number
    platformId: number
    _count: User_PlatformCountAggregateOutputType | null
    _avg: User_PlatformAvgAggregateOutputType | null
    _sum: User_PlatformSumAggregateOutputType | null
    _min: User_PlatformMinAggregateOutputType | null
    _max: User_PlatformMaxAggregateOutputType | null
  }

  type GetUser_PlatformGroupByPayload<T extends User_PlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_PlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_PlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_PlatformGroupByOutputType[P]>
            : GetScalarType<T[P], User_PlatformGroupByOutputType[P]>
        }
      >
    >


  export type User_PlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    platformId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_Platform"]>

  export type User_PlatformSelectScalar = {
    id?: boolean
    userId?: boolean
    platformId?: boolean
  }

  export type User_PlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }


  export type $User_PlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User_Platform"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      platform: Prisma.$PlatformPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      platformId: number
    }, ExtArgs["result"]["user_Platform"]>
    composites: {}
  }


  type User_PlatformGetPayload<S extends boolean | null | undefined | User_PlatformDefaultArgs> = $Result.GetResult<Prisma.$User_PlatformPayload, S>

  type User_PlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<User_PlatformFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_PlatformCountAggregateInputType | true
    }

  export interface User_PlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User_Platform'], meta: { name: 'User_Platform' } }
    /**
     * Find zero or one User_Platform that matches the filter.
     * @param {User_PlatformFindUniqueArgs} args - Arguments to find a User_Platform
     * @example
     * // Get one User_Platform
     * const user_Platform = await prisma.user_Platform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends User_PlatformFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, User_PlatformFindUniqueArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User_Platform that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {User_PlatformFindUniqueOrThrowArgs} args - Arguments to find a User_Platform
     * @example
     * // Get one User_Platform
     * const user_Platform = await prisma.user_Platform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends User_PlatformFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, User_PlatformFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User_Platform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_PlatformFindFirstArgs} args - Arguments to find a User_Platform
     * @example
     * // Get one User_Platform
     * const user_Platform = await prisma.user_Platform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends User_PlatformFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, User_PlatformFindFirstArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User_Platform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_PlatformFindFirstOrThrowArgs} args - Arguments to find a User_Platform
     * @example
     * // Get one User_Platform
     * const user_Platform = await prisma.user_Platform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends User_PlatformFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, User_PlatformFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more User_Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_PlatformFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_Platforms
     * const user_Platforms = await prisma.user_Platform.findMany()
     * 
     * // Get first 10 User_Platforms
     * const user_Platforms = await prisma.user_Platform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_PlatformWithIdOnly = await prisma.user_Platform.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends User_PlatformFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, User_PlatformFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User_Platform.
     * @param {User_PlatformCreateArgs} args - Arguments to create a User_Platform.
     * @example
     * // Create one User_Platform
     * const User_Platform = await prisma.user_Platform.create({
     *   data: {
     *     // ... data to create a User_Platform
     *   }
     * })
     * 
    **/
    create<T extends User_PlatformCreateArgs<ExtArgs>>(
      args: SelectSubset<T, User_PlatformCreateArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many User_Platforms.
     *     @param {User_PlatformCreateManyArgs} args - Arguments to create many User_Platforms.
     *     @example
     *     // Create many User_Platforms
     *     const user_Platform = await prisma.user_Platform.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends User_PlatformCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, User_PlatformCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User_Platform.
     * @param {User_PlatformDeleteArgs} args - Arguments to delete one User_Platform.
     * @example
     * // Delete one User_Platform
     * const User_Platform = await prisma.user_Platform.delete({
     *   where: {
     *     // ... filter to delete one User_Platform
     *   }
     * })
     * 
    **/
    delete<T extends User_PlatformDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, User_PlatformDeleteArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User_Platform.
     * @param {User_PlatformUpdateArgs} args - Arguments to update one User_Platform.
     * @example
     * // Update one User_Platform
     * const user_Platform = await prisma.user_Platform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends User_PlatformUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, User_PlatformUpdateArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more User_Platforms.
     * @param {User_PlatformDeleteManyArgs} args - Arguments to filter User_Platforms to delete.
     * @example
     * // Delete a few User_Platforms
     * const { count } = await prisma.user_Platform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends User_PlatformDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, User_PlatformDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_PlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_Platforms
     * const user_Platform = await prisma.user_Platform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends User_PlatformUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, User_PlatformUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_Platform.
     * @param {User_PlatformUpsertArgs} args - Arguments to update or create a User_Platform.
     * @example
     * // Update or create a User_Platform
     * const user_Platform = await prisma.user_Platform.upsert({
     *   create: {
     *     // ... data to create a User_Platform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_Platform we want to update
     *   }
     * })
    **/
    upsert<T extends User_PlatformUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, User_PlatformUpsertArgs<ExtArgs>>
    ): Prisma__User_PlatformClient<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of User_Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_PlatformCountArgs} args - Arguments to filter User_Platforms to count.
     * @example
     * // Count the number of User_Platforms
     * const count = await prisma.user_Platform.count({
     *   where: {
     *     // ... the filter for the User_Platforms we want to count
     *   }
     * })
    **/
    count<T extends User_PlatformCountArgs>(
      args?: Subset<T, User_PlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_PlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_PlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_PlatformAggregateArgs>(args: Subset<T, User_PlatformAggregateArgs>): Prisma.PrismaPromise<GetUser_PlatformAggregateType<T>>

    /**
     * Group by User_Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_PlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_PlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_PlatformGroupByArgs['orderBy'] }
        : { orderBy?: User_PlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_PlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_PlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User_Platform model
   */
  readonly fields: User_PlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User_Platform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__User_PlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    platform<T extends PlatformDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlatformDefaultArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User_Platform model
   */ 
  interface User_PlatformFieldRefs {
    readonly id: FieldRef<"User_Platform", 'Int'>
    readonly userId: FieldRef<"User_Platform", 'Int'>
    readonly platformId: FieldRef<"User_Platform", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * User_Platform findUnique
   */
  export type User_PlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which User_Platform to fetch.
     */
    where: User_PlatformWhereUniqueInput
  }


  /**
   * User_Platform findUniqueOrThrow
   */
  export type User_PlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which User_Platform to fetch.
     */
    where: User_PlatformWhereUniqueInput
  }


  /**
   * User_Platform findFirst
   */
  export type User_PlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which User_Platform to fetch.
     */
    where?: User_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Platforms to fetch.
     */
    orderBy?: User_PlatformOrderByWithRelationInput | User_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for User_Platforms.
     */
    cursor?: User_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of User_Platforms.
     */
    distinct?: User_PlatformScalarFieldEnum | User_PlatformScalarFieldEnum[]
  }


  /**
   * User_Platform findFirstOrThrow
   */
  export type User_PlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which User_Platform to fetch.
     */
    where?: User_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Platforms to fetch.
     */
    orderBy?: User_PlatformOrderByWithRelationInput | User_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for User_Platforms.
     */
    cursor?: User_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of User_Platforms.
     */
    distinct?: User_PlatformScalarFieldEnum | User_PlatformScalarFieldEnum[]
  }


  /**
   * User_Platform findMany
   */
  export type User_PlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which User_Platforms to fetch.
     */
    where?: User_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of User_Platforms to fetch.
     */
    orderBy?: User_PlatformOrderByWithRelationInput | User_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing User_Platforms.
     */
    cursor?: User_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` User_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` User_Platforms.
     */
    skip?: number
    distinct?: User_PlatformScalarFieldEnum | User_PlatformScalarFieldEnum[]
  }


  /**
   * User_Platform create
   */
  export type User_PlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a User_Platform.
     */
    data: XOR<User_PlatformCreateInput, User_PlatformUncheckedCreateInput>
  }


  /**
   * User_Platform createMany
   */
  export type User_PlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many User_Platforms.
     */
    data: User_PlatformCreateManyInput | User_PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User_Platform update
   */
  export type User_PlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a User_Platform.
     */
    data: XOR<User_PlatformUpdateInput, User_PlatformUncheckedUpdateInput>
    /**
     * Choose, which User_Platform to update.
     */
    where: User_PlatformWhereUniqueInput
  }


  /**
   * User_Platform updateMany
   */
  export type User_PlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update User_Platforms.
     */
    data: XOR<User_PlatformUpdateManyMutationInput, User_PlatformUncheckedUpdateManyInput>
    /**
     * Filter which User_Platforms to update
     */
    where?: User_PlatformWhereInput
  }


  /**
   * User_Platform upsert
   */
  export type User_PlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the User_Platform to update in case it exists.
     */
    where: User_PlatformWhereUniqueInput
    /**
     * In case the User_Platform found by the `where` argument doesn't exist, create a new User_Platform with this data.
     */
    create: XOR<User_PlatformCreateInput, User_PlatformUncheckedCreateInput>
    /**
     * In case the User_Platform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<User_PlatformUpdateInput, User_PlatformUncheckedUpdateInput>
  }


  /**
   * User_Platform delete
   */
  export type User_PlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    /**
     * Filter which User_Platform to delete.
     */
    where: User_PlatformWhereUniqueInput
  }


  /**
   * User_Platform deleteMany
   */
  export type User_PlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User_Platforms to delete
     */
    where?: User_PlatformWhereInput
  }


  /**
   * User_Platform without action
   */
  export type User_PlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
  }



  /**
   * Model Platform
   */

  export type AggregatePlatform = {
    _count: PlatformCountAggregateOutputType | null
    _avg: PlatformAvgAggregateOutputType | null
    _sum: PlatformSumAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  export type PlatformAvgAggregateOutputType = {
    id: number | null
  }

  export type PlatformSumAggregateOutputType = {
    id: number | null
  }

  export type PlatformMinAggregateOutputType = {
    id: number | null
    title: string | null
    logo_url: string | null
    link: string | null
  }

  export type PlatformMaxAggregateOutputType = {
    id: number | null
    title: string | null
    logo_url: string | null
    link: string | null
  }

  export type PlatformCountAggregateOutputType = {
    id: number
    title: number
    logo_url: number
    link: number
    _all: number
  }


  export type PlatformAvgAggregateInputType = {
    id?: true
  }

  export type PlatformSumAggregateInputType = {
    id?: true
  }

  export type PlatformMinAggregateInputType = {
    id?: true
    title?: true
    logo_url?: true
    link?: true
  }

  export type PlatformMaxAggregateInputType = {
    id?: true
    title?: true
    logo_url?: true
    link?: true
  }

  export type PlatformCountAggregateInputType = {
    id?: true
    title?: true
    logo_url?: true
    link?: true
    _all?: true
  }

  export type PlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platform to aggregate.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Platforms
    **/
    _count?: true | PlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlatformAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlatformSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlatformMaxAggregateInputType
  }

  export type GetPlatformAggregateType<T extends PlatformAggregateArgs> = {
        [P in keyof T & keyof AggregatePlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlatform[P]>
      : GetScalarType<T[P], AggregatePlatform[P]>
  }




  export type PlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlatformWhereInput
    orderBy?: PlatformOrderByWithAggregationInput | PlatformOrderByWithAggregationInput[]
    by: PlatformScalarFieldEnum[] | PlatformScalarFieldEnum
    having?: PlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlatformCountAggregateInputType | true
    _avg?: PlatformAvgAggregateInputType
    _sum?: PlatformSumAggregateInputType
    _min?: PlatformMinAggregateInputType
    _max?: PlatformMaxAggregateInputType
  }

  export type PlatformGroupByOutputType = {
    id: number
    title: string
    logo_url: string
    link: string
    _count: PlatformCountAggregateOutputType | null
    _avg: PlatformAvgAggregateOutputType | null
    _sum: PlatformSumAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  type GetPlatformGroupByPayload<T extends PlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlatformGroupByOutputType[P]>
            : GetScalarType<T[P], PlatformGroupByOutputType[P]>
        }
      >
    >


  export type PlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    logo_url?: boolean
    link?: boolean
    user?: boolean | Platform$userArgs<ExtArgs>
    media?: boolean | Platform$mediaArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectScalar = {
    id?: boolean
    title?: boolean
    logo_url?: boolean
    link?: boolean
  }

  export type PlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Platform$userArgs<ExtArgs>
    media?: boolean | Platform$mediaArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Platform"
    objects: {
      user: Prisma.$User_PlatformPayload<ExtArgs>[]
      media: Prisma.$Media_PlatformPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      logo_url: string
      link: string
    }, ExtArgs["result"]["platform"]>
    composites: {}
  }


  type PlatformGetPayload<S extends boolean | null | undefined | PlatformDefaultArgs> = $Result.GetResult<Prisma.$PlatformPayload, S>

  type PlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlatformFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlatformCountAggregateInputType | true
    }

  export interface PlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Platform'], meta: { name: 'Platform' } }
    /**
     * Find zero or one Platform that matches the filter.
     * @param {PlatformFindUniqueArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlatformFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformFindUniqueArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Platform that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlatformFindUniqueOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlatformFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Platform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlatformFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindFirstArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Platform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlatformFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Platforms
     * const platforms = await prisma.platform.findMany()
     * 
     * // Get first 10 Platforms
     * const platforms = await prisma.platform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const platformWithIdOnly = await prisma.platform.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlatformFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Platform.
     * @param {PlatformCreateArgs} args - Arguments to create a Platform.
     * @example
     * // Create one Platform
     * const Platform = await prisma.platform.create({
     *   data: {
     *     // ... data to create a Platform
     *   }
     * })
     * 
    **/
    create<T extends PlatformCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformCreateArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Platforms.
     *     @param {PlatformCreateManyArgs} args - Arguments to create many Platforms.
     *     @example
     *     // Create many Platforms
     *     const platform = await prisma.platform.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlatformCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Platform.
     * @param {PlatformDeleteArgs} args - Arguments to delete one Platform.
     * @example
     * // Delete one Platform
     * const Platform = await prisma.platform.delete({
     *   where: {
     *     // ... filter to delete one Platform
     *   }
     * })
     * 
    **/
    delete<T extends PlatformDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformDeleteArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Platform.
     * @param {PlatformUpdateArgs} args - Arguments to update one Platform.
     * @example
     * // Update one Platform
     * const platform = await prisma.platform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlatformUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformUpdateArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Platforms.
     * @param {PlatformDeleteManyArgs} args - Arguments to filter Platforms to delete.
     * @example
     * // Delete a few Platforms
     * const { count } = await prisma.platform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlatformDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Platforms
     * const platform = await prisma.platform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlatformUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Platform.
     * @param {PlatformUpsertArgs} args - Arguments to update or create a Platform.
     * @example
     * // Update or create a Platform
     * const platform = await prisma.platform.upsert({
     *   create: {
     *     // ... data to create a Platform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Platform we want to update
     *   }
     * })
    **/
    upsert<T extends PlatformUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformUpsertArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformCountArgs} args - Arguments to filter Platforms to count.
     * @example
     * // Count the number of Platforms
     * const count = await prisma.platform.count({
     *   where: {
     *     // ... the filter for the Platforms we want to count
     *   }
     * })
    **/
    count<T extends PlatformCountArgs>(
      args?: Subset<T, PlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlatformAggregateArgs>(args: Subset<T, PlatformAggregateArgs>): Prisma.PrismaPromise<GetPlatformAggregateType<T>>

    /**
     * Group by Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlatformGroupByArgs['orderBy'] }
        : { orderBy?: PlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Platform model
   */
  readonly fields: PlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Platform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Platform$userArgs<ExtArgs> = {}>(args?: Subset<T, Platform$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$User_PlatformPayload<ExtArgs>, T, 'findMany'> | Null>;

    media<T extends Platform$mediaArgs<ExtArgs> = {}>(args?: Subset<T, Platform$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Platform model
   */ 
  interface PlatformFieldRefs {
    readonly id: FieldRef<"Platform", 'Int'>
    readonly title: FieldRef<"Platform", 'String'>
    readonly logo_url: FieldRef<"Platform", 'String'>
    readonly link: FieldRef<"Platform", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Platform findUnique
   */
  export type PlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }


  /**
   * Platform findUniqueOrThrow
   */
  export type PlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }


  /**
   * Platform findFirst
   */
  export type PlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }


  /**
   * Platform findFirstOrThrow
   */
  export type PlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }


  /**
   * Platform findMany
   */
  export type PlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platforms to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }


  /**
   * Platform create
   */
  export type PlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a Platform.
     */
    data: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
  }


  /**
   * Platform createMany
   */
  export type PlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Platforms.
     */
    data: PlatformCreateManyInput | PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Platform update
   */
  export type PlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a Platform.
     */
    data: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
    /**
     * Choose, which Platform to update.
     */
    where: PlatformWhereUniqueInput
  }


  /**
   * Platform updateMany
   */
  export type PlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Platforms.
     */
    data: XOR<PlatformUpdateManyMutationInput, PlatformUncheckedUpdateManyInput>
    /**
     * Filter which Platforms to update
     */
    where?: PlatformWhereInput
  }


  /**
   * Platform upsert
   */
  export type PlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the Platform to update in case it exists.
     */
    where: PlatformWhereUniqueInput
    /**
     * In case the Platform found by the `where` argument doesn't exist, create a new Platform with this data.
     */
    create: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
    /**
     * In case the Platform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
  }


  /**
   * Platform delete
   */
  export type PlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter which Platform to delete.
     */
    where: PlatformWhereUniqueInput
  }


  /**
   * Platform deleteMany
   */
  export type PlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platforms to delete
     */
    where?: PlatformWhereInput
  }


  /**
   * Platform.user
   */
  export type Platform$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_Platform
     */
    select?: User_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: User_PlatformInclude<ExtArgs> | null
    where?: User_PlatformWhereInput
    orderBy?: User_PlatformOrderByWithRelationInput | User_PlatformOrderByWithRelationInput[]
    cursor?: User_PlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_PlatformScalarFieldEnum | User_PlatformScalarFieldEnum[]
  }


  /**
   * Platform.media
   */
  export type Platform$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    where?: Media_PlatformWhereInput
    orderBy?: Media_PlatformOrderByWithRelationInput | Media_PlatformOrderByWithRelationInput[]
    cursor?: Media_PlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Media_PlatformScalarFieldEnum | Media_PlatformScalarFieldEnum[]
  }


  /**
   * Platform without action
   */
  export type PlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlatformInclude<ExtArgs> | null
  }



  /**
   * Model Media_Platform
   */

  export type AggregateMedia_Platform = {
    _count: Media_PlatformCountAggregateOutputType | null
    _avg: Media_PlatformAvgAggregateOutputType | null
    _sum: Media_PlatformSumAggregateOutputType | null
    _min: Media_PlatformMinAggregateOutputType | null
    _max: Media_PlatformMaxAggregateOutputType | null
  }

  export type Media_PlatformAvgAggregateOutputType = {
    id: number | null
    mediaId: number | null
    platformId: number | null
  }

  export type Media_PlatformSumAggregateOutputType = {
    id: number | null
    mediaId: number | null
    platformId: number | null
  }

  export type Media_PlatformMinAggregateOutputType = {
    id: number | null
    mediaId: number | null
    platformId: number | null
  }

  export type Media_PlatformMaxAggregateOutputType = {
    id: number | null
    mediaId: number | null
    platformId: number | null
  }

  export type Media_PlatformCountAggregateOutputType = {
    id: number
    mediaId: number
    platformId: number
    _all: number
  }


  export type Media_PlatformAvgAggregateInputType = {
    id?: true
    mediaId?: true
    platformId?: true
  }

  export type Media_PlatformSumAggregateInputType = {
    id?: true
    mediaId?: true
    platformId?: true
  }

  export type Media_PlatformMinAggregateInputType = {
    id?: true
    mediaId?: true
    platformId?: true
  }

  export type Media_PlatformMaxAggregateInputType = {
    id?: true
    mediaId?: true
    platformId?: true
  }

  export type Media_PlatformCountAggregateInputType = {
    id?: true
    mediaId?: true
    platformId?: true
    _all?: true
  }

  export type Media_PlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media_Platform to aggregate.
     */
    where?: Media_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media_Platforms to fetch.
     */
    orderBy?: Media_PlatformOrderByWithRelationInput | Media_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Media_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media_Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Media_Platforms
    **/
    _count?: true | Media_PlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Media_PlatformAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Media_PlatformSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Media_PlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Media_PlatformMaxAggregateInputType
  }

  export type GetMedia_PlatformAggregateType<T extends Media_PlatformAggregateArgs> = {
        [P in keyof T & keyof AggregateMedia_Platform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedia_Platform[P]>
      : GetScalarType<T[P], AggregateMedia_Platform[P]>
  }




  export type Media_PlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Media_PlatformWhereInput
    orderBy?: Media_PlatformOrderByWithAggregationInput | Media_PlatformOrderByWithAggregationInput[]
    by: Media_PlatformScalarFieldEnum[] | Media_PlatformScalarFieldEnum
    having?: Media_PlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Media_PlatformCountAggregateInputType | true
    _avg?: Media_PlatformAvgAggregateInputType
    _sum?: Media_PlatformSumAggregateInputType
    _min?: Media_PlatformMinAggregateInputType
    _max?: Media_PlatformMaxAggregateInputType
  }

  export type Media_PlatformGroupByOutputType = {
    id: number
    mediaId: number
    platformId: number
    _count: Media_PlatformCountAggregateOutputType | null
    _avg: Media_PlatformAvgAggregateOutputType | null
    _sum: Media_PlatformSumAggregateOutputType | null
    _min: Media_PlatformMinAggregateOutputType | null
    _max: Media_PlatformMaxAggregateOutputType | null
  }

  type GetMedia_PlatformGroupByPayload<T extends Media_PlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Media_PlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Media_PlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Media_PlatformGroupByOutputType[P]>
            : GetScalarType<T[P], Media_PlatformGroupByOutputType[P]>
        }
      >
    >


  export type Media_PlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mediaId?: boolean
    platformId?: boolean
    media?: boolean | MediaDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["media_Platform"]>

  export type Media_PlatformSelectScalar = {
    id?: boolean
    mediaId?: boolean
    platformId?: boolean
  }

  export type Media_PlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | MediaDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }


  export type $Media_PlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Media_Platform"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>
      platform: Prisma.$PlatformPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mediaId: number
      platformId: number
    }, ExtArgs["result"]["media_Platform"]>
    composites: {}
  }


  type Media_PlatformGetPayload<S extends boolean | null | undefined | Media_PlatformDefaultArgs> = $Result.GetResult<Prisma.$Media_PlatformPayload, S>

  type Media_PlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Media_PlatformFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Media_PlatformCountAggregateInputType | true
    }

  export interface Media_PlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Media_Platform'], meta: { name: 'Media_Platform' } }
    /**
     * Find zero or one Media_Platform that matches the filter.
     * @param {Media_PlatformFindUniqueArgs} args - Arguments to find a Media_Platform
     * @example
     * // Get one Media_Platform
     * const media_Platform = await prisma.media_Platform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Media_PlatformFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Media_PlatformFindUniqueArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Media_Platform that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Media_PlatformFindUniqueOrThrowArgs} args - Arguments to find a Media_Platform
     * @example
     * // Get one Media_Platform
     * const media_Platform = await prisma.media_Platform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Media_PlatformFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Media_PlatformFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Media_Platform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Media_PlatformFindFirstArgs} args - Arguments to find a Media_Platform
     * @example
     * // Get one Media_Platform
     * const media_Platform = await prisma.media_Platform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Media_PlatformFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Media_PlatformFindFirstArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Media_Platform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Media_PlatformFindFirstOrThrowArgs} args - Arguments to find a Media_Platform
     * @example
     * // Get one Media_Platform
     * const media_Platform = await prisma.media_Platform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Media_PlatformFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Media_PlatformFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Media_Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Media_PlatformFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Media_Platforms
     * const media_Platforms = await prisma.media_Platform.findMany()
     * 
     * // Get first 10 Media_Platforms
     * const media_Platforms = await prisma.media_Platform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const media_PlatformWithIdOnly = await prisma.media_Platform.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Media_PlatformFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Media_PlatformFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Media_Platform.
     * @param {Media_PlatformCreateArgs} args - Arguments to create a Media_Platform.
     * @example
     * // Create one Media_Platform
     * const Media_Platform = await prisma.media_Platform.create({
     *   data: {
     *     // ... data to create a Media_Platform
     *   }
     * })
     * 
    **/
    create<T extends Media_PlatformCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Media_PlatformCreateArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Media_Platforms.
     *     @param {Media_PlatformCreateManyArgs} args - Arguments to create many Media_Platforms.
     *     @example
     *     // Create many Media_Platforms
     *     const media_Platform = await prisma.media_Platform.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Media_PlatformCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Media_PlatformCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Media_Platform.
     * @param {Media_PlatformDeleteArgs} args - Arguments to delete one Media_Platform.
     * @example
     * // Delete one Media_Platform
     * const Media_Platform = await prisma.media_Platform.delete({
     *   where: {
     *     // ... filter to delete one Media_Platform
     *   }
     * })
     * 
    **/
    delete<T extends Media_PlatformDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Media_PlatformDeleteArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Media_Platform.
     * @param {Media_PlatformUpdateArgs} args - Arguments to update one Media_Platform.
     * @example
     * // Update one Media_Platform
     * const media_Platform = await prisma.media_Platform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Media_PlatformUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Media_PlatformUpdateArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Media_Platforms.
     * @param {Media_PlatformDeleteManyArgs} args - Arguments to filter Media_Platforms to delete.
     * @example
     * // Delete a few Media_Platforms
     * const { count } = await prisma.media_Platform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Media_PlatformDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Media_PlatformDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media_Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Media_PlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Media_Platforms
     * const media_Platform = await prisma.media_Platform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Media_PlatformUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Media_PlatformUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Media_Platform.
     * @param {Media_PlatformUpsertArgs} args - Arguments to update or create a Media_Platform.
     * @example
     * // Update or create a Media_Platform
     * const media_Platform = await prisma.media_Platform.upsert({
     *   create: {
     *     // ... data to create a Media_Platform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Media_Platform we want to update
     *   }
     * })
    **/
    upsert<T extends Media_PlatformUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Media_PlatformUpsertArgs<ExtArgs>>
    ): Prisma__Media_PlatformClient<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Media_Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Media_PlatformCountArgs} args - Arguments to filter Media_Platforms to count.
     * @example
     * // Count the number of Media_Platforms
     * const count = await prisma.media_Platform.count({
     *   where: {
     *     // ... the filter for the Media_Platforms we want to count
     *   }
     * })
    **/
    count<T extends Media_PlatformCountArgs>(
      args?: Subset<T, Media_PlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Media_PlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Media_Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Media_PlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Media_PlatformAggregateArgs>(args: Subset<T, Media_PlatformAggregateArgs>): Prisma.PrismaPromise<GetMedia_PlatformAggregateType<T>>

    /**
     * Group by Media_Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Media_PlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Media_PlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Media_PlatformGroupByArgs['orderBy'] }
        : { orderBy?: Media_PlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Media_PlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedia_PlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Media_Platform model
   */
  readonly fields: Media_PlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Media_Platform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Media_PlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    platform<T extends PlatformDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlatformDefaultArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Media_Platform model
   */ 
  interface Media_PlatformFieldRefs {
    readonly id: FieldRef<"Media_Platform", 'Int'>
    readonly mediaId: FieldRef<"Media_Platform", 'Int'>
    readonly platformId: FieldRef<"Media_Platform", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Media_Platform findUnique
   */
  export type Media_PlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Media_Platform to fetch.
     */
    where: Media_PlatformWhereUniqueInput
  }


  /**
   * Media_Platform findUniqueOrThrow
   */
  export type Media_PlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Media_Platform to fetch.
     */
    where: Media_PlatformWhereUniqueInput
  }


  /**
   * Media_Platform findFirst
   */
  export type Media_PlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Media_Platform to fetch.
     */
    where?: Media_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media_Platforms to fetch.
     */
    orderBy?: Media_PlatformOrderByWithRelationInput | Media_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media_Platforms.
     */
    cursor?: Media_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media_Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media_Platforms.
     */
    distinct?: Media_PlatformScalarFieldEnum | Media_PlatformScalarFieldEnum[]
  }


  /**
   * Media_Platform findFirstOrThrow
   */
  export type Media_PlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Media_Platform to fetch.
     */
    where?: Media_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media_Platforms to fetch.
     */
    orderBy?: Media_PlatformOrderByWithRelationInput | Media_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media_Platforms.
     */
    cursor?: Media_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media_Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media_Platforms.
     */
    distinct?: Media_PlatformScalarFieldEnum | Media_PlatformScalarFieldEnum[]
  }


  /**
   * Media_Platform findMany
   */
  export type Media_PlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Media_Platforms to fetch.
     */
    where?: Media_PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media_Platforms to fetch.
     */
    orderBy?: Media_PlatformOrderByWithRelationInput | Media_PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Media_Platforms.
     */
    cursor?: Media_PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media_Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media_Platforms.
     */
    skip?: number
    distinct?: Media_PlatformScalarFieldEnum | Media_PlatformScalarFieldEnum[]
  }


  /**
   * Media_Platform create
   */
  export type Media_PlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a Media_Platform.
     */
    data: XOR<Media_PlatformCreateInput, Media_PlatformUncheckedCreateInput>
  }


  /**
   * Media_Platform createMany
   */
  export type Media_PlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Media_Platforms.
     */
    data: Media_PlatformCreateManyInput | Media_PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Media_Platform update
   */
  export type Media_PlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a Media_Platform.
     */
    data: XOR<Media_PlatformUpdateInput, Media_PlatformUncheckedUpdateInput>
    /**
     * Choose, which Media_Platform to update.
     */
    where: Media_PlatformWhereUniqueInput
  }


  /**
   * Media_Platform updateMany
   */
  export type Media_PlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Media_Platforms.
     */
    data: XOR<Media_PlatformUpdateManyMutationInput, Media_PlatformUncheckedUpdateManyInput>
    /**
     * Filter which Media_Platforms to update
     */
    where?: Media_PlatformWhereInput
  }


  /**
   * Media_Platform upsert
   */
  export type Media_PlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the Media_Platform to update in case it exists.
     */
    where: Media_PlatformWhereUniqueInput
    /**
     * In case the Media_Platform found by the `where` argument doesn't exist, create a new Media_Platform with this data.
     */
    create: XOR<Media_PlatformCreateInput, Media_PlatformUncheckedCreateInput>
    /**
     * In case the Media_Platform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Media_PlatformUpdateInput, Media_PlatformUncheckedUpdateInput>
  }


  /**
   * Media_Platform delete
   */
  export type Media_PlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    /**
     * Filter which Media_Platform to delete.
     */
    where: Media_PlatformWhereUniqueInput
  }


  /**
   * Media_Platform deleteMany
   */
  export type Media_PlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media_Platforms to delete
     */
    where?: Media_PlatformWhereInput
  }


  /**
   * Media_Platform without action
   */
  export type Media_PlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
  }



  /**
   * Model Watching
   */

  export type AggregateWatching = {
    _count: WatchingCountAggregateOutputType | null
    _avg: WatchingAvgAggregateOutputType | null
    _sum: WatchingSumAggregateOutputType | null
    _min: WatchingMinAggregateOutputType | null
    _max: WatchingMaxAggregateOutputType | null
  }

  export type WatchingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchingSumAggregateOutputType = {
    id: number | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchingMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchingMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchingCountAggregateOutputType = {
    id: number
    created_at: number
    userId: number
    mediaId: number
    _all: number
  }


  export type WatchingAvgAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
  }

  export type WatchingSumAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
  }

  export type WatchingMinAggregateInputType = {
    id?: true
    created_at?: true
    userId?: true
    mediaId?: true
  }

  export type WatchingMaxAggregateInputType = {
    id?: true
    created_at?: true
    userId?: true
    mediaId?: true
  }

  export type WatchingCountAggregateInputType = {
    id?: true
    created_at?: true
    userId?: true
    mediaId?: true
    _all?: true
  }

  export type WatchingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watching to aggregate.
     */
    where?: WatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchings to fetch.
     */
    orderBy?: WatchingOrderByWithRelationInput | WatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Watchings
    **/
    _count?: true | WatchingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WatchingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WatchingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchingMaxAggregateInputType
  }

  export type GetWatchingAggregateType<T extends WatchingAggregateArgs> = {
        [P in keyof T & keyof AggregateWatching]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatching[P]>
      : GetScalarType<T[P], AggregateWatching[P]>
  }




  export type WatchingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchingWhereInput
    orderBy?: WatchingOrderByWithAggregationInput | WatchingOrderByWithAggregationInput[]
    by: WatchingScalarFieldEnum[] | WatchingScalarFieldEnum
    having?: WatchingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchingCountAggregateInputType | true
    _avg?: WatchingAvgAggregateInputType
    _sum?: WatchingSumAggregateInputType
    _min?: WatchingMinAggregateInputType
    _max?: WatchingMaxAggregateInputType
  }

  export type WatchingGroupByOutputType = {
    id: number
    created_at: Date
    userId: number
    mediaId: number
    _count: WatchingCountAggregateOutputType | null
    _avg: WatchingAvgAggregateOutputType | null
    _sum: WatchingSumAggregateOutputType | null
    _min: WatchingMinAggregateOutputType | null
    _max: WatchingMaxAggregateOutputType | null
  }

  type GetWatchingGroupByPayload<T extends WatchingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchingGroupByOutputType[P]>
            : GetScalarType<T[P], WatchingGroupByOutputType[P]>
        }
      >
    >


  export type WatchingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    userId?: boolean
    mediaId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watching"]>

  export type WatchingSelectScalar = {
    id?: boolean
    created_at?: boolean
    userId?: boolean
    mediaId?: boolean
  }

  export type WatchingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $WatchingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Watching"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      userId: number
      mediaId: number
    }, ExtArgs["result"]["watching"]>
    composites: {}
  }


  type WatchingGetPayload<S extends boolean | null | undefined | WatchingDefaultArgs> = $Result.GetResult<Prisma.$WatchingPayload, S>

  type WatchingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WatchingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WatchingCountAggregateInputType | true
    }

  export interface WatchingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Watching'], meta: { name: 'Watching' } }
    /**
     * Find zero or one Watching that matches the filter.
     * @param {WatchingFindUniqueArgs} args - Arguments to find a Watching
     * @example
     * // Get one Watching
     * const watching = await prisma.watching.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WatchingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WatchingFindUniqueArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Watching that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WatchingFindUniqueOrThrowArgs} args - Arguments to find a Watching
     * @example
     * // Get one Watching
     * const watching = await prisma.watching.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WatchingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Watching that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchingFindFirstArgs} args - Arguments to find a Watching
     * @example
     * // Get one Watching
     * const watching = await prisma.watching.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WatchingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchingFindFirstArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Watching that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchingFindFirstOrThrowArgs} args - Arguments to find a Watching
     * @example
     * // Get one Watching
     * const watching = await prisma.watching.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WatchingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Watchings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Watchings
     * const watchings = await prisma.watching.findMany()
     * 
     * // Get first 10 Watchings
     * const watchings = await prisma.watching.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchingWithIdOnly = await prisma.watching.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WatchingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Watching.
     * @param {WatchingCreateArgs} args - Arguments to create a Watching.
     * @example
     * // Create one Watching
     * const Watching = await prisma.watching.create({
     *   data: {
     *     // ... data to create a Watching
     *   }
     * })
     * 
    **/
    create<T extends WatchingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WatchingCreateArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Watchings.
     *     @param {WatchingCreateManyArgs} args - Arguments to create many Watchings.
     *     @example
     *     // Create many Watchings
     *     const watching = await prisma.watching.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WatchingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Watching.
     * @param {WatchingDeleteArgs} args - Arguments to delete one Watching.
     * @example
     * // Delete one Watching
     * const Watching = await prisma.watching.delete({
     *   where: {
     *     // ... filter to delete one Watching
     *   }
     * })
     * 
    **/
    delete<T extends WatchingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WatchingDeleteArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Watching.
     * @param {WatchingUpdateArgs} args - Arguments to update one Watching.
     * @example
     * // Update one Watching
     * const watching = await prisma.watching.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WatchingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WatchingUpdateArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Watchings.
     * @param {WatchingDeleteManyArgs} args - Arguments to filter Watchings to delete.
     * @example
     * // Delete a few Watchings
     * const { count } = await prisma.watching.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WatchingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Watchings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Watchings
     * const watching = await prisma.watching.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WatchingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WatchingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Watching.
     * @param {WatchingUpsertArgs} args - Arguments to update or create a Watching.
     * @example
     * // Update or create a Watching
     * const watching = await prisma.watching.upsert({
     *   create: {
     *     // ... data to create a Watching
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Watching we want to update
     *   }
     * })
    **/
    upsert<T extends WatchingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WatchingUpsertArgs<ExtArgs>>
    ): Prisma__WatchingClient<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Watchings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchingCountArgs} args - Arguments to filter Watchings to count.
     * @example
     * // Count the number of Watchings
     * const count = await prisma.watching.count({
     *   where: {
     *     // ... the filter for the Watchings we want to count
     *   }
     * })
    **/
    count<T extends WatchingCountArgs>(
      args?: Subset<T, WatchingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Watching.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchingAggregateArgs>(args: Subset<T, WatchingAggregateArgs>): Prisma.PrismaPromise<GetWatchingAggregateType<T>>

    /**
     * Group by Watching.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchingGroupByArgs['orderBy'] }
        : { orderBy?: WatchingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Watching model
   */
  readonly fields: WatchingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Watching.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Watching model
   */ 
  interface WatchingFieldRefs {
    readonly id: FieldRef<"Watching", 'Int'>
    readonly created_at: FieldRef<"Watching", 'DateTime'>
    readonly userId: FieldRef<"Watching", 'Int'>
    readonly mediaId: FieldRef<"Watching", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Watching findUnique
   */
  export type WatchingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * Filter, which Watching to fetch.
     */
    where: WatchingWhereUniqueInput
  }


  /**
   * Watching findUniqueOrThrow
   */
  export type WatchingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * Filter, which Watching to fetch.
     */
    where: WatchingWhereUniqueInput
  }


  /**
   * Watching findFirst
   */
  export type WatchingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * Filter, which Watching to fetch.
     */
    where?: WatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchings to fetch.
     */
    orderBy?: WatchingOrderByWithRelationInput | WatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchings.
     */
    cursor?: WatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchings.
     */
    distinct?: WatchingScalarFieldEnum | WatchingScalarFieldEnum[]
  }


  /**
   * Watching findFirstOrThrow
   */
  export type WatchingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * Filter, which Watching to fetch.
     */
    where?: WatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchings to fetch.
     */
    orderBy?: WatchingOrderByWithRelationInput | WatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchings.
     */
    cursor?: WatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchings.
     */
    distinct?: WatchingScalarFieldEnum | WatchingScalarFieldEnum[]
  }


  /**
   * Watching findMany
   */
  export type WatchingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * Filter, which Watchings to fetch.
     */
    where?: WatchingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchings to fetch.
     */
    orderBy?: WatchingOrderByWithRelationInput | WatchingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Watchings.
     */
    cursor?: WatchingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchings.
     */
    skip?: number
    distinct?: WatchingScalarFieldEnum | WatchingScalarFieldEnum[]
  }


  /**
   * Watching create
   */
  export type WatchingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * The data needed to create a Watching.
     */
    data: XOR<WatchingCreateInput, WatchingUncheckedCreateInput>
  }


  /**
   * Watching createMany
   */
  export type WatchingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Watchings.
     */
    data: WatchingCreateManyInput | WatchingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Watching update
   */
  export type WatchingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * The data needed to update a Watching.
     */
    data: XOR<WatchingUpdateInput, WatchingUncheckedUpdateInput>
    /**
     * Choose, which Watching to update.
     */
    where: WatchingWhereUniqueInput
  }


  /**
   * Watching updateMany
   */
  export type WatchingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Watchings.
     */
    data: XOR<WatchingUpdateManyMutationInput, WatchingUncheckedUpdateManyInput>
    /**
     * Filter which Watchings to update
     */
    where?: WatchingWhereInput
  }


  /**
   * Watching upsert
   */
  export type WatchingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * The filter to search for the Watching to update in case it exists.
     */
    where: WatchingWhereUniqueInput
    /**
     * In case the Watching found by the `where` argument doesn't exist, create a new Watching with this data.
     */
    create: XOR<WatchingCreateInput, WatchingUncheckedCreateInput>
    /**
     * In case the Watching was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchingUpdateInput, WatchingUncheckedUpdateInput>
  }


  /**
   * Watching delete
   */
  export type WatchingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    /**
     * Filter which Watching to delete.
     */
    where: WatchingWhereUniqueInput
  }


  /**
   * Watching deleteMany
   */
  export type WatchingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watchings to delete
     */
    where?: WatchingWhereInput
  }


  /**
   * Watching without action
   */
  export type WatchingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
  }



  /**
   * Model Categorie
   */

  export type AggregateCategorie = {
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  export type CategorieAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorieSumAggregateOutputType = {
    id: number | null
  }

  export type CategorieMinAggregateOutputType = {
    id: number | null
    title: string | null
    color: string | null
  }

  export type CategorieMaxAggregateOutputType = {
    id: number | null
    title: string | null
    color: string | null
  }

  export type CategorieCountAggregateOutputType = {
    id: number
    title: number
    color: number
    _all: number
  }


  export type CategorieAvgAggregateInputType = {
    id?: true
  }

  export type CategorieSumAggregateInputType = {
    id?: true
  }

  export type CategorieMinAggregateInputType = {
    id?: true
    title?: true
    color?: true
  }

  export type CategorieMaxAggregateInputType = {
    id?: true
    title?: true
    color?: true
  }

  export type CategorieCountAggregateInputType = {
    id?: true
    title?: true
    color?: true
    _all?: true
  }

  export type CategorieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorie to aggregate.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategorieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorieMaxAggregateInputType
  }

  export type GetCategorieAggregateType<T extends CategorieAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorie[P]>
      : GetScalarType<T[P], AggregateCategorie[P]>
  }




  export type CategorieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategorieWhereInput
    orderBy?: CategorieOrderByWithAggregationInput | CategorieOrderByWithAggregationInput[]
    by: CategorieScalarFieldEnum[] | CategorieScalarFieldEnum
    having?: CategorieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorieCountAggregateInputType | true
    _avg?: CategorieAvgAggregateInputType
    _sum?: CategorieSumAggregateInputType
    _min?: CategorieMinAggregateInputType
    _max?: CategorieMaxAggregateInputType
  }

  export type CategorieGroupByOutputType = {
    id: number
    title: string
    color: string
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  type GetCategorieGroupByPayload<T extends CategorieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategorieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorieGroupByOutputType[P]>
            : GetScalarType<T[P], CategorieGroupByOutputType[P]>
        }
      >
    >


  export type CategorieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    color?: boolean
    media?: boolean | Categorie$mediaArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorie"]>

  export type CategorieSelectScalar = {
    id?: boolean
    title?: boolean
    color?: boolean
  }

  export type CategorieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | Categorie$mediaArgs<ExtArgs>
    _count?: boolean | CategorieCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorie"
    objects: {
      media: Prisma.$Categorie_MoviePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      color: string
    }, ExtArgs["result"]["categorie"]>
    composites: {}
  }


  type CategorieGetPayload<S extends boolean | null | undefined | CategorieDefaultArgs> = $Result.GetResult<Prisma.$CategoriePayload, S>

  type CategorieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategorieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategorieCountAggregateInputType | true
    }

  export interface CategorieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorie'], meta: { name: 'Categorie' } }
    /**
     * Find zero or one Categorie that matches the filter.
     * @param {CategorieFindUniqueArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategorieFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategorieFindUniqueArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categorie that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategorieFindUniqueOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategorieFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategorieFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categorie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategorieFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategorieFindFirstArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categorie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategorieFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategorieFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categorie.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categorie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categorieWithIdOnly = await prisma.categorie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategorieFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategorieFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categorie.
     * @param {CategorieCreateArgs} args - Arguments to create a Categorie.
     * @example
     * // Create one Categorie
     * const Categorie = await prisma.categorie.create({
     *   data: {
     *     // ... data to create a Categorie
     *   }
     * })
     * 
    **/
    create<T extends CategorieCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategorieCreateArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategorieCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categorie = await prisma.categorie.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategorieCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategorieCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorie.
     * @param {CategorieDeleteArgs} args - Arguments to delete one Categorie.
     * @example
     * // Delete one Categorie
     * const Categorie = await prisma.categorie.delete({
     *   where: {
     *     // ... filter to delete one Categorie
     *   }
     * })
     * 
    **/
    delete<T extends CategorieDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategorieDeleteArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categorie.
     * @param {CategorieUpdateArgs} args - Arguments to update one Categorie.
     * @example
     * // Update one Categorie
     * const categorie = await prisma.categorie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategorieUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategorieUpdateArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategorieDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categorie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategorieDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategorieDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categorie = await prisma.categorie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategorieUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategorieUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorie.
     * @param {CategorieUpsertArgs} args - Arguments to update or create a Categorie.
     * @example
     * // Update or create a Categorie
     * const categorie = await prisma.categorie.upsert({
     *   create: {
     *     // ... data to create a Categorie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorie we want to update
     *   }
     * })
    **/
    upsert<T extends CategorieUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategorieUpsertArgs<ExtArgs>>
    ): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categorie.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategorieCountArgs>(
      args?: Subset<T, CategorieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorieAggregateArgs>(args: Subset<T, CategorieAggregateArgs>): Prisma.PrismaPromise<GetCategorieAggregateType<T>>

    /**
     * Group by Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorieGroupByArgs['orderBy'] }
        : { orderBy?: CategorieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorie model
   */
  readonly fields: CategorieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategorieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends Categorie$mediaArgs<ExtArgs> = {}>(args?: Subset<T, Categorie$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categorie model
   */ 
  interface CategorieFieldRefs {
    readonly id: FieldRef<"Categorie", 'Int'>
    readonly title: FieldRef<"Categorie", 'String'>
    readonly color: FieldRef<"Categorie", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Categorie findUnique
   */
  export type CategorieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }


  /**
   * Categorie findUniqueOrThrow
   */
  export type CategorieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }


  /**
   * Categorie findFirst
   */
  export type CategorieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }


  /**
   * Categorie findFirstOrThrow
   */
  export type CategorieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }


  /**
   * Categorie findMany
   */
  export type CategorieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategorieOrderByWithRelationInput | CategorieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategorieScalarFieldEnum | CategorieScalarFieldEnum[]
  }


  /**
   * Categorie create
   */
  export type CategorieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorie.
     */
    data: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
  }


  /**
   * Categorie createMany
   */
  export type CategorieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategorieCreateManyInput | CategorieCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Categorie update
   */
  export type CategorieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorie.
     */
    data: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
    /**
     * Choose, which Categorie to update.
     */
    where: CategorieWhereUniqueInput
  }


  /**
   * Categorie updateMany
   */
  export type CategorieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategorieUpdateManyMutationInput, CategorieUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategorieWhereInput
  }


  /**
   * Categorie upsert
   */
  export type CategorieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorie to update in case it exists.
     */
    where: CategorieWhereUniqueInput
    /**
     * In case the Categorie found by the `where` argument doesn't exist, create a new Categorie with this data.
     */
    create: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
    /**
     * In case the Categorie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
  }


  /**
   * Categorie delete
   */
  export type CategorieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
    /**
     * Filter which Categorie to delete.
     */
    where: CategorieWhereUniqueInput
  }


  /**
   * Categorie deleteMany
   */
  export type CategorieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategorieWhereInput
  }


  /**
   * Categorie.media
   */
  export type Categorie$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    where?: Categorie_MovieWhereInput
    orderBy?: Categorie_MovieOrderByWithRelationInput | Categorie_MovieOrderByWithRelationInput[]
    cursor?: Categorie_MovieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Categorie_MovieScalarFieldEnum | Categorie_MovieScalarFieldEnum[]
  }


  /**
   * Categorie without action
   */
  export type CategorieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude<ExtArgs> | null
  }



  /**
   * Model Media
   */

  export type AggregateMedia = {
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  export type MediaAvgAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type MediaSumAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type MediaMinAggregateOutputType = {
    id: number | null
    title: string | null
    trailer_url: string | null
    photo_url: string | null
    logo_url: string | null
    description: string | null
    duration: number | null
    director: string | null
  }

  export type MediaMaxAggregateOutputType = {
    id: number | null
    title: string | null
    trailer_url: string | null
    photo_url: string | null
    logo_url: string | null
    description: string | null
    duration: number | null
    director: string | null
  }

  export type MediaCountAggregateOutputType = {
    id: number
    title: number
    trailer_url: number
    photo_url: number
    logo_url: number
    description: number
    duration: number
    director: number
    _all: number
  }


  export type MediaAvgAggregateInputType = {
    id?: true
    duration?: true
  }

  export type MediaSumAggregateInputType = {
    id?: true
    duration?: true
  }

  export type MediaMinAggregateInputType = {
    id?: true
    title?: true
    trailer_url?: true
    photo_url?: true
    logo_url?: true
    description?: true
    duration?: true
    director?: true
  }

  export type MediaMaxAggregateInputType = {
    id?: true
    title?: true
    trailer_url?: true
    photo_url?: true
    logo_url?: true
    description?: true
    duration?: true
    director?: true
  }

  export type MediaCountAggregateInputType = {
    id?: true
    title?: true
    trailer_url?: true
    photo_url?: true
    logo_url?: true
    description?: true
    duration?: true
    director?: true
    _all?: true
  }

  export type MediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to aggregate.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Media
    **/
    _count?: true | MediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaMaxAggregateInputType
  }

  export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedia[P]>
      : GetScalarType<T[P], AggregateMedia[P]>
  }




  export type MediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaWhereInput
    orderBy?: MediaOrderByWithAggregationInput | MediaOrderByWithAggregationInput[]
    by: MediaScalarFieldEnum[] | MediaScalarFieldEnum
    having?: MediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaCountAggregateInputType | true
    _avg?: MediaAvgAggregateInputType
    _sum?: MediaSumAggregateInputType
    _min?: MediaMinAggregateInputType
    _max?: MediaMaxAggregateInputType
  }

  export type MediaGroupByOutputType = {
    id: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  type GetMediaGroupByPayload<T extends MediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaGroupByOutputType[P]>
            : GetScalarType<T[P], MediaGroupByOutputType[P]>
        }
      >
    >


  export type MediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    trailer_url?: boolean
    photo_url?: boolean
    logo_url?: boolean
    description?: boolean
    duration?: boolean
    director?: boolean
    platforms?: boolean | Media$platformsArgs<ExtArgs>
    categories?: boolean | Media$categoriesArgs<ExtArgs>
    actor?: boolean | Media$actorArgs<ExtArgs>
    watchlist?: boolean | Media$watchlistArgs<ExtArgs>
    Rating?: boolean | Media$RatingArgs<ExtArgs>
    season?: boolean | Media$seasonArgs<ExtArgs>
    watching?: boolean | Media$watchingArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["media"]>

  export type MediaSelectScalar = {
    id?: boolean
    title?: boolean
    trailer_url?: boolean
    photo_url?: boolean
    logo_url?: boolean
    description?: boolean
    duration?: boolean
    director?: boolean
  }

  export type MediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platforms?: boolean | Media$platformsArgs<ExtArgs>
    categories?: boolean | Media$categoriesArgs<ExtArgs>
    actor?: boolean | Media$actorArgs<ExtArgs>
    watchlist?: boolean | Media$watchlistArgs<ExtArgs>
    Rating?: boolean | Media$RatingArgs<ExtArgs>
    season?: boolean | Media$seasonArgs<ExtArgs>
    watching?: boolean | Media$watchingArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Media"
    objects: {
      platforms: Prisma.$Media_PlatformPayload<ExtArgs>[]
      categories: Prisma.$Categorie_MoviePayload<ExtArgs>[]
      actor: Prisma.$Actor_MediaPayload<ExtArgs>[]
      watchlist: Prisma.$WatchListPayload<ExtArgs>[]
      Rating: Prisma.$RatingPayload<ExtArgs>[]
      season: Prisma.$SeasonPayload<ExtArgs>[]
      watching: Prisma.$WatchingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      trailer_url: string
      photo_url: string
      logo_url: string
      description: string
      duration: number
      director: string
    }, ExtArgs["result"]["media"]>
    composites: {}
  }


  type MediaGetPayload<S extends boolean | null | undefined | MediaDefaultArgs> = $Result.GetResult<Prisma.$MediaPayload, S>

  type MediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MediaCountAggregateInputType | true
    }

  export interface MediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Media'], meta: { name: 'Media' } }
    /**
     * Find zero or one Media that matches the filter.
     * @param {MediaFindUniqueArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MediaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MediaFindUniqueArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Media that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MediaFindUniqueOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MediaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MediaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindFirstArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Media that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MediaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Media
     * const media = await prisma.media.findMany()
     * 
     * // Get first 10 Media
     * const media = await prisma.media.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MediaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Media.
     * @param {MediaCreateArgs} args - Arguments to create a Media.
     * @example
     * // Create one Media
     * const Media = await prisma.media.create({
     *   data: {
     *     // ... data to create a Media
     *   }
     * })
     * 
    **/
    create<T extends MediaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaCreateArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Media.
     *     @param {MediaCreateManyArgs} args - Arguments to create many Media.
     *     @example
     *     // Create many Media
     *     const media = await prisma.media.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MediaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Media.
     * @param {MediaDeleteArgs} args - Arguments to delete one Media.
     * @example
     * // Delete one Media
     * const Media = await prisma.media.delete({
     *   where: {
     *     // ... filter to delete one Media
     *   }
     * })
     * 
    **/
    delete<T extends MediaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDeleteArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Media.
     * @param {MediaUpdateArgs} args - Arguments to update one Media.
     * @example
     * // Update one Media
     * const media = await prisma.media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MediaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaUpdateArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Media.
     * @param {MediaDeleteManyArgs} args - Arguments to filter Media to delete.
     * @example
     * // Delete a few Media
     * const { count } = await prisma.media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MediaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Media
     * const media = await prisma.media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MediaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MediaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Media.
     * @param {MediaUpsertArgs} args - Arguments to update or create a Media.
     * @example
     * // Update or create a Media
     * const media = await prisma.media.upsert({
     *   create: {
     *     // ... data to create a Media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Media we want to update
     *   }
     * })
    **/
    upsert<T extends MediaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MediaUpsertArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaCountArgs} args - Arguments to filter Media to count.
     * @example
     * // Count the number of Media
     * const count = await prisma.media.count({
     *   where: {
     *     // ... the filter for the Media we want to count
     *   }
     * })
    **/
    count<T extends MediaCountArgs>(
      args?: Subset<T, MediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaAggregateArgs>(args: Subset<T, MediaAggregateArgs>): Prisma.PrismaPromise<GetMediaAggregateType<T>>

    /**
     * Group by Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaGroupByArgs['orderBy'] }
        : { orderBy?: MediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Media model
   */
  readonly fields: MediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    platforms<T extends Media$platformsArgs<ExtArgs> = {}>(args?: Subset<T, Media$platformsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Media_PlatformPayload<ExtArgs>, T, 'findMany'> | Null>;

    categories<T extends Media$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Media$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'findMany'> | Null>;

    actor<T extends Media$actorArgs<ExtArgs> = {}>(args?: Subset<T, Media$actorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'findMany'> | Null>;

    watchlist<T extends Media$watchlistArgs<ExtArgs> = {}>(args?: Subset<T, Media$watchlistArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'findMany'> | Null>;

    Rating<T extends Media$RatingArgs<ExtArgs> = {}>(args?: Subset<T, Media$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    season<T extends Media$seasonArgs<ExtArgs> = {}>(args?: Subset<T, Media$seasonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findMany'> | Null>;

    watching<T extends Media$watchingArgs<ExtArgs> = {}>(args?: Subset<T, Media$watchingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Media model
   */ 
  interface MediaFieldRefs {
    readonly id: FieldRef<"Media", 'Int'>
    readonly title: FieldRef<"Media", 'String'>
    readonly trailer_url: FieldRef<"Media", 'String'>
    readonly photo_url: FieldRef<"Media", 'String'>
    readonly logo_url: FieldRef<"Media", 'String'>
    readonly description: FieldRef<"Media", 'String'>
    readonly duration: FieldRef<"Media", 'Int'>
    readonly director: FieldRef<"Media", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Media findUnique
   */
  export type MediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media findUniqueOrThrow
   */
  export type MediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media findFirst
   */
  export type MediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }


  /**
   * Media findFirstOrThrow
   */
  export type MediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }


  /**
   * Media findMany
   */
  export type MediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }


  /**
   * Media create
   */
  export type MediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The data needed to create a Media.
     */
    data: XOR<MediaCreateInput, MediaUncheckedCreateInput>
  }


  /**
   * Media createMany
   */
  export type MediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Media.
     */
    data: MediaCreateManyInput | MediaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Media update
   */
  export type MediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The data needed to update a Media.
     */
    data: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
    /**
     * Choose, which Media to update.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media updateMany
   */
  export type MediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Media.
     */
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyInput>
    /**
     * Filter which Media to update
     */
    where?: MediaWhereInput
  }


  /**
   * Media upsert
   */
  export type MediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The filter to search for the Media to update in case it exists.
     */
    where: MediaWhereUniqueInput
    /**
     * In case the Media found by the `where` argument doesn't exist, create a new Media with this data.
     */
    create: XOR<MediaCreateInput, MediaUncheckedCreateInput>
    /**
     * In case the Media was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
  }


  /**
   * Media delete
   */
  export type MediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter which Media to delete.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media deleteMany
   */
  export type MediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to delete
     */
    where?: MediaWhereInput
  }


  /**
   * Media.platforms
   */
  export type Media$platformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media_Platform
     */
    select?: Media_PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Media_PlatformInclude<ExtArgs> | null
    where?: Media_PlatformWhereInput
    orderBy?: Media_PlatformOrderByWithRelationInput | Media_PlatformOrderByWithRelationInput[]
    cursor?: Media_PlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Media_PlatformScalarFieldEnum | Media_PlatformScalarFieldEnum[]
  }


  /**
   * Media.categories
   */
  export type Media$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    where?: Categorie_MovieWhereInput
    orderBy?: Categorie_MovieOrderByWithRelationInput | Categorie_MovieOrderByWithRelationInput[]
    cursor?: Categorie_MovieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Categorie_MovieScalarFieldEnum | Categorie_MovieScalarFieldEnum[]
  }


  /**
   * Media.actor
   */
  export type Media$actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    where?: Actor_MediaWhereInput
    orderBy?: Actor_MediaOrderByWithRelationInput | Actor_MediaOrderByWithRelationInput[]
    cursor?: Actor_MediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Actor_MediaScalarFieldEnum | Actor_MediaScalarFieldEnum[]
  }


  /**
   * Media.watchlist
   */
  export type Media$watchlistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    where?: WatchListWhereInput
    orderBy?: WatchListOrderByWithRelationInput | WatchListOrderByWithRelationInput[]
    cursor?: WatchListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchListScalarFieldEnum | WatchListScalarFieldEnum[]
  }


  /**
   * Media.Rating
   */
  export type Media$RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Media.season
   */
  export type Media$seasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    where?: SeasonWhereInput
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    cursor?: SeasonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }


  /**
   * Media.watching
   */
  export type Media$watchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watching
     */
    select?: WatchingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchingInclude<ExtArgs> | null
    where?: WatchingWhereInput
    orderBy?: WatchingOrderByWithRelationInput | WatchingOrderByWithRelationInput[]
    cursor?: WatchingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchingScalarFieldEnum | WatchingScalarFieldEnum[]
  }


  /**
   * Media without action
   */
  export type MediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
  }



  /**
   * Model Actor_Media
   */

  export type AggregateActor_Media = {
    _count: Actor_MediaCountAggregateOutputType | null
    _avg: Actor_MediaAvgAggregateOutputType | null
    _sum: Actor_MediaSumAggregateOutputType | null
    _min: Actor_MediaMinAggregateOutputType | null
    _max: Actor_MediaMaxAggregateOutputType | null
  }

  export type Actor_MediaAvgAggregateOutputType = {
    id: number | null
    actorId: number | null
    mediaId: number | null
  }

  export type Actor_MediaSumAggregateOutputType = {
    id: number | null
    actorId: number | null
    mediaId: number | null
  }

  export type Actor_MediaMinAggregateOutputType = {
    id: number | null
    actorId: number | null
    mediaId: number | null
  }

  export type Actor_MediaMaxAggregateOutputType = {
    id: number | null
    actorId: number | null
    mediaId: number | null
  }

  export type Actor_MediaCountAggregateOutputType = {
    id: number
    actorId: number
    mediaId: number
    _all: number
  }


  export type Actor_MediaAvgAggregateInputType = {
    id?: true
    actorId?: true
    mediaId?: true
  }

  export type Actor_MediaSumAggregateInputType = {
    id?: true
    actorId?: true
    mediaId?: true
  }

  export type Actor_MediaMinAggregateInputType = {
    id?: true
    actorId?: true
    mediaId?: true
  }

  export type Actor_MediaMaxAggregateInputType = {
    id?: true
    actorId?: true
    mediaId?: true
  }

  export type Actor_MediaCountAggregateInputType = {
    id?: true
    actorId?: true
    mediaId?: true
    _all?: true
  }

  export type Actor_MediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Actor_Media to aggregate.
     */
    where?: Actor_MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actor_Medias to fetch.
     */
    orderBy?: Actor_MediaOrderByWithRelationInput | Actor_MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Actor_MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actor_Medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actor_Medias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Actor_Medias
    **/
    _count?: true | Actor_MediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Actor_MediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Actor_MediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Actor_MediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Actor_MediaMaxAggregateInputType
  }

  export type GetActor_MediaAggregateType<T extends Actor_MediaAggregateArgs> = {
        [P in keyof T & keyof AggregateActor_Media]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActor_Media[P]>
      : GetScalarType<T[P], AggregateActor_Media[P]>
  }




  export type Actor_MediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Actor_MediaWhereInput
    orderBy?: Actor_MediaOrderByWithAggregationInput | Actor_MediaOrderByWithAggregationInput[]
    by: Actor_MediaScalarFieldEnum[] | Actor_MediaScalarFieldEnum
    having?: Actor_MediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Actor_MediaCountAggregateInputType | true
    _avg?: Actor_MediaAvgAggregateInputType
    _sum?: Actor_MediaSumAggregateInputType
    _min?: Actor_MediaMinAggregateInputType
    _max?: Actor_MediaMaxAggregateInputType
  }

  export type Actor_MediaGroupByOutputType = {
    id: number
    actorId: number
    mediaId: number
    _count: Actor_MediaCountAggregateOutputType | null
    _avg: Actor_MediaAvgAggregateOutputType | null
    _sum: Actor_MediaSumAggregateOutputType | null
    _min: Actor_MediaMinAggregateOutputType | null
    _max: Actor_MediaMaxAggregateOutputType | null
  }

  type GetActor_MediaGroupByPayload<T extends Actor_MediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Actor_MediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Actor_MediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Actor_MediaGroupByOutputType[P]>
            : GetScalarType<T[P], Actor_MediaGroupByOutputType[P]>
        }
      >
    >


  export type Actor_MediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorId?: boolean
    mediaId?: boolean
    actor?: boolean | ActorDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actor_Media"]>

  export type Actor_MediaSelectScalar = {
    id?: boolean
    actorId?: boolean
    mediaId?: boolean
  }

  export type Actor_MediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | ActorDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $Actor_MediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Actor_Media"
    objects: {
      actor: Prisma.$ActorPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      actorId: number
      mediaId: number
    }, ExtArgs["result"]["actor_Media"]>
    composites: {}
  }


  type Actor_MediaGetPayload<S extends boolean | null | undefined | Actor_MediaDefaultArgs> = $Result.GetResult<Prisma.$Actor_MediaPayload, S>

  type Actor_MediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Actor_MediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Actor_MediaCountAggregateInputType | true
    }

  export interface Actor_MediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Actor_Media'], meta: { name: 'Actor_Media' } }
    /**
     * Find zero or one Actor_Media that matches the filter.
     * @param {Actor_MediaFindUniqueArgs} args - Arguments to find a Actor_Media
     * @example
     * // Get one Actor_Media
     * const actor_Media = await prisma.actor_Media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Actor_MediaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Actor_MediaFindUniqueArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Actor_Media that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Actor_MediaFindUniqueOrThrowArgs} args - Arguments to find a Actor_Media
     * @example
     * // Get one Actor_Media
     * const actor_Media = await prisma.actor_Media.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Actor_MediaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Actor_MediaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Actor_Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Actor_MediaFindFirstArgs} args - Arguments to find a Actor_Media
     * @example
     * // Get one Actor_Media
     * const actor_Media = await prisma.actor_Media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Actor_MediaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Actor_MediaFindFirstArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Actor_Media that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Actor_MediaFindFirstOrThrowArgs} args - Arguments to find a Actor_Media
     * @example
     * // Get one Actor_Media
     * const actor_Media = await prisma.actor_Media.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Actor_MediaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Actor_MediaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Actor_Medias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Actor_MediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actor_Medias
     * const actor_Medias = await prisma.actor_Media.findMany()
     * 
     * // Get first 10 Actor_Medias
     * const actor_Medias = await prisma.actor_Media.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actor_MediaWithIdOnly = await prisma.actor_Media.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Actor_MediaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Actor_MediaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Actor_Media.
     * @param {Actor_MediaCreateArgs} args - Arguments to create a Actor_Media.
     * @example
     * // Create one Actor_Media
     * const Actor_Media = await prisma.actor_Media.create({
     *   data: {
     *     // ... data to create a Actor_Media
     *   }
     * })
     * 
    **/
    create<T extends Actor_MediaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Actor_MediaCreateArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Actor_Medias.
     *     @param {Actor_MediaCreateManyArgs} args - Arguments to create many Actor_Medias.
     *     @example
     *     // Create many Actor_Medias
     *     const actor_Media = await prisma.actor_Media.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Actor_MediaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Actor_MediaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Actor_Media.
     * @param {Actor_MediaDeleteArgs} args - Arguments to delete one Actor_Media.
     * @example
     * // Delete one Actor_Media
     * const Actor_Media = await prisma.actor_Media.delete({
     *   where: {
     *     // ... filter to delete one Actor_Media
     *   }
     * })
     * 
    **/
    delete<T extends Actor_MediaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Actor_MediaDeleteArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Actor_Media.
     * @param {Actor_MediaUpdateArgs} args - Arguments to update one Actor_Media.
     * @example
     * // Update one Actor_Media
     * const actor_Media = await prisma.actor_Media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Actor_MediaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Actor_MediaUpdateArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Actor_Medias.
     * @param {Actor_MediaDeleteManyArgs} args - Arguments to filter Actor_Medias to delete.
     * @example
     * // Delete a few Actor_Medias
     * const { count } = await prisma.actor_Media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Actor_MediaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Actor_MediaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actor_Medias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Actor_MediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actor_Medias
     * const actor_Media = await prisma.actor_Media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Actor_MediaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Actor_MediaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Actor_Media.
     * @param {Actor_MediaUpsertArgs} args - Arguments to update or create a Actor_Media.
     * @example
     * // Update or create a Actor_Media
     * const actor_Media = await prisma.actor_Media.upsert({
     *   create: {
     *     // ... data to create a Actor_Media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Actor_Media we want to update
     *   }
     * })
    **/
    upsert<T extends Actor_MediaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Actor_MediaUpsertArgs<ExtArgs>>
    ): Prisma__Actor_MediaClient<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Actor_Medias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Actor_MediaCountArgs} args - Arguments to filter Actor_Medias to count.
     * @example
     * // Count the number of Actor_Medias
     * const count = await prisma.actor_Media.count({
     *   where: {
     *     // ... the filter for the Actor_Medias we want to count
     *   }
     * })
    **/
    count<T extends Actor_MediaCountArgs>(
      args?: Subset<T, Actor_MediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Actor_MediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Actor_Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Actor_MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Actor_MediaAggregateArgs>(args: Subset<T, Actor_MediaAggregateArgs>): Prisma.PrismaPromise<GetActor_MediaAggregateType<T>>

    /**
     * Group by Actor_Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Actor_MediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Actor_MediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Actor_MediaGroupByArgs['orderBy'] }
        : { orderBy?: Actor_MediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Actor_MediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActor_MediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Actor_Media model
   */
  readonly fields: Actor_MediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Actor_Media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Actor_MediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    actor<T extends ActorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActorDefaultArgs<ExtArgs>>): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Actor_Media model
   */ 
  interface Actor_MediaFieldRefs {
    readonly id: FieldRef<"Actor_Media", 'Int'>
    readonly actorId: FieldRef<"Actor_Media", 'Int'>
    readonly mediaId: FieldRef<"Actor_Media", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Actor_Media findUnique
   */
  export type Actor_MediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * Filter, which Actor_Media to fetch.
     */
    where: Actor_MediaWhereUniqueInput
  }


  /**
   * Actor_Media findUniqueOrThrow
   */
  export type Actor_MediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * Filter, which Actor_Media to fetch.
     */
    where: Actor_MediaWhereUniqueInput
  }


  /**
   * Actor_Media findFirst
   */
  export type Actor_MediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * Filter, which Actor_Media to fetch.
     */
    where?: Actor_MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actor_Medias to fetch.
     */
    orderBy?: Actor_MediaOrderByWithRelationInput | Actor_MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actor_Medias.
     */
    cursor?: Actor_MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actor_Medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actor_Medias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actor_Medias.
     */
    distinct?: Actor_MediaScalarFieldEnum | Actor_MediaScalarFieldEnum[]
  }


  /**
   * Actor_Media findFirstOrThrow
   */
  export type Actor_MediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * Filter, which Actor_Media to fetch.
     */
    where?: Actor_MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actor_Medias to fetch.
     */
    orderBy?: Actor_MediaOrderByWithRelationInput | Actor_MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actor_Medias.
     */
    cursor?: Actor_MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actor_Medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actor_Medias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actor_Medias.
     */
    distinct?: Actor_MediaScalarFieldEnum | Actor_MediaScalarFieldEnum[]
  }


  /**
   * Actor_Media findMany
   */
  export type Actor_MediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * Filter, which Actor_Medias to fetch.
     */
    where?: Actor_MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actor_Medias to fetch.
     */
    orderBy?: Actor_MediaOrderByWithRelationInput | Actor_MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Actor_Medias.
     */
    cursor?: Actor_MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actor_Medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actor_Medias.
     */
    skip?: number
    distinct?: Actor_MediaScalarFieldEnum | Actor_MediaScalarFieldEnum[]
  }


  /**
   * Actor_Media create
   */
  export type Actor_MediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * The data needed to create a Actor_Media.
     */
    data: XOR<Actor_MediaCreateInput, Actor_MediaUncheckedCreateInput>
  }


  /**
   * Actor_Media createMany
   */
  export type Actor_MediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Actor_Medias.
     */
    data: Actor_MediaCreateManyInput | Actor_MediaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Actor_Media update
   */
  export type Actor_MediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * The data needed to update a Actor_Media.
     */
    data: XOR<Actor_MediaUpdateInput, Actor_MediaUncheckedUpdateInput>
    /**
     * Choose, which Actor_Media to update.
     */
    where: Actor_MediaWhereUniqueInput
  }


  /**
   * Actor_Media updateMany
   */
  export type Actor_MediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Actor_Medias.
     */
    data: XOR<Actor_MediaUpdateManyMutationInput, Actor_MediaUncheckedUpdateManyInput>
    /**
     * Filter which Actor_Medias to update
     */
    where?: Actor_MediaWhereInput
  }


  /**
   * Actor_Media upsert
   */
  export type Actor_MediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * The filter to search for the Actor_Media to update in case it exists.
     */
    where: Actor_MediaWhereUniqueInput
    /**
     * In case the Actor_Media found by the `where` argument doesn't exist, create a new Actor_Media with this data.
     */
    create: XOR<Actor_MediaCreateInput, Actor_MediaUncheckedCreateInput>
    /**
     * In case the Actor_Media was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Actor_MediaUpdateInput, Actor_MediaUncheckedUpdateInput>
  }


  /**
   * Actor_Media delete
   */
  export type Actor_MediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    /**
     * Filter which Actor_Media to delete.
     */
    where: Actor_MediaWhereUniqueInput
  }


  /**
   * Actor_Media deleteMany
   */
  export type Actor_MediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Actor_Medias to delete
     */
    where?: Actor_MediaWhereInput
  }


  /**
   * Actor_Media without action
   */
  export type Actor_MediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
  }



  /**
   * Model Actor
   */

  export type AggregateActor = {
    _count: ActorCountAggregateOutputType | null
    _avg: ActorAvgAggregateOutputType | null
    _sum: ActorSumAggregateOutputType | null
    _min: ActorMinAggregateOutputType | null
    _max: ActorMaxAggregateOutputType | null
  }

  export type ActorAvgAggregateOutputType = {
    id: number | null
  }

  export type ActorSumAggregateOutputType = {
    id: number | null
  }

  export type ActorMinAggregateOutputType = {
    id: number | null
    name: string | null
    picture_url: string | null
  }

  export type ActorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    picture_url: string | null
  }

  export type ActorCountAggregateOutputType = {
    id: number
    name: number
    picture_url: number
    _all: number
  }


  export type ActorAvgAggregateInputType = {
    id?: true
  }

  export type ActorSumAggregateInputType = {
    id?: true
  }

  export type ActorMinAggregateInputType = {
    id?: true
    name?: true
    picture_url?: true
  }

  export type ActorMaxAggregateInputType = {
    id?: true
    name?: true
    picture_url?: true
  }

  export type ActorCountAggregateInputType = {
    id?: true
    name?: true
    picture_url?: true
    _all?: true
  }

  export type ActorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Actor to aggregate.
     */
    where?: ActorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actors to fetch.
     */
    orderBy?: ActorOrderByWithRelationInput | ActorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Actors
    **/
    _count?: true | ActorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActorMaxAggregateInputType
  }

  export type GetActorAggregateType<T extends ActorAggregateArgs> = {
        [P in keyof T & keyof AggregateActor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActor[P]>
      : GetScalarType<T[P], AggregateActor[P]>
  }




  export type ActorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActorWhereInput
    orderBy?: ActorOrderByWithAggregationInput | ActorOrderByWithAggregationInput[]
    by: ActorScalarFieldEnum[] | ActorScalarFieldEnum
    having?: ActorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActorCountAggregateInputType | true
    _avg?: ActorAvgAggregateInputType
    _sum?: ActorSumAggregateInputType
    _min?: ActorMinAggregateInputType
    _max?: ActorMaxAggregateInputType
  }

  export type ActorGroupByOutputType = {
    id: number
    name: string
    picture_url: string | null
    _count: ActorCountAggregateOutputType | null
    _avg: ActorAvgAggregateOutputType | null
    _sum: ActorSumAggregateOutputType | null
    _min: ActorMinAggregateOutputType | null
    _max: ActorMaxAggregateOutputType | null
  }

  type GetActorGroupByPayload<T extends ActorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActorGroupByOutputType[P]>
            : GetScalarType<T[P], ActorGroupByOutputType[P]>
        }
      >
    >


  export type ActorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    picture_url?: boolean
    media?: boolean | Actor$mediaArgs<ExtArgs>
    _count?: boolean | ActorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actor"]>

  export type ActorSelectScalar = {
    id?: boolean
    name?: boolean
    picture_url?: boolean
  }

  export type ActorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | Actor$mediaArgs<ExtArgs>
    _count?: boolean | ActorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ActorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Actor"
    objects: {
      media: Prisma.$Actor_MediaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      picture_url: string | null
    }, ExtArgs["result"]["actor"]>
    composites: {}
  }


  type ActorGetPayload<S extends boolean | null | undefined | ActorDefaultArgs> = $Result.GetResult<Prisma.$ActorPayload, S>

  type ActorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActorCountAggregateInputType | true
    }

  export interface ActorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Actor'], meta: { name: 'Actor' } }
    /**
     * Find zero or one Actor that matches the filter.
     * @param {ActorFindUniqueArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActorFindUniqueArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Actor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActorFindUniqueOrThrowArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Actor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorFindFirstArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActorFindFirstArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Actor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorFindFirstOrThrowArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Actors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actors
     * const actors = await prisma.actor.findMany()
     * 
     * // Get first 10 Actors
     * const actors = await prisma.actor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actorWithIdOnly = await prisma.actor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Actor.
     * @param {ActorCreateArgs} args - Arguments to create a Actor.
     * @example
     * // Create one Actor
     * const Actor = await prisma.actor.create({
     *   data: {
     *     // ... data to create a Actor
     *   }
     * })
     * 
    **/
    create<T extends ActorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActorCreateArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Actors.
     *     @param {ActorCreateManyArgs} args - Arguments to create many Actors.
     *     @example
     *     // Create many Actors
     *     const actor = await prisma.actor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Actor.
     * @param {ActorDeleteArgs} args - Arguments to delete one Actor.
     * @example
     * // Delete one Actor
     * const Actor = await prisma.actor.delete({
     *   where: {
     *     // ... filter to delete one Actor
     *   }
     * })
     * 
    **/
    delete<T extends ActorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActorDeleteArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Actor.
     * @param {ActorUpdateArgs} args - Arguments to update one Actor.
     * @example
     * // Update one Actor
     * const actor = await prisma.actor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActorUpdateArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Actors.
     * @param {ActorDeleteManyArgs} args - Arguments to filter Actors to delete.
     * @example
     * // Delete a few Actors
     * const { count } = await prisma.actor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actors
     * const actor = await prisma.actor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Actor.
     * @param {ActorUpsertArgs} args - Arguments to update or create a Actor.
     * @example
     * // Update or create a Actor
     * const actor = await prisma.actor.upsert({
     *   create: {
     *     // ... data to create a Actor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Actor we want to update
     *   }
     * })
    **/
    upsert<T extends ActorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActorUpsertArgs<ExtArgs>>
    ): Prisma__ActorClient<$Result.GetResult<Prisma.$ActorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Actors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorCountArgs} args - Arguments to filter Actors to count.
     * @example
     * // Count the number of Actors
     * const count = await prisma.actor.count({
     *   where: {
     *     // ... the filter for the Actors we want to count
     *   }
     * })
    **/
    count<T extends ActorCountArgs>(
      args?: Subset<T, ActorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Actor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActorAggregateArgs>(args: Subset<T, ActorAggregateArgs>): Prisma.PrismaPromise<GetActorAggregateType<T>>

    /**
     * Group by Actor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActorGroupByArgs['orderBy'] }
        : { orderBy?: ActorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Actor model
   */
  readonly fields: ActorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Actor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends Actor$mediaArgs<ExtArgs> = {}>(args?: Subset<T, Actor$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Actor_MediaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Actor model
   */ 
  interface ActorFieldRefs {
    readonly id: FieldRef<"Actor", 'Int'>
    readonly name: FieldRef<"Actor", 'String'>
    readonly picture_url: FieldRef<"Actor", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Actor findUnique
   */
  export type ActorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * Filter, which Actor to fetch.
     */
    where: ActorWhereUniqueInput
  }


  /**
   * Actor findUniqueOrThrow
   */
  export type ActorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * Filter, which Actor to fetch.
     */
    where: ActorWhereUniqueInput
  }


  /**
   * Actor findFirst
   */
  export type ActorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * Filter, which Actor to fetch.
     */
    where?: ActorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actors to fetch.
     */
    orderBy?: ActorOrderByWithRelationInput | ActorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actors.
     */
    cursor?: ActorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actors.
     */
    distinct?: ActorScalarFieldEnum | ActorScalarFieldEnum[]
  }


  /**
   * Actor findFirstOrThrow
   */
  export type ActorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * Filter, which Actor to fetch.
     */
    where?: ActorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actors to fetch.
     */
    orderBy?: ActorOrderByWithRelationInput | ActorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Actors.
     */
    cursor?: ActorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Actors.
     */
    distinct?: ActorScalarFieldEnum | ActorScalarFieldEnum[]
  }


  /**
   * Actor findMany
   */
  export type ActorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * Filter, which Actors to fetch.
     */
    where?: ActorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Actors to fetch.
     */
    orderBy?: ActorOrderByWithRelationInput | ActorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Actors.
     */
    cursor?: ActorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Actors.
     */
    skip?: number
    distinct?: ActorScalarFieldEnum | ActorScalarFieldEnum[]
  }


  /**
   * Actor create
   */
  export type ActorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * The data needed to create a Actor.
     */
    data: XOR<ActorCreateInput, ActorUncheckedCreateInput>
  }


  /**
   * Actor createMany
   */
  export type ActorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Actors.
     */
    data: ActorCreateManyInput | ActorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Actor update
   */
  export type ActorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * The data needed to update a Actor.
     */
    data: XOR<ActorUpdateInput, ActorUncheckedUpdateInput>
    /**
     * Choose, which Actor to update.
     */
    where: ActorWhereUniqueInput
  }


  /**
   * Actor updateMany
   */
  export type ActorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Actors.
     */
    data: XOR<ActorUpdateManyMutationInput, ActorUncheckedUpdateManyInput>
    /**
     * Filter which Actors to update
     */
    where?: ActorWhereInput
  }


  /**
   * Actor upsert
   */
  export type ActorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * The filter to search for the Actor to update in case it exists.
     */
    where: ActorWhereUniqueInput
    /**
     * In case the Actor found by the `where` argument doesn't exist, create a new Actor with this data.
     */
    create: XOR<ActorCreateInput, ActorUncheckedCreateInput>
    /**
     * In case the Actor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActorUpdateInput, ActorUncheckedUpdateInput>
  }


  /**
   * Actor delete
   */
  export type ActorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
    /**
     * Filter which Actor to delete.
     */
    where: ActorWhereUniqueInput
  }


  /**
   * Actor deleteMany
   */
  export type ActorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Actors to delete
     */
    where?: ActorWhereInput
  }


  /**
   * Actor.media
   */
  export type Actor$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor_Media
     */
    select?: Actor_MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Actor_MediaInclude<ExtArgs> | null
    where?: Actor_MediaWhereInput
    orderBy?: Actor_MediaOrderByWithRelationInput | Actor_MediaOrderByWithRelationInput[]
    cursor?: Actor_MediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Actor_MediaScalarFieldEnum | Actor_MediaScalarFieldEnum[]
  }


  /**
   * Actor without action
   */
  export type ActorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Actor
     */
    select?: ActorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActorInclude<ExtArgs> | null
  }



  /**
   * Model WatchList
   */

  export type AggregateWatchList = {
    _count: WatchListCountAggregateOutputType | null
    _avg: WatchListAvgAggregateOutputType | null
    _sum: WatchListSumAggregateOutputType | null
    _min: WatchListMinAggregateOutputType | null
    _max: WatchListMaxAggregateOutputType | null
  }

  export type WatchListAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchListSumAggregateOutputType = {
    id: number | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchListMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchListMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    userId: number | null
    mediaId: number | null
  }

  export type WatchListCountAggregateOutputType = {
    id: number
    created_at: number
    userId: number
    mediaId: number
    _all: number
  }


  export type WatchListAvgAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
  }

  export type WatchListSumAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
  }

  export type WatchListMinAggregateInputType = {
    id?: true
    created_at?: true
    userId?: true
    mediaId?: true
  }

  export type WatchListMaxAggregateInputType = {
    id?: true
    created_at?: true
    userId?: true
    mediaId?: true
  }

  export type WatchListCountAggregateInputType = {
    id?: true
    created_at?: true
    userId?: true
    mediaId?: true
    _all?: true
  }

  export type WatchListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchList to aggregate.
     */
    where?: WatchListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchLists to fetch.
     */
    orderBy?: WatchListOrderByWithRelationInput | WatchListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WatchLists
    **/
    _count?: true | WatchListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WatchListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WatchListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchListMaxAggregateInputType
  }

  export type GetWatchListAggregateType<T extends WatchListAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchList[P]>
      : GetScalarType<T[P], AggregateWatchList[P]>
  }




  export type WatchListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchListWhereInput
    orderBy?: WatchListOrderByWithAggregationInput | WatchListOrderByWithAggregationInput[]
    by: WatchListScalarFieldEnum[] | WatchListScalarFieldEnum
    having?: WatchListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchListCountAggregateInputType | true
    _avg?: WatchListAvgAggregateInputType
    _sum?: WatchListSumAggregateInputType
    _min?: WatchListMinAggregateInputType
    _max?: WatchListMaxAggregateInputType
  }

  export type WatchListGroupByOutputType = {
    id: number
    created_at: Date
    userId: number
    mediaId: number
    _count: WatchListCountAggregateOutputType | null
    _avg: WatchListAvgAggregateOutputType | null
    _sum: WatchListSumAggregateOutputType | null
    _min: WatchListMinAggregateOutputType | null
    _max: WatchListMaxAggregateOutputType | null
  }

  type GetWatchListGroupByPayload<T extends WatchListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchListGroupByOutputType[P]>
            : GetScalarType<T[P], WatchListGroupByOutputType[P]>
        }
      >
    >


  export type WatchListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    userId?: boolean
    mediaId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchList"]>

  export type WatchListSelectScalar = {
    id?: boolean
    created_at?: boolean
    userId?: boolean
    mediaId?: boolean
  }

  export type WatchListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $WatchListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WatchList"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      userId: number
      mediaId: number
    }, ExtArgs["result"]["watchList"]>
    composites: {}
  }


  type WatchListGetPayload<S extends boolean | null | undefined | WatchListDefaultArgs> = $Result.GetResult<Prisma.$WatchListPayload, S>

  type WatchListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WatchListFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WatchListCountAggregateInputType | true
    }

  export interface WatchListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WatchList'], meta: { name: 'WatchList' } }
    /**
     * Find zero or one WatchList that matches the filter.
     * @param {WatchListFindUniqueArgs} args - Arguments to find a WatchList
     * @example
     * // Get one WatchList
     * const watchList = await prisma.watchList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WatchListFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WatchListFindUniqueArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WatchList that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WatchListFindUniqueOrThrowArgs} args - Arguments to find a WatchList
     * @example
     * // Get one WatchList
     * const watchList = await prisma.watchList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WatchListFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchListFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WatchList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchListFindFirstArgs} args - Arguments to find a WatchList
     * @example
     * // Get one WatchList
     * const watchList = await prisma.watchList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WatchListFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchListFindFirstArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WatchList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchListFindFirstOrThrowArgs} args - Arguments to find a WatchList
     * @example
     * // Get one WatchList
     * const watchList = await prisma.watchList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WatchListFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchListFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WatchLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WatchLists
     * const watchLists = await prisma.watchList.findMany()
     * 
     * // Get first 10 WatchLists
     * const watchLists = await prisma.watchList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchListWithIdOnly = await prisma.watchList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WatchListFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchListFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WatchList.
     * @param {WatchListCreateArgs} args - Arguments to create a WatchList.
     * @example
     * // Create one WatchList
     * const WatchList = await prisma.watchList.create({
     *   data: {
     *     // ... data to create a WatchList
     *   }
     * })
     * 
    **/
    create<T extends WatchListCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WatchListCreateArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WatchLists.
     *     @param {WatchListCreateManyArgs} args - Arguments to create many WatchLists.
     *     @example
     *     // Create many WatchLists
     *     const watchList = await prisma.watchList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WatchListCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchListCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WatchList.
     * @param {WatchListDeleteArgs} args - Arguments to delete one WatchList.
     * @example
     * // Delete one WatchList
     * const WatchList = await prisma.watchList.delete({
     *   where: {
     *     // ... filter to delete one WatchList
     *   }
     * })
     * 
    **/
    delete<T extends WatchListDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WatchListDeleteArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WatchList.
     * @param {WatchListUpdateArgs} args - Arguments to update one WatchList.
     * @example
     * // Update one WatchList
     * const watchList = await prisma.watchList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WatchListUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WatchListUpdateArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WatchLists.
     * @param {WatchListDeleteManyArgs} args - Arguments to filter WatchLists to delete.
     * @example
     * // Delete a few WatchLists
     * const { count } = await prisma.watchList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WatchListDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WatchListDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WatchLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WatchLists
     * const watchList = await prisma.watchList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WatchListUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WatchListUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WatchList.
     * @param {WatchListUpsertArgs} args - Arguments to update or create a WatchList.
     * @example
     * // Update or create a WatchList
     * const watchList = await prisma.watchList.upsert({
     *   create: {
     *     // ... data to create a WatchList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WatchList we want to update
     *   }
     * })
    **/
    upsert<T extends WatchListUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WatchListUpsertArgs<ExtArgs>>
    ): Prisma__WatchListClient<$Result.GetResult<Prisma.$WatchListPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WatchLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchListCountArgs} args - Arguments to filter WatchLists to count.
     * @example
     * // Count the number of WatchLists
     * const count = await prisma.watchList.count({
     *   where: {
     *     // ... the filter for the WatchLists we want to count
     *   }
     * })
    **/
    count<T extends WatchListCountArgs>(
      args?: Subset<T, WatchListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WatchList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchListAggregateArgs>(args: Subset<T, WatchListAggregateArgs>): Prisma.PrismaPromise<GetWatchListAggregateType<T>>

    /**
     * Group by WatchList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchListGroupByArgs['orderBy'] }
        : { orderBy?: WatchListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WatchList model
   */
  readonly fields: WatchListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WatchList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WatchList model
   */ 
  interface WatchListFieldRefs {
    readonly id: FieldRef<"WatchList", 'Int'>
    readonly created_at: FieldRef<"WatchList", 'DateTime'>
    readonly userId: FieldRef<"WatchList", 'Int'>
    readonly mediaId: FieldRef<"WatchList", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * WatchList findUnique
   */
  export type WatchListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * Filter, which WatchList to fetch.
     */
    where: WatchListWhereUniqueInput
  }


  /**
   * WatchList findUniqueOrThrow
   */
  export type WatchListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * Filter, which WatchList to fetch.
     */
    where: WatchListWhereUniqueInput
  }


  /**
   * WatchList findFirst
   */
  export type WatchListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * Filter, which WatchList to fetch.
     */
    where?: WatchListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchLists to fetch.
     */
    orderBy?: WatchListOrderByWithRelationInput | WatchListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchLists.
     */
    cursor?: WatchListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchLists.
     */
    distinct?: WatchListScalarFieldEnum | WatchListScalarFieldEnum[]
  }


  /**
   * WatchList findFirstOrThrow
   */
  export type WatchListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * Filter, which WatchList to fetch.
     */
    where?: WatchListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchLists to fetch.
     */
    orderBy?: WatchListOrderByWithRelationInput | WatchListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchLists.
     */
    cursor?: WatchListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchLists.
     */
    distinct?: WatchListScalarFieldEnum | WatchListScalarFieldEnum[]
  }


  /**
   * WatchList findMany
   */
  export type WatchListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * Filter, which WatchLists to fetch.
     */
    where?: WatchListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchLists to fetch.
     */
    orderBy?: WatchListOrderByWithRelationInput | WatchListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WatchLists.
     */
    cursor?: WatchListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchLists.
     */
    skip?: number
    distinct?: WatchListScalarFieldEnum | WatchListScalarFieldEnum[]
  }


  /**
   * WatchList create
   */
  export type WatchListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * The data needed to create a WatchList.
     */
    data: XOR<WatchListCreateInput, WatchListUncheckedCreateInput>
  }


  /**
   * WatchList createMany
   */
  export type WatchListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WatchLists.
     */
    data: WatchListCreateManyInput | WatchListCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * WatchList update
   */
  export type WatchListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * The data needed to update a WatchList.
     */
    data: XOR<WatchListUpdateInput, WatchListUncheckedUpdateInput>
    /**
     * Choose, which WatchList to update.
     */
    where: WatchListWhereUniqueInput
  }


  /**
   * WatchList updateMany
   */
  export type WatchListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WatchLists.
     */
    data: XOR<WatchListUpdateManyMutationInput, WatchListUncheckedUpdateManyInput>
    /**
     * Filter which WatchLists to update
     */
    where?: WatchListWhereInput
  }


  /**
   * WatchList upsert
   */
  export type WatchListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * The filter to search for the WatchList to update in case it exists.
     */
    where: WatchListWhereUniqueInput
    /**
     * In case the WatchList found by the `where` argument doesn't exist, create a new WatchList with this data.
     */
    create: XOR<WatchListCreateInput, WatchListUncheckedCreateInput>
    /**
     * In case the WatchList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchListUpdateInput, WatchListUncheckedUpdateInput>
  }


  /**
   * WatchList delete
   */
  export type WatchListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
    /**
     * Filter which WatchList to delete.
     */
    where: WatchListWhereUniqueInput
  }


  /**
   * WatchList deleteMany
   */
  export type WatchListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchLists to delete
     */
    where?: WatchListWhereInput
  }


  /**
   * WatchList without action
   */
  export type WatchListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchList
     */
    select?: WatchListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WatchListInclude<ExtArgs> | null
  }



  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id: number | null
    score: number | null
    userId: number | null
    mediaId: number | null
  }

  export type RatingSumAggregateOutputType = {
    id: number | null
    score: number | null
    userId: number | null
    mediaId: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: number | null
    score: number | null
    userId: number | null
    mediaId: number | null
    createdAt: Date | null
  }

  export type RatingMaxAggregateOutputType = {
    id: number | null
    score: number | null
    userId: number | null
    mediaId: number | null
    createdAt: Date | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    score: number
    userId: number
    mediaId: number
    createdAt: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id?: true
    score?: true
    userId?: true
    mediaId?: true
  }

  export type RatingSumAggregateInputType = {
    id?: true
    score?: true
    userId?: true
    mediaId?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    score?: true
    userId?: true
    mediaId?: true
    createdAt?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    score?: true
    userId?: true
    mediaId?: true
    createdAt?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    score?: true
    userId?: true
    mediaId?: true
    createdAt?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: number
    score: number
    userId: number
    mediaId: number
    createdAt: Date
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    userId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectScalar = {
    id?: boolean
    score?: boolean
    userId?: boolean
    mediaId?: boolean
    createdAt?: boolean
  }

  export type RatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $RatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      score: number
      userId: number
      mediaId: number
      createdAt: Date
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }


  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RatingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rating that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RatingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RatingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends RatingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingCreateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ratings.
     *     @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     *     @example
     *     // Create many Ratings
     *     const rating = await prisma.rating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RatingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends RatingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RatingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RatingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RatingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends RatingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rating model
   */ 
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'Int'>
    readonly score: FieldRef<"Rating", 'Int'>
    readonly userId: FieldRef<"Rating", 'Int'>
    readonly mediaId: FieldRef<"Rating", 'Int'>
    readonly createdAt: FieldRef<"Rating", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }


  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }


  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }


  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }


  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
  }



  /**
   * Model Season
   */

  export type AggregateSeason = {
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  export type SeasonAvgAggregateOutputType = {
    id: number | null
    number: number | null
    mediaId: number | null
  }

  export type SeasonSumAggregateOutputType = {
    id: number | null
    number: number | null
    mediaId: number | null
  }

  export type SeasonMinAggregateOutputType = {
    id: number | null
    number: number | null
    mediaId: number | null
  }

  export type SeasonMaxAggregateOutputType = {
    id: number | null
    number: number | null
    mediaId: number | null
  }

  export type SeasonCountAggregateOutputType = {
    id: number
    number: number
    mediaId: number
    _all: number
  }


  export type SeasonAvgAggregateInputType = {
    id?: true
    number?: true
    mediaId?: true
  }

  export type SeasonSumAggregateInputType = {
    id?: true
    number?: true
    mediaId?: true
  }

  export type SeasonMinAggregateInputType = {
    id?: true
    number?: true
    mediaId?: true
  }

  export type SeasonMaxAggregateInputType = {
    id?: true
    number?: true
    mediaId?: true
  }

  export type SeasonCountAggregateInputType = {
    id?: true
    number?: true
    mediaId?: true
    _all?: true
  }

  export type SeasonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Season to aggregate.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seasons
    **/
    _count?: true | SeasonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeasonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeasonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeasonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeasonMaxAggregateInputType
  }

  export type GetSeasonAggregateType<T extends SeasonAggregateArgs> = {
        [P in keyof T & keyof AggregateSeason]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeason[P]>
      : GetScalarType<T[P], AggregateSeason[P]>
  }




  export type SeasonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeasonWhereInput
    orderBy?: SeasonOrderByWithAggregationInput | SeasonOrderByWithAggregationInput[]
    by: SeasonScalarFieldEnum[] | SeasonScalarFieldEnum
    having?: SeasonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeasonCountAggregateInputType | true
    _avg?: SeasonAvgAggregateInputType
    _sum?: SeasonSumAggregateInputType
    _min?: SeasonMinAggregateInputType
    _max?: SeasonMaxAggregateInputType
  }

  export type SeasonGroupByOutputType = {
    id: number
    number: number
    mediaId: number
    _count: SeasonCountAggregateOutputType | null
    _avg: SeasonAvgAggregateOutputType | null
    _sum: SeasonSumAggregateOutputType | null
    _min: SeasonMinAggregateOutputType | null
    _max: SeasonMaxAggregateOutputType | null
  }

  type GetSeasonGroupByPayload<T extends SeasonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeasonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeasonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeasonGroupByOutputType[P]>
            : GetScalarType<T[P], SeasonGroupByOutputType[P]>
        }
      >
    >


  export type SeasonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    mediaId?: boolean
    media?: boolean | MediaDefaultArgs<ExtArgs>
    episodes?: boolean | Season$episodesArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["season"]>

  export type SeasonSelectScalar = {
    id?: boolean
    number?: boolean
    mediaId?: boolean
  }

  export type SeasonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | MediaDefaultArgs<ExtArgs>
    episodes?: boolean | Season$episodesArgs<ExtArgs>
    _count?: boolean | SeasonCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SeasonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Season"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>
      episodes: Prisma.$EpisodePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: number
      mediaId: number
    }, ExtArgs["result"]["season"]>
    composites: {}
  }


  type SeasonGetPayload<S extends boolean | null | undefined | SeasonDefaultArgs> = $Result.GetResult<Prisma.$SeasonPayload, S>

  type SeasonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeasonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeasonCountAggregateInputType | true
    }

  export interface SeasonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Season'], meta: { name: 'Season' } }
    /**
     * Find zero or one Season that matches the filter.
     * @param {SeasonFindUniqueArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeasonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonFindUniqueArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Season that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeasonFindUniqueOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeasonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Season that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeasonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindFirstArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Season that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindFirstOrThrowArgs} args - Arguments to find a Season
     * @example
     * // Get one Season
     * const season = await prisma.season.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeasonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Seasons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seasons
     * const seasons = await prisma.season.findMany()
     * 
     * // Get first 10 Seasons
     * const seasons = await prisma.season.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seasonWithIdOnly = await prisma.season.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SeasonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Season.
     * @param {SeasonCreateArgs} args - Arguments to create a Season.
     * @example
     * // Create one Season
     * const Season = await prisma.season.create({
     *   data: {
     *     // ... data to create a Season
     *   }
     * })
     * 
    **/
    create<T extends SeasonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonCreateArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Seasons.
     *     @param {SeasonCreateManyArgs} args - Arguments to create many Seasons.
     *     @example
     *     // Create many Seasons
     *     const season = await prisma.season.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SeasonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Season.
     * @param {SeasonDeleteArgs} args - Arguments to delete one Season.
     * @example
     * // Delete one Season
     * const Season = await prisma.season.delete({
     *   where: {
     *     // ... filter to delete one Season
     *   }
     * })
     * 
    **/
    delete<T extends SeasonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonDeleteArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Season.
     * @param {SeasonUpdateArgs} args - Arguments to update one Season.
     * @example
     * // Update one Season
     * const season = await prisma.season.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeasonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpdateArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Seasons.
     * @param {SeasonDeleteManyArgs} args - Arguments to filter Seasons to delete.
     * @example
     * // Delete a few Seasons
     * const { count } = await prisma.season.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeasonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SeasonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seasons
     * const season = await prisma.season.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeasonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Season.
     * @param {SeasonUpsertArgs} args - Arguments to update or create a Season.
     * @example
     * // Update or create a Season
     * const season = await prisma.season.upsert({
     *   create: {
     *     // ... data to create a Season
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Season we want to update
     *   }
     * })
    **/
    upsert<T extends SeasonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SeasonUpsertArgs<ExtArgs>>
    ): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Seasons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonCountArgs} args - Arguments to filter Seasons to count.
     * @example
     * // Count the number of Seasons
     * const count = await prisma.season.count({
     *   where: {
     *     // ... the filter for the Seasons we want to count
     *   }
     * })
    **/
    count<T extends SeasonCountArgs>(
      args?: Subset<T, SeasonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeasonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeasonAggregateArgs>(args: Subset<T, SeasonAggregateArgs>): Prisma.PrismaPromise<GetSeasonAggregateType<T>>

    /**
     * Group by Season.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeasonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeasonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeasonGroupByArgs['orderBy'] }
        : { orderBy?: SeasonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeasonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeasonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Season model
   */
  readonly fields: SeasonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Season.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeasonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    episodes<T extends Season$episodesArgs<ExtArgs> = {}>(args?: Subset<T, Season$episodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Season model
   */ 
  interface SeasonFieldRefs {
    readonly id: FieldRef<"Season", 'Int'>
    readonly number: FieldRef<"Season", 'Int'>
    readonly mediaId: FieldRef<"Season", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Season findUnique
   */
  export type SeasonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }


  /**
   * Season findUniqueOrThrow
   */
  export type SeasonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where: SeasonWhereUniqueInput
  }


  /**
   * Season findFirst
   */
  export type SeasonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }


  /**
   * Season findFirstOrThrow
   */
  export type SeasonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Season to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seasons.
     */
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }


  /**
   * Season findMany
   */
  export type SeasonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter, which Seasons to fetch.
     */
    where?: SeasonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seasons to fetch.
     */
    orderBy?: SeasonOrderByWithRelationInput | SeasonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seasons.
     */
    cursor?: SeasonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seasons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seasons.
     */
    skip?: number
    distinct?: SeasonScalarFieldEnum | SeasonScalarFieldEnum[]
  }


  /**
   * Season create
   */
  export type SeasonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to create a Season.
     */
    data: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
  }


  /**
   * Season createMany
   */
  export type SeasonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seasons.
     */
    data: SeasonCreateManyInput | SeasonCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Season update
   */
  export type SeasonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The data needed to update a Season.
     */
    data: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
    /**
     * Choose, which Season to update.
     */
    where: SeasonWhereUniqueInput
  }


  /**
   * Season updateMany
   */
  export type SeasonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seasons.
     */
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyInput>
    /**
     * Filter which Seasons to update
     */
    where?: SeasonWhereInput
  }


  /**
   * Season upsert
   */
  export type SeasonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * The filter to search for the Season to update in case it exists.
     */
    where: SeasonWhereUniqueInput
    /**
     * In case the Season found by the `where` argument doesn't exist, create a new Season with this data.
     */
    create: XOR<SeasonCreateInput, SeasonUncheckedCreateInput>
    /**
     * In case the Season was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeasonUpdateInput, SeasonUncheckedUpdateInput>
  }


  /**
   * Season delete
   */
  export type SeasonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    /**
     * Filter which Season to delete.
     */
    where: SeasonWhereUniqueInput
  }


  /**
   * Season deleteMany
   */
  export type SeasonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seasons to delete
     */
    where?: SeasonWhereInput
  }


  /**
   * Season.episodes
   */
  export type Season$episodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    where?: EpisodeWhereInput
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    cursor?: EpisodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }


  /**
   * Season without action
   */
  export type SeasonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
  }



  /**
   * Model Episode
   */

  export type AggregateEpisode = {
    _count: EpisodeCountAggregateOutputType | null
    _avg: EpisodeAvgAggregateOutputType | null
    _sum: EpisodeSumAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  export type EpisodeAvgAggregateOutputType = {
    id: number | null
    number: number | null
    seasonId: number | null
  }

  export type EpisodeSumAggregateOutputType = {
    id: number | null
    number: number | null
    seasonId: number | null
  }

  export type EpisodeMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    number: number | null
    seasonId: number | null
  }

  export type EpisodeMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    number: number | null
    seasonId: number | null
  }

  export type EpisodeCountAggregateOutputType = {
    id: number
    title: number
    description: number
    number: number
    seasonId: number
    _all: number
  }


  export type EpisodeAvgAggregateInputType = {
    id?: true
    number?: true
    seasonId?: true
  }

  export type EpisodeSumAggregateInputType = {
    id?: true
    number?: true
    seasonId?: true
  }

  export type EpisodeMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    number?: true
    seasonId?: true
  }

  export type EpisodeMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    number?: true
    seasonId?: true
  }

  export type EpisodeCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    number?: true
    seasonId?: true
    _all?: true
  }

  export type EpisodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Episode to aggregate.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Episodes
    **/
    _count?: true | EpisodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EpisodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EpisodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodeMaxAggregateInputType
  }

  export type GetEpisodeAggregateType<T extends EpisodeAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisode[P]>
      : GetScalarType<T[P], AggregateEpisode[P]>
  }




  export type EpisodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EpisodeWhereInput
    orderBy?: EpisodeOrderByWithAggregationInput | EpisodeOrderByWithAggregationInput[]
    by: EpisodeScalarFieldEnum[] | EpisodeScalarFieldEnum
    having?: EpisodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodeCountAggregateInputType | true
    _avg?: EpisodeAvgAggregateInputType
    _sum?: EpisodeSumAggregateInputType
    _min?: EpisodeMinAggregateInputType
    _max?: EpisodeMaxAggregateInputType
  }

  export type EpisodeGroupByOutputType = {
    id: number
    title: string
    description: string
    number: number
    seasonId: number
    _count: EpisodeCountAggregateOutputType | null
    _avg: EpisodeAvgAggregateOutputType | null
    _sum: EpisodeSumAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  type GetEpisodeGroupByPayload<T extends EpisodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EpisodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
        }
      >
    >


  export type EpisodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    number?: boolean
    seasonId?: boolean
    Season?: boolean | Episode$SeasonArgs<ExtArgs>
  }, ExtArgs["result"]["episode"]>

  export type EpisodeSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    number?: boolean
    seasonId?: boolean
  }

  export type EpisodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Season?: boolean | Episode$SeasonArgs<ExtArgs>
  }


  export type $EpisodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Episode"
    objects: {
      Season: Prisma.$SeasonPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      number: number
      seasonId: number
    }, ExtArgs["result"]["episode"]>
    composites: {}
  }


  type EpisodeGetPayload<S extends boolean | null | undefined | EpisodeDefaultArgs> = $Result.GetResult<Prisma.$EpisodePayload, S>

  type EpisodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EpisodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EpisodeCountAggregateInputType | true
    }

  export interface EpisodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Episode'], meta: { name: 'Episode' } }
    /**
     * Find zero or one Episode that matches the filter.
     * @param {EpisodeFindUniqueArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EpisodeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EpisodeFindUniqueArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Episode that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EpisodeFindUniqueOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EpisodeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EpisodeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Episode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindFirstArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EpisodeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EpisodeFindFirstArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Episode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindFirstOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EpisodeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EpisodeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Episodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Episodes
     * const episodes = await prisma.episode.findMany()
     * 
     * // Get first 10 Episodes
     * const episodes = await prisma.episode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodeWithIdOnly = await prisma.episode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EpisodeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EpisodeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Episode.
     * @param {EpisodeCreateArgs} args - Arguments to create a Episode.
     * @example
     * // Create one Episode
     * const Episode = await prisma.episode.create({
     *   data: {
     *     // ... data to create a Episode
     *   }
     * })
     * 
    **/
    create<T extends EpisodeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EpisodeCreateArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Episodes.
     *     @param {EpisodeCreateManyArgs} args - Arguments to create many Episodes.
     *     @example
     *     // Create many Episodes
     *     const episode = await prisma.episode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EpisodeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EpisodeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Episode.
     * @param {EpisodeDeleteArgs} args - Arguments to delete one Episode.
     * @example
     * // Delete one Episode
     * const Episode = await prisma.episode.delete({
     *   where: {
     *     // ... filter to delete one Episode
     *   }
     * })
     * 
    **/
    delete<T extends EpisodeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EpisodeDeleteArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Episode.
     * @param {EpisodeUpdateArgs} args - Arguments to update one Episode.
     * @example
     * // Update one Episode
     * const episode = await prisma.episode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EpisodeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EpisodeUpdateArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Episodes.
     * @param {EpisodeDeleteManyArgs} args - Arguments to filter Episodes to delete.
     * @example
     * // Delete a few Episodes
     * const { count } = await prisma.episode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EpisodeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EpisodeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Episodes
     * const episode = await prisma.episode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EpisodeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EpisodeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Episode.
     * @param {EpisodeUpsertArgs} args - Arguments to update or create a Episode.
     * @example
     * // Update or create a Episode
     * const episode = await prisma.episode.upsert({
     *   create: {
     *     // ... data to create a Episode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Episode we want to update
     *   }
     * })
    **/
    upsert<T extends EpisodeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EpisodeUpsertArgs<ExtArgs>>
    ): Prisma__EpisodeClient<$Result.GetResult<Prisma.$EpisodePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeCountArgs} args - Arguments to filter Episodes to count.
     * @example
     * // Count the number of Episodes
     * const count = await prisma.episode.count({
     *   where: {
     *     // ... the filter for the Episodes we want to count
     *   }
     * })
    **/
    count<T extends EpisodeCountArgs>(
      args?: Subset<T, EpisodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodeAggregateArgs>(args: Subset<T, EpisodeAggregateArgs>): Prisma.PrismaPromise<GetEpisodeAggregateType<T>>

    /**
     * Group by Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EpisodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EpisodeGroupByArgs['orderBy'] }
        : { orderBy?: EpisodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EpisodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Episode model
   */
  readonly fields: EpisodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Episode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EpisodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Season<T extends Episode$SeasonArgs<ExtArgs> = {}>(args?: Subset<T, Episode$SeasonArgs<ExtArgs>>): Prisma__SeasonClient<$Result.GetResult<Prisma.$SeasonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Episode model
   */ 
  interface EpisodeFieldRefs {
    readonly id: FieldRef<"Episode", 'Int'>
    readonly title: FieldRef<"Episode", 'String'>
    readonly description: FieldRef<"Episode", 'String'>
    readonly number: FieldRef<"Episode", 'Int'>
    readonly seasonId: FieldRef<"Episode", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Episode findUnique
   */
  export type EpisodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where: EpisodeWhereUniqueInput
  }


  /**
   * Episode findUniqueOrThrow
   */
  export type EpisodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where: EpisodeWhereUniqueInput
  }


  /**
   * Episode findFirst
   */
  export type EpisodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Episodes.
     */
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }


  /**
   * Episode findFirstOrThrow
   */
  export type EpisodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episode to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Episodes.
     */
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }


  /**
   * Episode findMany
   */
  export type EpisodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter, which Episodes to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: EpisodeOrderByWithRelationInput | EpisodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    distinct?: EpisodeScalarFieldEnum | EpisodeScalarFieldEnum[]
  }


  /**
   * Episode create
   */
  export type EpisodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * The data needed to create a Episode.
     */
    data: XOR<EpisodeCreateInput, EpisodeUncheckedCreateInput>
  }


  /**
   * Episode createMany
   */
  export type EpisodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Episodes.
     */
    data: EpisodeCreateManyInput | EpisodeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Episode update
   */
  export type EpisodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * The data needed to update a Episode.
     */
    data: XOR<EpisodeUpdateInput, EpisodeUncheckedUpdateInput>
    /**
     * Choose, which Episode to update.
     */
    where: EpisodeWhereUniqueInput
  }


  /**
   * Episode updateMany
   */
  export type EpisodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Episodes.
     */
    data: XOR<EpisodeUpdateManyMutationInput, EpisodeUncheckedUpdateManyInput>
    /**
     * Filter which Episodes to update
     */
    where?: EpisodeWhereInput
  }


  /**
   * Episode upsert
   */
  export type EpisodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * The filter to search for the Episode to update in case it exists.
     */
    where: EpisodeWhereUniqueInput
    /**
     * In case the Episode found by the `where` argument doesn't exist, create a new Episode with this data.
     */
    create: XOR<EpisodeCreateInput, EpisodeUncheckedCreateInput>
    /**
     * In case the Episode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EpisodeUpdateInput, EpisodeUncheckedUpdateInput>
  }


  /**
   * Episode delete
   */
  export type EpisodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
    /**
     * Filter which Episode to delete.
     */
    where: EpisodeWhereUniqueInput
  }


  /**
   * Episode deleteMany
   */
  export type EpisodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Episodes to delete
     */
    where?: EpisodeWhereInput
  }


  /**
   * Episode.Season
   */
  export type Episode$SeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Season
     */
    select?: SeasonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeasonInclude<ExtArgs> | null
    where?: SeasonWhereInput
  }


  /**
   * Episode without action
   */
  export type EpisodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude<ExtArgs> | null
  }



  /**
   * Model Categorie_Movie
   */

  export type AggregateCategorie_Movie = {
    _count: Categorie_MovieCountAggregateOutputType | null
    _avg: Categorie_MovieAvgAggregateOutputType | null
    _sum: Categorie_MovieSumAggregateOutputType | null
    _min: Categorie_MovieMinAggregateOutputType | null
    _max: Categorie_MovieMaxAggregateOutputType | null
  }

  export type Categorie_MovieAvgAggregateOutputType = {
    id: number | null
    categorieId: number | null
    mediaId: number | null
  }

  export type Categorie_MovieSumAggregateOutputType = {
    id: number | null
    categorieId: number | null
    mediaId: number | null
  }

  export type Categorie_MovieMinAggregateOutputType = {
    id: number | null
    categorieId: number | null
    mediaId: number | null
  }

  export type Categorie_MovieMaxAggregateOutputType = {
    id: number | null
    categorieId: number | null
    mediaId: number | null
  }

  export type Categorie_MovieCountAggregateOutputType = {
    id: number
    categorieId: number
    mediaId: number
    _all: number
  }


  export type Categorie_MovieAvgAggregateInputType = {
    id?: true
    categorieId?: true
    mediaId?: true
  }

  export type Categorie_MovieSumAggregateInputType = {
    id?: true
    categorieId?: true
    mediaId?: true
  }

  export type Categorie_MovieMinAggregateInputType = {
    id?: true
    categorieId?: true
    mediaId?: true
  }

  export type Categorie_MovieMaxAggregateInputType = {
    id?: true
    categorieId?: true
    mediaId?: true
  }

  export type Categorie_MovieCountAggregateInputType = {
    id?: true
    categorieId?: true
    mediaId?: true
    _all?: true
  }

  export type Categorie_MovieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorie_Movie to aggregate.
     */
    where?: Categorie_MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorie_Movies to fetch.
     */
    orderBy?: Categorie_MovieOrderByWithRelationInput | Categorie_MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Categorie_MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorie_Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorie_Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorie_Movies
    **/
    _count?: true | Categorie_MovieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Categorie_MovieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Categorie_MovieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Categorie_MovieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Categorie_MovieMaxAggregateInputType
  }

  export type GetCategorie_MovieAggregateType<T extends Categorie_MovieAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorie_Movie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorie_Movie[P]>
      : GetScalarType<T[P], AggregateCategorie_Movie[P]>
  }




  export type Categorie_MovieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Categorie_MovieWhereInput
    orderBy?: Categorie_MovieOrderByWithAggregationInput | Categorie_MovieOrderByWithAggregationInput[]
    by: Categorie_MovieScalarFieldEnum[] | Categorie_MovieScalarFieldEnum
    having?: Categorie_MovieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Categorie_MovieCountAggregateInputType | true
    _avg?: Categorie_MovieAvgAggregateInputType
    _sum?: Categorie_MovieSumAggregateInputType
    _min?: Categorie_MovieMinAggregateInputType
    _max?: Categorie_MovieMaxAggregateInputType
  }

  export type Categorie_MovieGroupByOutputType = {
    id: number
    categorieId: number
    mediaId: number
    _count: Categorie_MovieCountAggregateOutputType | null
    _avg: Categorie_MovieAvgAggregateOutputType | null
    _sum: Categorie_MovieSumAggregateOutputType | null
    _min: Categorie_MovieMinAggregateOutputType | null
    _max: Categorie_MovieMaxAggregateOutputType | null
  }

  type GetCategorie_MovieGroupByPayload<T extends Categorie_MovieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Categorie_MovieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Categorie_MovieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Categorie_MovieGroupByOutputType[P]>
            : GetScalarType<T[P], Categorie_MovieGroupByOutputType[P]>
        }
      >
    >


  export type Categorie_MovieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categorieId?: boolean
    mediaId?: boolean
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categorie_Movie"]>

  export type Categorie_MovieSelectScalar = {
    id?: boolean
    categorieId?: boolean
    mediaId?: boolean
  }

  export type Categorie_MovieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categorie?: boolean | CategorieDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $Categorie_MoviePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categorie_Movie"
    objects: {
      categorie: Prisma.$CategoriePayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categorieId: number
      mediaId: number
    }, ExtArgs["result"]["categorie_Movie"]>
    composites: {}
  }


  type Categorie_MovieGetPayload<S extends boolean | null | undefined | Categorie_MovieDefaultArgs> = $Result.GetResult<Prisma.$Categorie_MoviePayload, S>

  type Categorie_MovieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Categorie_MovieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Categorie_MovieCountAggregateInputType | true
    }

  export interface Categorie_MovieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categorie_Movie'], meta: { name: 'Categorie_Movie' } }
    /**
     * Find zero or one Categorie_Movie that matches the filter.
     * @param {Categorie_MovieFindUniqueArgs} args - Arguments to find a Categorie_Movie
     * @example
     * // Get one Categorie_Movie
     * const categorie_Movie = await prisma.categorie_Movie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Categorie_MovieFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Categorie_MovieFindUniqueArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categorie_Movie that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Categorie_MovieFindUniqueOrThrowArgs} args - Arguments to find a Categorie_Movie
     * @example
     * // Get one Categorie_Movie
     * const categorie_Movie = await prisma.categorie_Movie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Categorie_MovieFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Categorie_MovieFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categorie_Movie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categorie_MovieFindFirstArgs} args - Arguments to find a Categorie_Movie
     * @example
     * // Get one Categorie_Movie
     * const categorie_Movie = await prisma.categorie_Movie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Categorie_MovieFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Categorie_MovieFindFirstArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categorie_Movie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categorie_MovieFindFirstOrThrowArgs} args - Arguments to find a Categorie_Movie
     * @example
     * // Get one Categorie_Movie
     * const categorie_Movie = await prisma.categorie_Movie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Categorie_MovieFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Categorie_MovieFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categorie_Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categorie_MovieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorie_Movies
     * const categorie_Movies = await prisma.categorie_Movie.findMany()
     * 
     * // Get first 10 Categorie_Movies
     * const categorie_Movies = await prisma.categorie_Movie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categorie_MovieWithIdOnly = await prisma.categorie_Movie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Categorie_MovieFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Categorie_MovieFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categorie_Movie.
     * @param {Categorie_MovieCreateArgs} args - Arguments to create a Categorie_Movie.
     * @example
     * // Create one Categorie_Movie
     * const Categorie_Movie = await prisma.categorie_Movie.create({
     *   data: {
     *     // ... data to create a Categorie_Movie
     *   }
     * })
     * 
    **/
    create<T extends Categorie_MovieCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Categorie_MovieCreateArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categorie_Movies.
     *     @param {Categorie_MovieCreateManyArgs} args - Arguments to create many Categorie_Movies.
     *     @example
     *     // Create many Categorie_Movies
     *     const categorie_Movie = await prisma.categorie_Movie.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Categorie_MovieCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Categorie_MovieCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorie_Movie.
     * @param {Categorie_MovieDeleteArgs} args - Arguments to delete one Categorie_Movie.
     * @example
     * // Delete one Categorie_Movie
     * const Categorie_Movie = await prisma.categorie_Movie.delete({
     *   where: {
     *     // ... filter to delete one Categorie_Movie
     *   }
     * })
     * 
    **/
    delete<T extends Categorie_MovieDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Categorie_MovieDeleteArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categorie_Movie.
     * @param {Categorie_MovieUpdateArgs} args - Arguments to update one Categorie_Movie.
     * @example
     * // Update one Categorie_Movie
     * const categorie_Movie = await prisma.categorie_Movie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Categorie_MovieUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Categorie_MovieUpdateArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categorie_Movies.
     * @param {Categorie_MovieDeleteManyArgs} args - Arguments to filter Categorie_Movies to delete.
     * @example
     * // Delete a few Categorie_Movies
     * const { count } = await prisma.categorie_Movie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Categorie_MovieDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Categorie_MovieDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorie_Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categorie_MovieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorie_Movies
     * const categorie_Movie = await prisma.categorie_Movie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Categorie_MovieUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Categorie_MovieUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorie_Movie.
     * @param {Categorie_MovieUpsertArgs} args - Arguments to update or create a Categorie_Movie.
     * @example
     * // Update or create a Categorie_Movie
     * const categorie_Movie = await prisma.categorie_Movie.upsert({
     *   create: {
     *     // ... data to create a Categorie_Movie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorie_Movie we want to update
     *   }
     * })
    **/
    upsert<T extends Categorie_MovieUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Categorie_MovieUpsertArgs<ExtArgs>>
    ): Prisma__Categorie_MovieClient<$Result.GetResult<Prisma.$Categorie_MoviePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categorie_Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categorie_MovieCountArgs} args - Arguments to filter Categorie_Movies to count.
     * @example
     * // Count the number of Categorie_Movies
     * const count = await prisma.categorie_Movie.count({
     *   where: {
     *     // ... the filter for the Categorie_Movies we want to count
     *   }
     * })
    **/
    count<T extends Categorie_MovieCountArgs>(
      args?: Subset<T, Categorie_MovieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Categorie_MovieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorie_Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categorie_MovieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Categorie_MovieAggregateArgs>(args: Subset<T, Categorie_MovieAggregateArgs>): Prisma.PrismaPromise<GetCategorie_MovieAggregateType<T>>

    /**
     * Group by Categorie_Movie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Categorie_MovieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Categorie_MovieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Categorie_MovieGroupByArgs['orderBy'] }
        : { orderBy?: Categorie_MovieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Categorie_MovieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorie_MovieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categorie_Movie model
   */
  readonly fields: Categorie_MovieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorie_Movie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Categorie_MovieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categorie<T extends CategorieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategorieDefaultArgs<ExtArgs>>): Prisma__CategorieClient<$Result.GetResult<Prisma.$CategoriePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categorie_Movie model
   */ 
  interface Categorie_MovieFieldRefs {
    readonly id: FieldRef<"Categorie_Movie", 'Int'>
    readonly categorieId: FieldRef<"Categorie_Movie", 'Int'>
    readonly mediaId: FieldRef<"Categorie_Movie", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Categorie_Movie findUnique
   */
  export type Categorie_MovieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie_Movie to fetch.
     */
    where: Categorie_MovieWhereUniqueInput
  }


  /**
   * Categorie_Movie findUniqueOrThrow
   */
  export type Categorie_MovieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie_Movie to fetch.
     */
    where: Categorie_MovieWhereUniqueInput
  }


  /**
   * Categorie_Movie findFirst
   */
  export type Categorie_MovieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie_Movie to fetch.
     */
    where?: Categorie_MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorie_Movies to fetch.
     */
    orderBy?: Categorie_MovieOrderByWithRelationInput | Categorie_MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorie_Movies.
     */
    cursor?: Categorie_MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorie_Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorie_Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorie_Movies.
     */
    distinct?: Categorie_MovieScalarFieldEnum | Categorie_MovieScalarFieldEnum[]
  }


  /**
   * Categorie_Movie findFirstOrThrow
   */
  export type Categorie_MovieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie_Movie to fetch.
     */
    where?: Categorie_MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorie_Movies to fetch.
     */
    orderBy?: Categorie_MovieOrderByWithRelationInput | Categorie_MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorie_Movies.
     */
    cursor?: Categorie_MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorie_Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorie_Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorie_Movies.
     */
    distinct?: Categorie_MovieScalarFieldEnum | Categorie_MovieScalarFieldEnum[]
  }


  /**
   * Categorie_Movie findMany
   */
  export type Categorie_MovieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * Filter, which Categorie_Movies to fetch.
     */
    where?: Categorie_MovieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorie_Movies to fetch.
     */
    orderBy?: Categorie_MovieOrderByWithRelationInput | Categorie_MovieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorie_Movies.
     */
    cursor?: Categorie_MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorie_Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorie_Movies.
     */
    skip?: number
    distinct?: Categorie_MovieScalarFieldEnum | Categorie_MovieScalarFieldEnum[]
  }


  /**
   * Categorie_Movie create
   */
  export type Categorie_MovieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * The data needed to create a Categorie_Movie.
     */
    data: XOR<Categorie_MovieCreateInput, Categorie_MovieUncheckedCreateInput>
  }


  /**
   * Categorie_Movie createMany
   */
  export type Categorie_MovieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorie_Movies.
     */
    data: Categorie_MovieCreateManyInput | Categorie_MovieCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Categorie_Movie update
   */
  export type Categorie_MovieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * The data needed to update a Categorie_Movie.
     */
    data: XOR<Categorie_MovieUpdateInput, Categorie_MovieUncheckedUpdateInput>
    /**
     * Choose, which Categorie_Movie to update.
     */
    where: Categorie_MovieWhereUniqueInput
  }


  /**
   * Categorie_Movie updateMany
   */
  export type Categorie_MovieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorie_Movies.
     */
    data: XOR<Categorie_MovieUpdateManyMutationInput, Categorie_MovieUncheckedUpdateManyInput>
    /**
     * Filter which Categorie_Movies to update
     */
    where?: Categorie_MovieWhereInput
  }


  /**
   * Categorie_Movie upsert
   */
  export type Categorie_MovieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * The filter to search for the Categorie_Movie to update in case it exists.
     */
    where: Categorie_MovieWhereUniqueInput
    /**
     * In case the Categorie_Movie found by the `where` argument doesn't exist, create a new Categorie_Movie with this data.
     */
    create: XOR<Categorie_MovieCreateInput, Categorie_MovieUncheckedCreateInput>
    /**
     * In case the Categorie_Movie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Categorie_MovieUpdateInput, Categorie_MovieUncheckedUpdateInput>
  }


  /**
   * Categorie_Movie delete
   */
  export type Categorie_MovieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
    /**
     * Filter which Categorie_Movie to delete.
     */
    where: Categorie_MovieWhereUniqueInput
  }


  /**
   * Categorie_Movie deleteMany
   */
  export type Categorie_MovieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorie_Movies to delete
     */
    where?: Categorie_MovieWhereInput
  }


  /**
   * Categorie_Movie without action
   */
  export type Categorie_MovieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categorie_Movie
     */
    select?: Categorie_MovieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Categorie_MovieInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    pseudo: 'pseudo',
    password: 'password',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_PlatformScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    platformId: 'platformId'
  };

  export type User_PlatformScalarFieldEnum = (typeof User_PlatformScalarFieldEnum)[keyof typeof User_PlatformScalarFieldEnum]


  export const PlatformScalarFieldEnum: {
    id: 'id',
    title: 'title',
    logo_url: 'logo_url',
    link: 'link'
  };

  export type PlatformScalarFieldEnum = (typeof PlatformScalarFieldEnum)[keyof typeof PlatformScalarFieldEnum]


  export const Media_PlatformScalarFieldEnum: {
    id: 'id',
    mediaId: 'mediaId',
    platformId: 'platformId'
  };

  export type Media_PlatformScalarFieldEnum = (typeof Media_PlatformScalarFieldEnum)[keyof typeof Media_PlatformScalarFieldEnum]


  export const WatchingScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    userId: 'userId',
    mediaId: 'mediaId'
  };

  export type WatchingScalarFieldEnum = (typeof WatchingScalarFieldEnum)[keyof typeof WatchingScalarFieldEnum]


  export const CategorieScalarFieldEnum: {
    id: 'id',
    title: 'title',
    color: 'color'
  };

  export type CategorieScalarFieldEnum = (typeof CategorieScalarFieldEnum)[keyof typeof CategorieScalarFieldEnum]


  export const MediaScalarFieldEnum: {
    id: 'id',
    title: 'title',
    trailer_url: 'trailer_url',
    photo_url: 'photo_url',
    logo_url: 'logo_url',
    description: 'description',
    duration: 'duration',
    director: 'director'
  };

  export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


  export const Actor_MediaScalarFieldEnum: {
    id: 'id',
    actorId: 'actorId',
    mediaId: 'mediaId'
  };

  export type Actor_MediaScalarFieldEnum = (typeof Actor_MediaScalarFieldEnum)[keyof typeof Actor_MediaScalarFieldEnum]


  export const ActorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    picture_url: 'picture_url'
  };

  export type ActorScalarFieldEnum = (typeof ActorScalarFieldEnum)[keyof typeof ActorScalarFieldEnum]


  export const WatchListScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    userId: 'userId',
    mediaId: 'mediaId'
  };

  export type WatchListScalarFieldEnum = (typeof WatchListScalarFieldEnum)[keyof typeof WatchListScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    score: 'score',
    userId: 'userId',
    mediaId: 'mediaId',
    createdAt: 'createdAt'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const SeasonScalarFieldEnum: {
    id: 'id',
    number: 'number',
    mediaId: 'mediaId'
  };

  export type SeasonScalarFieldEnum = (typeof SeasonScalarFieldEnum)[keyof typeof SeasonScalarFieldEnum]


  export const EpisodeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    number: 'number',
    seasonId: 'seasonId'
  };

  export type EpisodeScalarFieldEnum = (typeof EpisodeScalarFieldEnum)[keyof typeof EpisodeScalarFieldEnum]


  export const Categorie_MovieScalarFieldEnum: {
    id: 'id',
    categorieId: 'categorieId',
    mediaId: 'mediaId'
  };

  export type Categorie_MovieScalarFieldEnum = (typeof Categorie_MovieScalarFieldEnum)[keyof typeof Categorie_MovieScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    pseudo?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    platform?: User_PlatformListRelationFilter
    watching?: WatchingListRelationFilter
    WatchList?: WatchListListRelationFilter
    rating?: RatingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    platform?: User_PlatformOrderByRelationAggregateInput
    watching?: WatchingOrderByRelationAggregateInput
    WatchList?: WatchListOrderByRelationAggregateInput
    rating?: RatingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    pseudo?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    platform?: User_PlatformListRelationFilter
    watching?: WatchingListRelationFilter
    WatchList?: WatchListListRelationFilter
    rating?: RatingListRelationFilter
  }, "id" | "email" | "pseudo">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    pseudo?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type User_PlatformWhereInput = {
    AND?: User_PlatformWhereInput | User_PlatformWhereInput[]
    OR?: User_PlatformWhereInput[]
    NOT?: User_PlatformWhereInput | User_PlatformWhereInput[]
    id?: IntFilter<"User_Platform"> | number
    userId?: IntFilter<"User_Platform"> | number
    platformId?: IntFilter<"User_Platform"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    platform?: XOR<PlatformRelationFilter, PlatformWhereInput>
  }

  export type User_PlatformOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    platformId?: SortOrder
    user?: UserOrderByWithRelationInput
    platform?: PlatformOrderByWithRelationInput
  }

  export type User_PlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: User_PlatformWhereInput | User_PlatformWhereInput[]
    OR?: User_PlatformWhereInput[]
    NOT?: User_PlatformWhereInput | User_PlatformWhereInput[]
    userId?: IntFilter<"User_Platform"> | number
    platformId?: IntFilter<"User_Platform"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    platform?: XOR<PlatformRelationFilter, PlatformWhereInput>
  }, "id">

  export type User_PlatformOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    platformId?: SortOrder
    _count?: User_PlatformCountOrderByAggregateInput
    _avg?: User_PlatformAvgOrderByAggregateInput
    _max?: User_PlatformMaxOrderByAggregateInput
    _min?: User_PlatformMinOrderByAggregateInput
    _sum?: User_PlatformSumOrderByAggregateInput
  }

  export type User_PlatformScalarWhereWithAggregatesInput = {
    AND?: User_PlatformScalarWhereWithAggregatesInput | User_PlatformScalarWhereWithAggregatesInput[]
    OR?: User_PlatformScalarWhereWithAggregatesInput[]
    NOT?: User_PlatformScalarWhereWithAggregatesInput | User_PlatformScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User_Platform"> | number
    userId?: IntWithAggregatesFilter<"User_Platform"> | number
    platformId?: IntWithAggregatesFilter<"User_Platform"> | number
  }

  export type PlatformWhereInput = {
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    id?: IntFilter<"Platform"> | number
    title?: StringFilter<"Platform"> | string
    logo_url?: StringFilter<"Platform"> | string
    link?: StringFilter<"Platform"> | string
    user?: User_PlatformListRelationFilter
    media?: Media_PlatformListRelationFilter
  }

  export type PlatformOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    logo_url?: SortOrder
    link?: SortOrder
    user?: User_PlatformOrderByRelationAggregateInput
    media?: Media_PlatformOrderByRelationAggregateInput
  }

  export type PlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    title?: StringFilter<"Platform"> | string
    logo_url?: StringFilter<"Platform"> | string
    link?: StringFilter<"Platform"> | string
    user?: User_PlatformListRelationFilter
    media?: Media_PlatformListRelationFilter
  }, "id">

  export type PlatformOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    logo_url?: SortOrder
    link?: SortOrder
    _count?: PlatformCountOrderByAggregateInput
    _avg?: PlatformAvgOrderByAggregateInput
    _max?: PlatformMaxOrderByAggregateInput
    _min?: PlatformMinOrderByAggregateInput
    _sum?: PlatformSumOrderByAggregateInput
  }

  export type PlatformScalarWhereWithAggregatesInput = {
    AND?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    OR?: PlatformScalarWhereWithAggregatesInput[]
    NOT?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Platform"> | number
    title?: StringWithAggregatesFilter<"Platform"> | string
    logo_url?: StringWithAggregatesFilter<"Platform"> | string
    link?: StringWithAggregatesFilter<"Platform"> | string
  }

  export type Media_PlatformWhereInput = {
    AND?: Media_PlatformWhereInput | Media_PlatformWhereInput[]
    OR?: Media_PlatformWhereInput[]
    NOT?: Media_PlatformWhereInput | Media_PlatformWhereInput[]
    id?: IntFilter<"Media_Platform"> | number
    mediaId?: IntFilter<"Media_Platform"> | number
    platformId?: IntFilter<"Media_Platform"> | number
    media?: XOR<MediaRelationFilter, MediaWhereInput>
    platform?: XOR<PlatformRelationFilter, PlatformWhereInput>
  }

  export type Media_PlatformOrderByWithRelationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    platformId?: SortOrder
    media?: MediaOrderByWithRelationInput
    platform?: PlatformOrderByWithRelationInput
  }

  export type Media_PlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Media_PlatformWhereInput | Media_PlatformWhereInput[]
    OR?: Media_PlatformWhereInput[]
    NOT?: Media_PlatformWhereInput | Media_PlatformWhereInput[]
    mediaId?: IntFilter<"Media_Platform"> | number
    platformId?: IntFilter<"Media_Platform"> | number
    media?: XOR<MediaRelationFilter, MediaWhereInput>
    platform?: XOR<PlatformRelationFilter, PlatformWhereInput>
  }, "id">

  export type Media_PlatformOrderByWithAggregationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    platformId?: SortOrder
    _count?: Media_PlatformCountOrderByAggregateInput
    _avg?: Media_PlatformAvgOrderByAggregateInput
    _max?: Media_PlatformMaxOrderByAggregateInput
    _min?: Media_PlatformMinOrderByAggregateInput
    _sum?: Media_PlatformSumOrderByAggregateInput
  }

  export type Media_PlatformScalarWhereWithAggregatesInput = {
    AND?: Media_PlatformScalarWhereWithAggregatesInput | Media_PlatformScalarWhereWithAggregatesInput[]
    OR?: Media_PlatformScalarWhereWithAggregatesInput[]
    NOT?: Media_PlatformScalarWhereWithAggregatesInput | Media_PlatformScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Media_Platform"> | number
    mediaId?: IntWithAggregatesFilter<"Media_Platform"> | number
    platformId?: IntWithAggregatesFilter<"Media_Platform"> | number
  }

  export type WatchingWhereInput = {
    AND?: WatchingWhereInput | WatchingWhereInput[]
    OR?: WatchingWhereInput[]
    NOT?: WatchingWhereInput | WatchingWhereInput[]
    id?: IntFilter<"Watching"> | number
    created_at?: DateTimeFilter<"Watching"> | Date | string
    userId?: IntFilter<"Watching"> | number
    mediaId?: IntFilter<"Watching"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type WatchingOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    user?: UserOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type WatchingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WatchingWhereInput | WatchingWhereInput[]
    OR?: WatchingWhereInput[]
    NOT?: WatchingWhereInput | WatchingWhereInput[]
    created_at?: DateTimeFilter<"Watching"> | Date | string
    userId?: IntFilter<"Watching"> | number
    mediaId?: IntFilter<"Watching"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type WatchingOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    _count?: WatchingCountOrderByAggregateInput
    _avg?: WatchingAvgOrderByAggregateInput
    _max?: WatchingMaxOrderByAggregateInput
    _min?: WatchingMinOrderByAggregateInput
    _sum?: WatchingSumOrderByAggregateInput
  }

  export type WatchingScalarWhereWithAggregatesInput = {
    AND?: WatchingScalarWhereWithAggregatesInput | WatchingScalarWhereWithAggregatesInput[]
    OR?: WatchingScalarWhereWithAggregatesInput[]
    NOT?: WatchingScalarWhereWithAggregatesInput | WatchingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Watching"> | number
    created_at?: DateTimeWithAggregatesFilter<"Watching"> | Date | string
    userId?: IntWithAggregatesFilter<"Watching"> | number
    mediaId?: IntWithAggregatesFilter<"Watching"> | number
  }

  export type CategorieWhereInput = {
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    id?: IntFilter<"Categorie"> | number
    title?: StringFilter<"Categorie"> | string
    color?: StringFilter<"Categorie"> | string
    media?: Categorie_MovieListRelationFilter
  }

  export type CategorieOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
    media?: Categorie_MovieOrderByRelationAggregateInput
  }

  export type CategorieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategorieWhereInput | CategorieWhereInput[]
    OR?: CategorieWhereInput[]
    NOT?: CategorieWhereInput | CategorieWhereInput[]
    title?: StringFilter<"Categorie"> | string
    color?: StringFilter<"Categorie"> | string
    media?: Categorie_MovieListRelationFilter
  }, "id">

  export type CategorieOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
    _count?: CategorieCountOrderByAggregateInput
    _avg?: CategorieAvgOrderByAggregateInput
    _max?: CategorieMaxOrderByAggregateInput
    _min?: CategorieMinOrderByAggregateInput
    _sum?: CategorieSumOrderByAggregateInput
  }

  export type CategorieScalarWhereWithAggregatesInput = {
    AND?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    OR?: CategorieScalarWhereWithAggregatesInput[]
    NOT?: CategorieScalarWhereWithAggregatesInput | CategorieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categorie"> | number
    title?: StringWithAggregatesFilter<"Categorie"> | string
    color?: StringWithAggregatesFilter<"Categorie"> | string
  }

  export type MediaWhereInput = {
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    id?: IntFilter<"Media"> | number
    title?: StringFilter<"Media"> | string
    trailer_url?: StringFilter<"Media"> | string
    photo_url?: StringFilter<"Media"> | string
    logo_url?: StringFilter<"Media"> | string
    description?: StringFilter<"Media"> | string
    duration?: IntFilter<"Media"> | number
    director?: StringFilter<"Media"> | string
    platforms?: Media_PlatformListRelationFilter
    categories?: Categorie_MovieListRelationFilter
    actor?: Actor_MediaListRelationFilter
    watchlist?: WatchListListRelationFilter
    Rating?: RatingListRelationFilter
    season?: SeasonListRelationFilter
    watching?: WatchingListRelationFilter
  }

  export type MediaOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    trailer_url?: SortOrder
    photo_url?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    director?: SortOrder
    platforms?: Media_PlatformOrderByRelationAggregateInput
    categories?: Categorie_MovieOrderByRelationAggregateInput
    actor?: Actor_MediaOrderByRelationAggregateInput
    watchlist?: WatchListOrderByRelationAggregateInput
    Rating?: RatingOrderByRelationAggregateInput
    season?: SeasonOrderByRelationAggregateInput
    watching?: WatchingOrderByRelationAggregateInput
  }

  export type MediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    title?: StringFilter<"Media"> | string
    trailer_url?: StringFilter<"Media"> | string
    photo_url?: StringFilter<"Media"> | string
    logo_url?: StringFilter<"Media"> | string
    description?: StringFilter<"Media"> | string
    duration?: IntFilter<"Media"> | number
    director?: StringFilter<"Media"> | string
    platforms?: Media_PlatformListRelationFilter
    categories?: Categorie_MovieListRelationFilter
    actor?: Actor_MediaListRelationFilter
    watchlist?: WatchListListRelationFilter
    Rating?: RatingListRelationFilter
    season?: SeasonListRelationFilter
    watching?: WatchingListRelationFilter
  }, "id">

  export type MediaOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    trailer_url?: SortOrder
    photo_url?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    director?: SortOrder
    _count?: MediaCountOrderByAggregateInput
    _avg?: MediaAvgOrderByAggregateInput
    _max?: MediaMaxOrderByAggregateInput
    _min?: MediaMinOrderByAggregateInput
    _sum?: MediaSumOrderByAggregateInput
  }

  export type MediaScalarWhereWithAggregatesInput = {
    AND?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    OR?: MediaScalarWhereWithAggregatesInput[]
    NOT?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Media"> | number
    title?: StringWithAggregatesFilter<"Media"> | string
    trailer_url?: StringWithAggregatesFilter<"Media"> | string
    photo_url?: StringWithAggregatesFilter<"Media"> | string
    logo_url?: StringWithAggregatesFilter<"Media"> | string
    description?: StringWithAggregatesFilter<"Media"> | string
    duration?: IntWithAggregatesFilter<"Media"> | number
    director?: StringWithAggregatesFilter<"Media"> | string
  }

  export type Actor_MediaWhereInput = {
    AND?: Actor_MediaWhereInput | Actor_MediaWhereInput[]
    OR?: Actor_MediaWhereInput[]
    NOT?: Actor_MediaWhereInput | Actor_MediaWhereInput[]
    id?: IntFilter<"Actor_Media"> | number
    actorId?: IntFilter<"Actor_Media"> | number
    mediaId?: IntFilter<"Actor_Media"> | number
    actor?: XOR<ActorRelationFilter, ActorWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type Actor_MediaOrderByWithRelationInput = {
    id?: SortOrder
    actorId?: SortOrder
    mediaId?: SortOrder
    actor?: ActorOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type Actor_MediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Actor_MediaWhereInput | Actor_MediaWhereInput[]
    OR?: Actor_MediaWhereInput[]
    NOT?: Actor_MediaWhereInput | Actor_MediaWhereInput[]
    actorId?: IntFilter<"Actor_Media"> | number
    mediaId?: IntFilter<"Actor_Media"> | number
    actor?: XOR<ActorRelationFilter, ActorWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type Actor_MediaOrderByWithAggregationInput = {
    id?: SortOrder
    actorId?: SortOrder
    mediaId?: SortOrder
    _count?: Actor_MediaCountOrderByAggregateInput
    _avg?: Actor_MediaAvgOrderByAggregateInput
    _max?: Actor_MediaMaxOrderByAggregateInput
    _min?: Actor_MediaMinOrderByAggregateInput
    _sum?: Actor_MediaSumOrderByAggregateInput
  }

  export type Actor_MediaScalarWhereWithAggregatesInput = {
    AND?: Actor_MediaScalarWhereWithAggregatesInput | Actor_MediaScalarWhereWithAggregatesInput[]
    OR?: Actor_MediaScalarWhereWithAggregatesInput[]
    NOT?: Actor_MediaScalarWhereWithAggregatesInput | Actor_MediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Actor_Media"> | number
    actorId?: IntWithAggregatesFilter<"Actor_Media"> | number
    mediaId?: IntWithAggregatesFilter<"Actor_Media"> | number
  }

  export type ActorWhereInput = {
    AND?: ActorWhereInput | ActorWhereInput[]
    OR?: ActorWhereInput[]
    NOT?: ActorWhereInput | ActorWhereInput[]
    id?: IntFilter<"Actor"> | number
    name?: StringFilter<"Actor"> | string
    picture_url?: StringNullableFilter<"Actor"> | string | null
    media?: Actor_MediaListRelationFilter
  }

  export type ActorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    picture_url?: SortOrderInput | SortOrder
    media?: Actor_MediaOrderByRelationAggregateInput
  }

  export type ActorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ActorWhereInput | ActorWhereInput[]
    OR?: ActorWhereInput[]
    NOT?: ActorWhereInput | ActorWhereInput[]
    name?: StringFilter<"Actor"> | string
    picture_url?: StringNullableFilter<"Actor"> | string | null
    media?: Actor_MediaListRelationFilter
  }, "id">

  export type ActorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    picture_url?: SortOrderInput | SortOrder
    _count?: ActorCountOrderByAggregateInput
    _avg?: ActorAvgOrderByAggregateInput
    _max?: ActorMaxOrderByAggregateInput
    _min?: ActorMinOrderByAggregateInput
    _sum?: ActorSumOrderByAggregateInput
  }

  export type ActorScalarWhereWithAggregatesInput = {
    AND?: ActorScalarWhereWithAggregatesInput | ActorScalarWhereWithAggregatesInput[]
    OR?: ActorScalarWhereWithAggregatesInput[]
    NOT?: ActorScalarWhereWithAggregatesInput | ActorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Actor"> | number
    name?: StringWithAggregatesFilter<"Actor"> | string
    picture_url?: StringNullableWithAggregatesFilter<"Actor"> | string | null
  }

  export type WatchListWhereInput = {
    AND?: WatchListWhereInput | WatchListWhereInput[]
    OR?: WatchListWhereInput[]
    NOT?: WatchListWhereInput | WatchListWhereInput[]
    id?: IntFilter<"WatchList"> | number
    created_at?: DateTimeFilter<"WatchList"> | Date | string
    userId?: IntFilter<"WatchList"> | number
    mediaId?: IntFilter<"WatchList"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type WatchListOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    user?: UserOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type WatchListWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WatchListWhereInput | WatchListWhereInput[]
    OR?: WatchListWhereInput[]
    NOT?: WatchListWhereInput | WatchListWhereInput[]
    created_at?: DateTimeFilter<"WatchList"> | Date | string
    userId?: IntFilter<"WatchList"> | number
    mediaId?: IntFilter<"WatchList"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type WatchListOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    _count?: WatchListCountOrderByAggregateInput
    _avg?: WatchListAvgOrderByAggregateInput
    _max?: WatchListMaxOrderByAggregateInput
    _min?: WatchListMinOrderByAggregateInput
    _sum?: WatchListSumOrderByAggregateInput
  }

  export type WatchListScalarWhereWithAggregatesInput = {
    AND?: WatchListScalarWhereWithAggregatesInput | WatchListScalarWhereWithAggregatesInput[]
    OR?: WatchListScalarWhereWithAggregatesInput[]
    NOT?: WatchListScalarWhereWithAggregatesInput | WatchListScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WatchList"> | number
    created_at?: DateTimeWithAggregatesFilter<"WatchList"> | Date | string
    userId?: IntWithAggregatesFilter<"WatchList"> | number
    mediaId?: IntWithAggregatesFilter<"WatchList"> | number
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: IntFilter<"Rating"> | number
    score?: IntFilter<"Rating"> | number
    userId?: IntFilter<"Rating"> | number
    mediaId?: IntFilter<"Rating"> | number
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    score?: IntFilter<"Rating"> | number
    userId?: IntFilter<"Rating"> | number
    mediaId?: IntFilter<"Rating"> | number
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rating"> | number
    score?: IntWithAggregatesFilter<"Rating"> | number
    userId?: IntWithAggregatesFilter<"Rating"> | number
    mediaId?: IntWithAggregatesFilter<"Rating"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
  }

  export type SeasonWhereInput = {
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    id?: IntFilter<"Season"> | number
    number?: IntFilter<"Season"> | number
    mediaId?: IntFilter<"Season"> | number
    media?: XOR<MediaRelationFilter, MediaWhereInput>
    episodes?: EpisodeListRelationFilter
  }

  export type SeasonOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    mediaId?: SortOrder
    media?: MediaOrderByWithRelationInput
    episodes?: EpisodeOrderByRelationAggregateInput
  }

  export type SeasonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SeasonWhereInput | SeasonWhereInput[]
    OR?: SeasonWhereInput[]
    NOT?: SeasonWhereInput | SeasonWhereInput[]
    number?: IntFilter<"Season"> | number
    mediaId?: IntFilter<"Season"> | number
    media?: XOR<MediaRelationFilter, MediaWhereInput>
    episodes?: EpisodeListRelationFilter
  }, "id">

  export type SeasonOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    mediaId?: SortOrder
    _count?: SeasonCountOrderByAggregateInput
    _avg?: SeasonAvgOrderByAggregateInput
    _max?: SeasonMaxOrderByAggregateInput
    _min?: SeasonMinOrderByAggregateInput
    _sum?: SeasonSumOrderByAggregateInput
  }

  export type SeasonScalarWhereWithAggregatesInput = {
    AND?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    OR?: SeasonScalarWhereWithAggregatesInput[]
    NOT?: SeasonScalarWhereWithAggregatesInput | SeasonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Season"> | number
    number?: IntWithAggregatesFilter<"Season"> | number
    mediaId?: IntWithAggregatesFilter<"Season"> | number
  }

  export type EpisodeWhereInput = {
    AND?: EpisodeWhereInput | EpisodeWhereInput[]
    OR?: EpisodeWhereInput[]
    NOT?: EpisodeWhereInput | EpisodeWhereInput[]
    id?: IntFilter<"Episode"> | number
    title?: StringFilter<"Episode"> | string
    description?: StringFilter<"Episode"> | string
    number?: IntFilter<"Episode"> | number
    seasonId?: IntFilter<"Episode"> | number
    Season?: XOR<SeasonNullableRelationFilter, SeasonWhereInput> | null
  }

  export type EpisodeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    number?: SortOrder
    seasonId?: SortOrder
    Season?: SeasonOrderByWithRelationInput
  }

  export type EpisodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EpisodeWhereInput | EpisodeWhereInput[]
    OR?: EpisodeWhereInput[]
    NOT?: EpisodeWhereInput | EpisodeWhereInput[]
    title?: StringFilter<"Episode"> | string
    description?: StringFilter<"Episode"> | string
    number?: IntFilter<"Episode"> | number
    seasonId?: IntFilter<"Episode"> | number
    Season?: XOR<SeasonNullableRelationFilter, SeasonWhereInput> | null
  }, "id">

  export type EpisodeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    number?: SortOrder
    seasonId?: SortOrder
    _count?: EpisodeCountOrderByAggregateInput
    _avg?: EpisodeAvgOrderByAggregateInput
    _max?: EpisodeMaxOrderByAggregateInput
    _min?: EpisodeMinOrderByAggregateInput
    _sum?: EpisodeSumOrderByAggregateInput
  }

  export type EpisodeScalarWhereWithAggregatesInput = {
    AND?: EpisodeScalarWhereWithAggregatesInput | EpisodeScalarWhereWithAggregatesInput[]
    OR?: EpisodeScalarWhereWithAggregatesInput[]
    NOT?: EpisodeScalarWhereWithAggregatesInput | EpisodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Episode"> | number
    title?: StringWithAggregatesFilter<"Episode"> | string
    description?: StringWithAggregatesFilter<"Episode"> | string
    number?: IntWithAggregatesFilter<"Episode"> | number
    seasonId?: IntWithAggregatesFilter<"Episode"> | number
  }

  export type Categorie_MovieWhereInput = {
    AND?: Categorie_MovieWhereInput | Categorie_MovieWhereInput[]
    OR?: Categorie_MovieWhereInput[]
    NOT?: Categorie_MovieWhereInput | Categorie_MovieWhereInput[]
    id?: IntFilter<"Categorie_Movie"> | number
    categorieId?: IntFilter<"Categorie_Movie"> | number
    mediaId?: IntFilter<"Categorie_Movie"> | number
    categorie?: XOR<CategorieRelationFilter, CategorieWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type Categorie_MovieOrderByWithRelationInput = {
    id?: SortOrder
    categorieId?: SortOrder
    mediaId?: SortOrder
    categorie?: CategorieOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type Categorie_MovieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Categorie_MovieWhereInput | Categorie_MovieWhereInput[]
    OR?: Categorie_MovieWhereInput[]
    NOT?: Categorie_MovieWhereInput | Categorie_MovieWhereInput[]
    categorieId?: IntFilter<"Categorie_Movie"> | number
    mediaId?: IntFilter<"Categorie_Movie"> | number
    categorie?: XOR<CategorieRelationFilter, CategorieWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type Categorie_MovieOrderByWithAggregationInput = {
    id?: SortOrder
    categorieId?: SortOrder
    mediaId?: SortOrder
    _count?: Categorie_MovieCountOrderByAggregateInput
    _avg?: Categorie_MovieAvgOrderByAggregateInput
    _max?: Categorie_MovieMaxOrderByAggregateInput
    _min?: Categorie_MovieMinOrderByAggregateInput
    _sum?: Categorie_MovieSumOrderByAggregateInput
  }

  export type Categorie_MovieScalarWhereWithAggregatesInput = {
    AND?: Categorie_MovieScalarWhereWithAggregatesInput | Categorie_MovieScalarWhereWithAggregatesInput[]
    OR?: Categorie_MovieScalarWhereWithAggregatesInput[]
    NOT?: Categorie_MovieScalarWhereWithAggregatesInput | Categorie_MovieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categorie_Movie"> | number
    categorieId?: IntWithAggregatesFilter<"Categorie_Movie"> | number
    mediaId?: IntWithAggregatesFilter<"Categorie_Movie"> | number
  }

  export type UserCreateInput = {
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformCreateNestedManyWithoutUserInput
    watching?: WatchingCreateNestedManyWithoutUserInput
    WatchList?: WatchListCreateNestedManyWithoutUserInput
    rating?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformUncheckedCreateNestedManyWithoutUserInput
    watching?: WatchingUncheckedCreateNestedManyWithoutUserInput
    WatchList?: WatchListUncheckedCreateNestedManyWithoutUserInput
    rating?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUpdateManyWithoutUserNestedInput
    watching?: WatchingUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUpdateManyWithoutUserNestedInput
    rating?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUncheckedUpdateManyWithoutUserNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUncheckedUpdateManyWithoutUserNestedInput
    rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type User_PlatformCreateInput = {
    user: UserCreateNestedOneWithoutPlatformInput
    platform: PlatformCreateNestedOneWithoutUserInput
  }

  export type User_PlatformUncheckedCreateInput = {
    id?: number
    userId: number
    platformId: number
  }

  export type User_PlatformUpdateInput = {
    user?: UserUpdateOneRequiredWithoutPlatformNestedInput
    platform?: PlatformUpdateOneRequiredWithoutUserNestedInput
  }

  export type User_PlatformUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type User_PlatformCreateManyInput = {
    id?: number
    userId: number
    platformId: number
  }

  export type User_PlatformUpdateManyMutationInput = {

  }

  export type User_PlatformUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type PlatformCreateInput = {
    title: string
    logo_url: string
    link: string
    user?: User_PlatformCreateNestedManyWithoutPlatformInput
    media?: Media_PlatformCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateInput = {
    id?: number
    title: string
    logo_url: string
    link: string
    user?: User_PlatformUncheckedCreateNestedManyWithoutPlatformInput
    media?: Media_PlatformUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    user?: User_PlatformUpdateManyWithoutPlatformNestedInput
    media?: Media_PlatformUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    user?: User_PlatformUncheckedUpdateManyWithoutPlatformNestedInput
    media?: Media_PlatformUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformCreateManyInput = {
    id?: number
    title: string
    logo_url: string
    link: string
  }

  export type PlatformUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type PlatformUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type Media_PlatformCreateInput = {
    media: MediaCreateNestedOneWithoutPlatformsInput
    platform: PlatformCreateNestedOneWithoutMediaInput
  }

  export type Media_PlatformUncheckedCreateInput = {
    id?: number
    mediaId: number
    platformId: number
  }

  export type Media_PlatformUpdateInput = {
    media?: MediaUpdateOneRequiredWithoutPlatformsNestedInput
    platform?: PlatformUpdateOneRequiredWithoutMediaNestedInput
  }

  export type Media_PlatformUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type Media_PlatformCreateManyInput = {
    id?: number
    mediaId: number
    platformId: number
  }

  export type Media_PlatformUpdateManyMutationInput = {

  }

  export type Media_PlatformUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchingCreateInput = {
    created_at?: Date | string
    user: UserCreateNestedOneWithoutWatchingInput
    media: MediaCreateNestedOneWithoutWatchingInput
  }

  export type WatchingUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    userId: number
    mediaId: number
  }

  export type WatchingUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchingNestedInput
    media?: MediaUpdateOneRequiredWithoutWatchingNestedInput
  }

  export type WatchingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchingCreateManyInput = {
    id?: number
    created_at?: Date | string
    userId: number
    mediaId: number
  }

  export type WatchingUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type CategorieCreateInput = {
    title: string
    color: string
    media?: Categorie_MovieCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUncheckedCreateInput = {
    id?: number
    title: string
    color: string
    media?: Categorie_MovieUncheckedCreateNestedManyWithoutCategorieInput
  }

  export type CategorieUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    media?: Categorie_MovieUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    media?: Categorie_MovieUncheckedUpdateManyWithoutCategorieNestedInput
  }

  export type CategorieCreateManyInput = {
    id?: number
    title: string
    color: string
  }

  export type CategorieUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type CategorieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type MediaCreateInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaCreateNestedManyWithoutMediaInput
    watchlist?: WatchListCreateNestedManyWithoutMediaInput
    Rating?: RatingCreateNestedManyWithoutMediaInput
    season?: SeasonCreateNestedManyWithoutMediaInput
    watching?: WatchingCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformUncheckedCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaUncheckedCreateNestedManyWithoutMediaInput
    watchlist?: WatchListUncheckedCreateNestedManyWithoutMediaInput
    Rating?: RatingUncheckedCreateNestedManyWithoutMediaInput
    season?: SeasonUncheckedCreateNestedManyWithoutMediaInput
    watching?: WatchingUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUpdateManyWithoutMediaNestedInput
    Rating?: RatingUpdateManyWithoutMediaNestedInput
    season?: SeasonUpdateManyWithoutMediaNestedInput
    watching?: WatchingUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUncheckedUpdateManyWithoutMediaNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutMediaNestedInput
    season?: SeasonUncheckedUpdateManyWithoutMediaNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateManyInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
  }

  export type MediaUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
  }

  export type MediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
  }

  export type Actor_MediaCreateInput = {
    actor: ActorCreateNestedOneWithoutMediaInput
    media: MediaCreateNestedOneWithoutActorInput
  }

  export type Actor_MediaUncheckedCreateInput = {
    id?: number
    actorId: number
    mediaId: number
  }

  export type Actor_MediaUpdateInput = {
    actor?: ActorUpdateOneRequiredWithoutMediaNestedInput
    media?: MediaUpdateOneRequiredWithoutActorNestedInput
  }

  export type Actor_MediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type Actor_MediaCreateManyInput = {
    id?: number
    actorId: number
    mediaId: number
  }

  export type Actor_MediaUpdateManyMutationInput = {

  }

  export type Actor_MediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type ActorCreateInput = {
    name: string
    picture_url?: string | null
    media?: Actor_MediaCreateNestedManyWithoutActorInput
  }

  export type ActorUncheckedCreateInput = {
    id?: number
    name: string
    picture_url?: string | null
    media?: Actor_MediaUncheckedCreateNestedManyWithoutActorInput
  }

  export type ActorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    picture_url?: NullableStringFieldUpdateOperationsInput | string | null
    media?: Actor_MediaUpdateManyWithoutActorNestedInput
  }

  export type ActorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    picture_url?: NullableStringFieldUpdateOperationsInput | string | null
    media?: Actor_MediaUncheckedUpdateManyWithoutActorNestedInput
  }

  export type ActorCreateManyInput = {
    id?: number
    name: string
    picture_url?: string | null
  }

  export type ActorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    picture_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    picture_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WatchListCreateInput = {
    created_at?: Date | string
    user: UserCreateNestedOneWithoutWatchListInput
    media: MediaCreateNestedOneWithoutWatchlistInput
  }

  export type WatchListUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    userId: number
    mediaId: number
  }

  export type WatchListUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchListNestedInput
    media?: MediaUpdateOneRequiredWithoutWatchlistNestedInput
  }

  export type WatchListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchListCreateManyInput = {
    id?: number
    created_at?: Date | string
    userId: number
    mediaId: number
  }

  export type WatchListUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type RatingCreateInput = {
    score?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRatingInput
    media: MediaCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateInput = {
    id?: number
    score?: number
    userId: number
    mediaId: number
    createdAt?: Date | string
  }

  export type RatingUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
    media?: MediaUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateManyInput = {
    id?: number
    score?: number
    userId: number
    mediaId: number
    createdAt?: Date | string
  }

  export type RatingUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonCreateInput = {
    number: number
    media: MediaCreateNestedOneWithoutSeasonInput
    episodes?: EpisodeCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateInput = {
    id?: number
    number: number
    mediaId: number
    episodes?: EpisodeUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    media?: MediaUpdateOneRequiredWithoutSeasonNestedInput
    episodes?: EpisodeUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
    episodes?: EpisodeUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonCreateManyInput = {
    id?: number
    number: number
    mediaId: number
  }

  export type SeasonUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
  }

  export type SeasonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeCreateInput = {
    title: string
    description: string
    number: number
    Season?: SeasonCreateNestedOneWithoutEpisodesInput
  }

  export type EpisodeUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    number: number
    seasonId: number
  }

  export type EpisodeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    Season?: SeasonUpdateOneWithoutEpisodesNestedInput
  }

  export type EpisodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeCreateManyInput = {
    id?: number
    title: string
    description: string
    number: number
    seasonId: number
  }

  export type EpisodeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    seasonId?: IntFieldUpdateOperationsInput | number
  }

  export type Categorie_MovieCreateInput = {
    categorie: CategorieCreateNestedOneWithoutMediaInput
    media: MediaCreateNestedOneWithoutCategoriesInput
  }

  export type Categorie_MovieUncheckedCreateInput = {
    id?: number
    categorieId: number
    mediaId: number
  }

  export type Categorie_MovieUpdateInput = {
    categorie?: CategorieUpdateOneRequiredWithoutMediaNestedInput
    media?: MediaUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type Categorie_MovieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categorieId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type Categorie_MovieCreateManyInput = {
    id?: number
    categorieId: number
    mediaId: number
  }

  export type Categorie_MovieUpdateManyMutationInput = {

  }

  export type Categorie_MovieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categorieId?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type User_PlatformListRelationFilter = {
    every?: User_PlatformWhereInput
    some?: User_PlatformWhereInput
    none?: User_PlatformWhereInput
  }

  export type WatchingListRelationFilter = {
    every?: WatchingWhereInput
    some?: WatchingWhereInput
    none?: WatchingWhereInput
  }

  export type WatchListListRelationFilter = {
    every?: WatchListWhereInput
    some?: WatchListWhereInput
    none?: WatchListWhereInput
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type User_PlatformOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PlatformRelationFilter = {
    is?: PlatformWhereInput
    isNot?: PlatformWhereInput
  }

  export type User_PlatformCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platformId?: SortOrder
  }

  export type User_PlatformAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platformId?: SortOrder
  }

  export type User_PlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platformId?: SortOrder
  }

  export type User_PlatformMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platformId?: SortOrder
  }

  export type User_PlatformSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    platformId?: SortOrder
  }

  export type Media_PlatformListRelationFilter = {
    every?: Media_PlatformWhereInput
    some?: Media_PlatformWhereInput
    none?: Media_PlatformWhereInput
  }

  export type Media_PlatformOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlatformCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    logo_url?: SortOrder
    link?: SortOrder
  }

  export type PlatformAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    logo_url?: SortOrder
    link?: SortOrder
  }

  export type PlatformMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    logo_url?: SortOrder
    link?: SortOrder
  }

  export type PlatformSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MediaRelationFilter = {
    is?: MediaWhereInput
    isNot?: MediaWhereInput
  }

  export type Media_PlatformCountOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    platformId?: SortOrder
  }

  export type Media_PlatformAvgOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    platformId?: SortOrder
  }

  export type Media_PlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    platformId?: SortOrder
  }

  export type Media_PlatformMinOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    platformId?: SortOrder
  }

  export type Media_PlatformSumOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    platformId?: SortOrder
  }

  export type WatchingCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchingMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchingMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type Categorie_MovieListRelationFilter = {
    every?: Categorie_MovieWhereInput
    some?: Categorie_MovieWhereInput
    none?: Categorie_MovieWhereInput
  }

  export type Categorie_MovieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategorieCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
  }

  export type CategorieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategorieMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
  }

  export type CategorieMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    color?: SortOrder
  }

  export type CategorieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Actor_MediaListRelationFilter = {
    every?: Actor_MediaWhereInput
    some?: Actor_MediaWhereInput
    none?: Actor_MediaWhereInput
  }

  export type SeasonListRelationFilter = {
    every?: SeasonWhereInput
    some?: SeasonWhereInput
    none?: SeasonWhereInput
  }

  export type Actor_MediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeasonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    trailer_url?: SortOrder
    photo_url?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    director?: SortOrder
  }

  export type MediaAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type MediaMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    trailer_url?: SortOrder
    photo_url?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    director?: SortOrder
  }

  export type MediaMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    trailer_url?: SortOrder
    photo_url?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    director?: SortOrder
  }

  export type MediaSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type ActorRelationFilter = {
    is?: ActorWhereInput
    isNot?: ActorWhereInput
  }

  export type Actor_MediaCountOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    mediaId?: SortOrder
  }

  export type Actor_MediaAvgOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    mediaId?: SortOrder
  }

  export type Actor_MediaMaxOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    mediaId?: SortOrder
  }

  export type Actor_MediaMinOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    mediaId?: SortOrder
  }

  export type Actor_MediaSumOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    mediaId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    picture_url?: SortOrder
  }

  export type ActorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ActorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    picture_url?: SortOrder
  }

  export type ActorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    picture_url?: SortOrder
  }

  export type ActorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type WatchListCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchListAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchListMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchListMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type WatchListSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
  }

  export type EpisodeListRelationFilter = {
    every?: EpisodeWhereInput
    some?: EpisodeWhereInput
    none?: EpisodeWhereInput
  }

  export type EpisodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeasonCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    mediaId?: SortOrder
  }

  export type SeasonAvgOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    mediaId?: SortOrder
  }

  export type SeasonMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    mediaId?: SortOrder
  }

  export type SeasonMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    mediaId?: SortOrder
  }

  export type SeasonSumOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    mediaId?: SortOrder
  }

  export type SeasonNullableRelationFilter = {
    is?: SeasonWhereInput | null
    isNot?: SeasonWhereInput | null
  }

  export type EpisodeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    number?: SortOrder
    seasonId?: SortOrder
  }

  export type EpisodeAvgOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    seasonId?: SortOrder
  }

  export type EpisodeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    number?: SortOrder
    seasonId?: SortOrder
  }

  export type EpisodeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    number?: SortOrder
    seasonId?: SortOrder
  }

  export type EpisodeSumOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    seasonId?: SortOrder
  }

  export type CategorieRelationFilter = {
    is?: CategorieWhereInput
    isNot?: CategorieWhereInput
  }

  export type Categorie_MovieCountOrderByAggregateInput = {
    id?: SortOrder
    categorieId?: SortOrder
    mediaId?: SortOrder
  }

  export type Categorie_MovieAvgOrderByAggregateInput = {
    id?: SortOrder
    categorieId?: SortOrder
    mediaId?: SortOrder
  }

  export type Categorie_MovieMaxOrderByAggregateInput = {
    id?: SortOrder
    categorieId?: SortOrder
    mediaId?: SortOrder
  }

  export type Categorie_MovieMinOrderByAggregateInput = {
    id?: SortOrder
    categorieId?: SortOrder
    mediaId?: SortOrder
  }

  export type Categorie_MovieSumOrderByAggregateInput = {
    id?: SortOrder
    categorieId?: SortOrder
    mediaId?: SortOrder
  }

  export type User_PlatformCreateNestedManyWithoutUserInput = {
    create?: XOR<User_PlatformCreateWithoutUserInput, User_PlatformUncheckedCreateWithoutUserInput> | User_PlatformCreateWithoutUserInput[] | User_PlatformUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutUserInput | User_PlatformCreateOrConnectWithoutUserInput[]
    createMany?: User_PlatformCreateManyUserInputEnvelope
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
  }

  export type WatchingCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchingCreateWithoutUserInput, WatchingUncheckedCreateWithoutUserInput> | WatchingCreateWithoutUserInput[] | WatchingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutUserInput | WatchingCreateOrConnectWithoutUserInput[]
    createMany?: WatchingCreateManyUserInputEnvelope
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
  }

  export type WatchListCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchListCreateWithoutUserInput, WatchListUncheckedCreateWithoutUserInput> | WatchListCreateWithoutUserInput[] | WatchListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutUserInput | WatchListCreateOrConnectWithoutUserInput[]
    createMany?: WatchListCreateManyUserInputEnvelope
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type User_PlatformUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<User_PlatformCreateWithoutUserInput, User_PlatformUncheckedCreateWithoutUserInput> | User_PlatformCreateWithoutUserInput[] | User_PlatformUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutUserInput | User_PlatformCreateOrConnectWithoutUserInput[]
    createMany?: User_PlatformCreateManyUserInputEnvelope
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
  }

  export type WatchingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchingCreateWithoutUserInput, WatchingUncheckedCreateWithoutUserInput> | WatchingCreateWithoutUserInput[] | WatchingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutUserInput | WatchingCreateOrConnectWithoutUserInput[]
    createMany?: WatchingCreateManyUserInputEnvelope
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
  }

  export type WatchListUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchListCreateWithoutUserInput, WatchListUncheckedCreateWithoutUserInput> | WatchListCreateWithoutUserInput[] | WatchListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutUserInput | WatchListCreateOrConnectWithoutUserInput[]
    createMany?: WatchListCreateManyUserInputEnvelope
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type User_PlatformUpdateManyWithoutUserNestedInput = {
    create?: XOR<User_PlatformCreateWithoutUserInput, User_PlatformUncheckedCreateWithoutUserInput> | User_PlatformCreateWithoutUserInput[] | User_PlatformUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutUserInput | User_PlatformCreateOrConnectWithoutUserInput[]
    upsert?: User_PlatformUpsertWithWhereUniqueWithoutUserInput | User_PlatformUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: User_PlatformCreateManyUserInputEnvelope
    set?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    disconnect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    delete?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    update?: User_PlatformUpdateWithWhereUniqueWithoutUserInput | User_PlatformUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: User_PlatformUpdateManyWithWhereWithoutUserInput | User_PlatformUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: User_PlatformScalarWhereInput | User_PlatformScalarWhereInput[]
  }

  export type WatchingUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchingCreateWithoutUserInput, WatchingUncheckedCreateWithoutUserInput> | WatchingCreateWithoutUserInput[] | WatchingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutUserInput | WatchingCreateOrConnectWithoutUserInput[]
    upsert?: WatchingUpsertWithWhereUniqueWithoutUserInput | WatchingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchingCreateManyUserInputEnvelope
    set?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    disconnect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    delete?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    update?: WatchingUpdateWithWhereUniqueWithoutUserInput | WatchingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchingUpdateManyWithWhereWithoutUserInput | WatchingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchingScalarWhereInput | WatchingScalarWhereInput[]
  }

  export type WatchListUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchListCreateWithoutUserInput, WatchListUncheckedCreateWithoutUserInput> | WatchListCreateWithoutUserInput[] | WatchListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutUserInput | WatchListCreateOrConnectWithoutUserInput[]
    upsert?: WatchListUpsertWithWhereUniqueWithoutUserInput | WatchListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchListCreateManyUserInputEnvelope
    set?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    disconnect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    delete?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    update?: WatchListUpdateWithWhereUniqueWithoutUserInput | WatchListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchListUpdateManyWithWhereWithoutUserInput | WatchListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchListScalarWhereInput | WatchListScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type User_PlatformUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<User_PlatformCreateWithoutUserInput, User_PlatformUncheckedCreateWithoutUserInput> | User_PlatformCreateWithoutUserInput[] | User_PlatformUncheckedCreateWithoutUserInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutUserInput | User_PlatformCreateOrConnectWithoutUserInput[]
    upsert?: User_PlatformUpsertWithWhereUniqueWithoutUserInput | User_PlatformUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: User_PlatformCreateManyUserInputEnvelope
    set?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    disconnect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    delete?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    update?: User_PlatformUpdateWithWhereUniqueWithoutUserInput | User_PlatformUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: User_PlatformUpdateManyWithWhereWithoutUserInput | User_PlatformUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: User_PlatformScalarWhereInput | User_PlatformScalarWhereInput[]
  }

  export type WatchingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchingCreateWithoutUserInput, WatchingUncheckedCreateWithoutUserInput> | WatchingCreateWithoutUserInput[] | WatchingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutUserInput | WatchingCreateOrConnectWithoutUserInput[]
    upsert?: WatchingUpsertWithWhereUniqueWithoutUserInput | WatchingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchingCreateManyUserInputEnvelope
    set?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    disconnect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    delete?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    update?: WatchingUpdateWithWhereUniqueWithoutUserInput | WatchingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchingUpdateManyWithWhereWithoutUserInput | WatchingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchingScalarWhereInput | WatchingScalarWhereInput[]
  }

  export type WatchListUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchListCreateWithoutUserInput, WatchListUncheckedCreateWithoutUserInput> | WatchListCreateWithoutUserInput[] | WatchListUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutUserInput | WatchListCreateOrConnectWithoutUserInput[]
    upsert?: WatchListUpsertWithWhereUniqueWithoutUserInput | WatchListUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchListCreateManyUserInputEnvelope
    set?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    disconnect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    delete?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    update?: WatchListUpdateWithWhereUniqueWithoutUserInput | WatchListUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchListUpdateManyWithWhereWithoutUserInput | WatchListUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchListScalarWhereInput | WatchListScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPlatformInput = {
    create?: XOR<UserCreateWithoutPlatformInput, UserUncheckedCreateWithoutPlatformInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlatformInput
    connect?: UserWhereUniqueInput
  }

  export type PlatformCreateNestedOneWithoutUserInput = {
    create?: XOR<PlatformCreateWithoutUserInput, PlatformUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutUserInput
    connect?: PlatformWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPlatformNestedInput = {
    create?: XOR<UserCreateWithoutPlatformInput, UserUncheckedCreateWithoutPlatformInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlatformInput
    upsert?: UserUpsertWithoutPlatformInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlatformInput, UserUpdateWithoutPlatformInput>, UserUncheckedUpdateWithoutPlatformInput>
  }

  export type PlatformUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<PlatformCreateWithoutUserInput, PlatformUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutUserInput
    upsert?: PlatformUpsertWithoutUserInput
    connect?: PlatformWhereUniqueInput
    update?: XOR<XOR<PlatformUpdateToOneWithWhereWithoutUserInput, PlatformUpdateWithoutUserInput>, PlatformUncheckedUpdateWithoutUserInput>
  }

  export type User_PlatformCreateNestedManyWithoutPlatformInput = {
    create?: XOR<User_PlatformCreateWithoutPlatformInput, User_PlatformUncheckedCreateWithoutPlatformInput> | User_PlatformCreateWithoutPlatformInput[] | User_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutPlatformInput | User_PlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: User_PlatformCreateManyPlatformInputEnvelope
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
  }

  export type Media_PlatformCreateNestedManyWithoutPlatformInput = {
    create?: XOR<Media_PlatformCreateWithoutPlatformInput, Media_PlatformUncheckedCreateWithoutPlatformInput> | Media_PlatformCreateWithoutPlatformInput[] | Media_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutPlatformInput | Media_PlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: Media_PlatformCreateManyPlatformInputEnvelope
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
  }

  export type User_PlatformUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<User_PlatformCreateWithoutPlatformInput, User_PlatformUncheckedCreateWithoutPlatformInput> | User_PlatformCreateWithoutPlatformInput[] | User_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutPlatformInput | User_PlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: User_PlatformCreateManyPlatformInputEnvelope
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
  }

  export type Media_PlatformUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<Media_PlatformCreateWithoutPlatformInput, Media_PlatformUncheckedCreateWithoutPlatformInput> | Media_PlatformCreateWithoutPlatformInput[] | Media_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutPlatformInput | Media_PlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: Media_PlatformCreateManyPlatformInputEnvelope
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
  }

  export type User_PlatformUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<User_PlatformCreateWithoutPlatformInput, User_PlatformUncheckedCreateWithoutPlatformInput> | User_PlatformCreateWithoutPlatformInput[] | User_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutPlatformInput | User_PlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: User_PlatformUpsertWithWhereUniqueWithoutPlatformInput | User_PlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: User_PlatformCreateManyPlatformInputEnvelope
    set?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    disconnect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    delete?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    update?: User_PlatformUpdateWithWhereUniqueWithoutPlatformInput | User_PlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: User_PlatformUpdateManyWithWhereWithoutPlatformInput | User_PlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: User_PlatformScalarWhereInput | User_PlatformScalarWhereInput[]
  }

  export type Media_PlatformUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<Media_PlatformCreateWithoutPlatformInput, Media_PlatformUncheckedCreateWithoutPlatformInput> | Media_PlatformCreateWithoutPlatformInput[] | Media_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutPlatformInput | Media_PlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: Media_PlatformUpsertWithWhereUniqueWithoutPlatformInput | Media_PlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: Media_PlatformCreateManyPlatformInputEnvelope
    set?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    disconnect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    delete?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    update?: Media_PlatformUpdateWithWhereUniqueWithoutPlatformInput | Media_PlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: Media_PlatformUpdateManyWithWhereWithoutPlatformInput | Media_PlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: Media_PlatformScalarWhereInput | Media_PlatformScalarWhereInput[]
  }

  export type User_PlatformUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<User_PlatformCreateWithoutPlatformInput, User_PlatformUncheckedCreateWithoutPlatformInput> | User_PlatformCreateWithoutPlatformInput[] | User_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: User_PlatformCreateOrConnectWithoutPlatformInput | User_PlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: User_PlatformUpsertWithWhereUniqueWithoutPlatformInput | User_PlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: User_PlatformCreateManyPlatformInputEnvelope
    set?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    disconnect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    delete?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    connect?: User_PlatformWhereUniqueInput | User_PlatformWhereUniqueInput[]
    update?: User_PlatformUpdateWithWhereUniqueWithoutPlatformInput | User_PlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: User_PlatformUpdateManyWithWhereWithoutPlatformInput | User_PlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: User_PlatformScalarWhereInput | User_PlatformScalarWhereInput[]
  }

  export type Media_PlatformUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<Media_PlatformCreateWithoutPlatformInput, Media_PlatformUncheckedCreateWithoutPlatformInput> | Media_PlatformCreateWithoutPlatformInput[] | Media_PlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutPlatformInput | Media_PlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: Media_PlatformUpsertWithWhereUniqueWithoutPlatformInput | Media_PlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: Media_PlatformCreateManyPlatformInputEnvelope
    set?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    disconnect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    delete?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    update?: Media_PlatformUpdateWithWhereUniqueWithoutPlatformInput | Media_PlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: Media_PlatformUpdateManyWithWhereWithoutPlatformInput | Media_PlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: Media_PlatformScalarWhereInput | Media_PlatformScalarWhereInput[]
  }

  export type MediaCreateNestedOneWithoutPlatformsInput = {
    create?: XOR<MediaCreateWithoutPlatformsInput, MediaUncheckedCreateWithoutPlatformsInput>
    connectOrCreate?: MediaCreateOrConnectWithoutPlatformsInput
    connect?: MediaWhereUniqueInput
  }

  export type PlatformCreateNestedOneWithoutMediaInput = {
    create?: XOR<PlatformCreateWithoutMediaInput, PlatformUncheckedCreateWithoutMediaInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutMediaInput
    connect?: PlatformWhereUniqueInput
  }

  export type MediaUpdateOneRequiredWithoutPlatformsNestedInput = {
    create?: XOR<MediaCreateWithoutPlatformsInput, MediaUncheckedCreateWithoutPlatformsInput>
    connectOrCreate?: MediaCreateOrConnectWithoutPlatformsInput
    upsert?: MediaUpsertWithoutPlatformsInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutPlatformsInput, MediaUpdateWithoutPlatformsInput>, MediaUncheckedUpdateWithoutPlatformsInput>
  }

  export type PlatformUpdateOneRequiredWithoutMediaNestedInput = {
    create?: XOR<PlatformCreateWithoutMediaInput, PlatformUncheckedCreateWithoutMediaInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutMediaInput
    upsert?: PlatformUpsertWithoutMediaInput
    connect?: PlatformWhereUniqueInput
    update?: XOR<XOR<PlatformUpdateToOneWithWhereWithoutMediaInput, PlatformUpdateWithoutMediaInput>, PlatformUncheckedUpdateWithoutMediaInput>
  }

  export type UserCreateNestedOneWithoutWatchingInput = {
    create?: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchingInput
    connect?: UserWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutWatchingInput = {
    create?: XOR<MediaCreateWithoutWatchingInput, MediaUncheckedCreateWithoutWatchingInput>
    connectOrCreate?: MediaCreateOrConnectWithoutWatchingInput
    connect?: MediaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWatchingNestedInput = {
    create?: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchingInput
    upsert?: UserUpsertWithoutWatchingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWatchingInput, UserUpdateWithoutWatchingInput>, UserUncheckedUpdateWithoutWatchingInput>
  }

  export type MediaUpdateOneRequiredWithoutWatchingNestedInput = {
    create?: XOR<MediaCreateWithoutWatchingInput, MediaUncheckedCreateWithoutWatchingInput>
    connectOrCreate?: MediaCreateOrConnectWithoutWatchingInput
    upsert?: MediaUpsertWithoutWatchingInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutWatchingInput, MediaUpdateWithoutWatchingInput>, MediaUncheckedUpdateWithoutWatchingInput>
  }

  export type Categorie_MovieCreateNestedManyWithoutCategorieInput = {
    create?: XOR<Categorie_MovieCreateWithoutCategorieInput, Categorie_MovieUncheckedCreateWithoutCategorieInput> | Categorie_MovieCreateWithoutCategorieInput[] | Categorie_MovieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutCategorieInput | Categorie_MovieCreateOrConnectWithoutCategorieInput[]
    createMany?: Categorie_MovieCreateManyCategorieInputEnvelope
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
  }

  export type Categorie_MovieUncheckedCreateNestedManyWithoutCategorieInput = {
    create?: XOR<Categorie_MovieCreateWithoutCategorieInput, Categorie_MovieUncheckedCreateWithoutCategorieInput> | Categorie_MovieCreateWithoutCategorieInput[] | Categorie_MovieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutCategorieInput | Categorie_MovieCreateOrConnectWithoutCategorieInput[]
    createMany?: Categorie_MovieCreateManyCategorieInputEnvelope
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
  }

  export type Categorie_MovieUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<Categorie_MovieCreateWithoutCategorieInput, Categorie_MovieUncheckedCreateWithoutCategorieInput> | Categorie_MovieCreateWithoutCategorieInput[] | Categorie_MovieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutCategorieInput | Categorie_MovieCreateOrConnectWithoutCategorieInput[]
    upsert?: Categorie_MovieUpsertWithWhereUniqueWithoutCategorieInput | Categorie_MovieUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: Categorie_MovieCreateManyCategorieInputEnvelope
    set?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    disconnect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    delete?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    update?: Categorie_MovieUpdateWithWhereUniqueWithoutCategorieInput | Categorie_MovieUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: Categorie_MovieUpdateManyWithWhereWithoutCategorieInput | Categorie_MovieUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: Categorie_MovieScalarWhereInput | Categorie_MovieScalarWhereInput[]
  }

  export type Categorie_MovieUncheckedUpdateManyWithoutCategorieNestedInput = {
    create?: XOR<Categorie_MovieCreateWithoutCategorieInput, Categorie_MovieUncheckedCreateWithoutCategorieInput> | Categorie_MovieCreateWithoutCategorieInput[] | Categorie_MovieUncheckedCreateWithoutCategorieInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutCategorieInput | Categorie_MovieCreateOrConnectWithoutCategorieInput[]
    upsert?: Categorie_MovieUpsertWithWhereUniqueWithoutCategorieInput | Categorie_MovieUpsertWithWhereUniqueWithoutCategorieInput[]
    createMany?: Categorie_MovieCreateManyCategorieInputEnvelope
    set?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    disconnect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    delete?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    update?: Categorie_MovieUpdateWithWhereUniqueWithoutCategorieInput | Categorie_MovieUpdateWithWhereUniqueWithoutCategorieInput[]
    updateMany?: Categorie_MovieUpdateManyWithWhereWithoutCategorieInput | Categorie_MovieUpdateManyWithWhereWithoutCategorieInput[]
    deleteMany?: Categorie_MovieScalarWhereInput | Categorie_MovieScalarWhereInput[]
  }

  export type Media_PlatformCreateNestedManyWithoutMediaInput = {
    create?: XOR<Media_PlatformCreateWithoutMediaInput, Media_PlatformUncheckedCreateWithoutMediaInput> | Media_PlatformCreateWithoutMediaInput[] | Media_PlatformUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutMediaInput | Media_PlatformCreateOrConnectWithoutMediaInput[]
    createMany?: Media_PlatformCreateManyMediaInputEnvelope
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
  }

  export type Categorie_MovieCreateNestedManyWithoutMediaInput = {
    create?: XOR<Categorie_MovieCreateWithoutMediaInput, Categorie_MovieUncheckedCreateWithoutMediaInput> | Categorie_MovieCreateWithoutMediaInput[] | Categorie_MovieUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutMediaInput | Categorie_MovieCreateOrConnectWithoutMediaInput[]
    createMany?: Categorie_MovieCreateManyMediaInputEnvelope
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
  }

  export type Actor_MediaCreateNestedManyWithoutMediaInput = {
    create?: XOR<Actor_MediaCreateWithoutMediaInput, Actor_MediaUncheckedCreateWithoutMediaInput> | Actor_MediaCreateWithoutMediaInput[] | Actor_MediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutMediaInput | Actor_MediaCreateOrConnectWithoutMediaInput[]
    createMany?: Actor_MediaCreateManyMediaInputEnvelope
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
  }

  export type WatchListCreateNestedManyWithoutMediaInput = {
    create?: XOR<WatchListCreateWithoutMediaInput, WatchListUncheckedCreateWithoutMediaInput> | WatchListCreateWithoutMediaInput[] | WatchListUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutMediaInput | WatchListCreateOrConnectWithoutMediaInput[]
    createMany?: WatchListCreateManyMediaInputEnvelope
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutMediaInput = {
    create?: XOR<RatingCreateWithoutMediaInput, RatingUncheckedCreateWithoutMediaInput> | RatingCreateWithoutMediaInput[] | RatingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutMediaInput | RatingCreateOrConnectWithoutMediaInput[]
    createMany?: RatingCreateManyMediaInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type SeasonCreateNestedManyWithoutMediaInput = {
    create?: XOR<SeasonCreateWithoutMediaInput, SeasonUncheckedCreateWithoutMediaInput> | SeasonCreateWithoutMediaInput[] | SeasonUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutMediaInput | SeasonCreateOrConnectWithoutMediaInput[]
    createMany?: SeasonCreateManyMediaInputEnvelope
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
  }

  export type WatchingCreateNestedManyWithoutMediaInput = {
    create?: XOR<WatchingCreateWithoutMediaInput, WatchingUncheckedCreateWithoutMediaInput> | WatchingCreateWithoutMediaInput[] | WatchingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutMediaInput | WatchingCreateOrConnectWithoutMediaInput[]
    createMany?: WatchingCreateManyMediaInputEnvelope
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
  }

  export type Media_PlatformUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<Media_PlatformCreateWithoutMediaInput, Media_PlatformUncheckedCreateWithoutMediaInput> | Media_PlatformCreateWithoutMediaInput[] | Media_PlatformUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutMediaInput | Media_PlatformCreateOrConnectWithoutMediaInput[]
    createMany?: Media_PlatformCreateManyMediaInputEnvelope
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
  }

  export type Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<Categorie_MovieCreateWithoutMediaInput, Categorie_MovieUncheckedCreateWithoutMediaInput> | Categorie_MovieCreateWithoutMediaInput[] | Categorie_MovieUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutMediaInput | Categorie_MovieCreateOrConnectWithoutMediaInput[]
    createMany?: Categorie_MovieCreateManyMediaInputEnvelope
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
  }

  export type Actor_MediaUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<Actor_MediaCreateWithoutMediaInput, Actor_MediaUncheckedCreateWithoutMediaInput> | Actor_MediaCreateWithoutMediaInput[] | Actor_MediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutMediaInput | Actor_MediaCreateOrConnectWithoutMediaInput[]
    createMany?: Actor_MediaCreateManyMediaInputEnvelope
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
  }

  export type WatchListUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<WatchListCreateWithoutMediaInput, WatchListUncheckedCreateWithoutMediaInput> | WatchListCreateWithoutMediaInput[] | WatchListUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutMediaInput | WatchListCreateOrConnectWithoutMediaInput[]
    createMany?: WatchListCreateManyMediaInputEnvelope
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<RatingCreateWithoutMediaInput, RatingUncheckedCreateWithoutMediaInput> | RatingCreateWithoutMediaInput[] | RatingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutMediaInput | RatingCreateOrConnectWithoutMediaInput[]
    createMany?: RatingCreateManyMediaInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type SeasonUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<SeasonCreateWithoutMediaInput, SeasonUncheckedCreateWithoutMediaInput> | SeasonCreateWithoutMediaInput[] | SeasonUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutMediaInput | SeasonCreateOrConnectWithoutMediaInput[]
    createMany?: SeasonCreateManyMediaInputEnvelope
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
  }

  export type WatchingUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<WatchingCreateWithoutMediaInput, WatchingUncheckedCreateWithoutMediaInput> | WatchingCreateWithoutMediaInput[] | WatchingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutMediaInput | WatchingCreateOrConnectWithoutMediaInput[]
    createMany?: WatchingCreateManyMediaInputEnvelope
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
  }

  export type Media_PlatformUpdateManyWithoutMediaNestedInput = {
    create?: XOR<Media_PlatformCreateWithoutMediaInput, Media_PlatformUncheckedCreateWithoutMediaInput> | Media_PlatformCreateWithoutMediaInput[] | Media_PlatformUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutMediaInput | Media_PlatformCreateOrConnectWithoutMediaInput[]
    upsert?: Media_PlatformUpsertWithWhereUniqueWithoutMediaInput | Media_PlatformUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: Media_PlatformCreateManyMediaInputEnvelope
    set?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    disconnect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    delete?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    update?: Media_PlatformUpdateWithWhereUniqueWithoutMediaInput | Media_PlatformUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: Media_PlatformUpdateManyWithWhereWithoutMediaInput | Media_PlatformUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: Media_PlatformScalarWhereInput | Media_PlatformScalarWhereInput[]
  }

  export type Categorie_MovieUpdateManyWithoutMediaNestedInput = {
    create?: XOR<Categorie_MovieCreateWithoutMediaInput, Categorie_MovieUncheckedCreateWithoutMediaInput> | Categorie_MovieCreateWithoutMediaInput[] | Categorie_MovieUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutMediaInput | Categorie_MovieCreateOrConnectWithoutMediaInput[]
    upsert?: Categorie_MovieUpsertWithWhereUniqueWithoutMediaInput | Categorie_MovieUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: Categorie_MovieCreateManyMediaInputEnvelope
    set?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    disconnect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    delete?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    update?: Categorie_MovieUpdateWithWhereUniqueWithoutMediaInput | Categorie_MovieUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: Categorie_MovieUpdateManyWithWhereWithoutMediaInput | Categorie_MovieUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: Categorie_MovieScalarWhereInput | Categorie_MovieScalarWhereInput[]
  }

  export type Actor_MediaUpdateManyWithoutMediaNestedInput = {
    create?: XOR<Actor_MediaCreateWithoutMediaInput, Actor_MediaUncheckedCreateWithoutMediaInput> | Actor_MediaCreateWithoutMediaInput[] | Actor_MediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutMediaInput | Actor_MediaCreateOrConnectWithoutMediaInput[]
    upsert?: Actor_MediaUpsertWithWhereUniqueWithoutMediaInput | Actor_MediaUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: Actor_MediaCreateManyMediaInputEnvelope
    set?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    disconnect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    delete?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    update?: Actor_MediaUpdateWithWhereUniqueWithoutMediaInput | Actor_MediaUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: Actor_MediaUpdateManyWithWhereWithoutMediaInput | Actor_MediaUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: Actor_MediaScalarWhereInput | Actor_MediaScalarWhereInput[]
  }

  export type WatchListUpdateManyWithoutMediaNestedInput = {
    create?: XOR<WatchListCreateWithoutMediaInput, WatchListUncheckedCreateWithoutMediaInput> | WatchListCreateWithoutMediaInput[] | WatchListUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutMediaInput | WatchListCreateOrConnectWithoutMediaInput[]
    upsert?: WatchListUpsertWithWhereUniqueWithoutMediaInput | WatchListUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: WatchListCreateManyMediaInputEnvelope
    set?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    disconnect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    delete?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    update?: WatchListUpdateWithWhereUniqueWithoutMediaInput | WatchListUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: WatchListUpdateManyWithWhereWithoutMediaInput | WatchListUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: WatchListScalarWhereInput | WatchListScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutMediaNestedInput = {
    create?: XOR<RatingCreateWithoutMediaInput, RatingUncheckedCreateWithoutMediaInput> | RatingCreateWithoutMediaInput[] | RatingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutMediaInput | RatingCreateOrConnectWithoutMediaInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutMediaInput | RatingUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: RatingCreateManyMediaInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutMediaInput | RatingUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutMediaInput | RatingUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type SeasonUpdateManyWithoutMediaNestedInput = {
    create?: XOR<SeasonCreateWithoutMediaInput, SeasonUncheckedCreateWithoutMediaInput> | SeasonCreateWithoutMediaInput[] | SeasonUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutMediaInput | SeasonCreateOrConnectWithoutMediaInput[]
    upsert?: SeasonUpsertWithWhereUniqueWithoutMediaInput | SeasonUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: SeasonCreateManyMediaInputEnvelope
    set?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    disconnect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    delete?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    update?: SeasonUpdateWithWhereUniqueWithoutMediaInput | SeasonUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: SeasonUpdateManyWithWhereWithoutMediaInput | SeasonUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
  }

  export type WatchingUpdateManyWithoutMediaNestedInput = {
    create?: XOR<WatchingCreateWithoutMediaInput, WatchingUncheckedCreateWithoutMediaInput> | WatchingCreateWithoutMediaInput[] | WatchingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutMediaInput | WatchingCreateOrConnectWithoutMediaInput[]
    upsert?: WatchingUpsertWithWhereUniqueWithoutMediaInput | WatchingUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: WatchingCreateManyMediaInputEnvelope
    set?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    disconnect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    delete?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    update?: WatchingUpdateWithWhereUniqueWithoutMediaInput | WatchingUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: WatchingUpdateManyWithWhereWithoutMediaInput | WatchingUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: WatchingScalarWhereInput | WatchingScalarWhereInput[]
  }

  export type Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<Media_PlatformCreateWithoutMediaInput, Media_PlatformUncheckedCreateWithoutMediaInput> | Media_PlatformCreateWithoutMediaInput[] | Media_PlatformUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Media_PlatformCreateOrConnectWithoutMediaInput | Media_PlatformCreateOrConnectWithoutMediaInput[]
    upsert?: Media_PlatformUpsertWithWhereUniqueWithoutMediaInput | Media_PlatformUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: Media_PlatformCreateManyMediaInputEnvelope
    set?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    disconnect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    delete?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    connect?: Media_PlatformWhereUniqueInput | Media_PlatformWhereUniqueInput[]
    update?: Media_PlatformUpdateWithWhereUniqueWithoutMediaInput | Media_PlatformUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: Media_PlatformUpdateManyWithWhereWithoutMediaInput | Media_PlatformUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: Media_PlatformScalarWhereInput | Media_PlatformScalarWhereInput[]
  }

  export type Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<Categorie_MovieCreateWithoutMediaInput, Categorie_MovieUncheckedCreateWithoutMediaInput> | Categorie_MovieCreateWithoutMediaInput[] | Categorie_MovieUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Categorie_MovieCreateOrConnectWithoutMediaInput | Categorie_MovieCreateOrConnectWithoutMediaInput[]
    upsert?: Categorie_MovieUpsertWithWhereUniqueWithoutMediaInput | Categorie_MovieUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: Categorie_MovieCreateManyMediaInputEnvelope
    set?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    disconnect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    delete?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    connect?: Categorie_MovieWhereUniqueInput | Categorie_MovieWhereUniqueInput[]
    update?: Categorie_MovieUpdateWithWhereUniqueWithoutMediaInput | Categorie_MovieUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: Categorie_MovieUpdateManyWithWhereWithoutMediaInput | Categorie_MovieUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: Categorie_MovieScalarWhereInput | Categorie_MovieScalarWhereInput[]
  }

  export type Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<Actor_MediaCreateWithoutMediaInput, Actor_MediaUncheckedCreateWithoutMediaInput> | Actor_MediaCreateWithoutMediaInput[] | Actor_MediaUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutMediaInput | Actor_MediaCreateOrConnectWithoutMediaInput[]
    upsert?: Actor_MediaUpsertWithWhereUniqueWithoutMediaInput | Actor_MediaUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: Actor_MediaCreateManyMediaInputEnvelope
    set?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    disconnect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    delete?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    update?: Actor_MediaUpdateWithWhereUniqueWithoutMediaInput | Actor_MediaUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: Actor_MediaUpdateManyWithWhereWithoutMediaInput | Actor_MediaUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: Actor_MediaScalarWhereInput | Actor_MediaScalarWhereInput[]
  }

  export type WatchListUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<WatchListCreateWithoutMediaInput, WatchListUncheckedCreateWithoutMediaInput> | WatchListCreateWithoutMediaInput[] | WatchListUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchListCreateOrConnectWithoutMediaInput | WatchListCreateOrConnectWithoutMediaInput[]
    upsert?: WatchListUpsertWithWhereUniqueWithoutMediaInput | WatchListUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: WatchListCreateManyMediaInputEnvelope
    set?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    disconnect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    delete?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    connect?: WatchListWhereUniqueInput | WatchListWhereUniqueInput[]
    update?: WatchListUpdateWithWhereUniqueWithoutMediaInput | WatchListUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: WatchListUpdateManyWithWhereWithoutMediaInput | WatchListUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: WatchListScalarWhereInput | WatchListScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<RatingCreateWithoutMediaInput, RatingUncheckedCreateWithoutMediaInput> | RatingCreateWithoutMediaInput[] | RatingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutMediaInput | RatingCreateOrConnectWithoutMediaInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutMediaInput | RatingUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: RatingCreateManyMediaInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutMediaInput | RatingUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutMediaInput | RatingUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type SeasonUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<SeasonCreateWithoutMediaInput, SeasonUncheckedCreateWithoutMediaInput> | SeasonCreateWithoutMediaInput[] | SeasonUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SeasonCreateOrConnectWithoutMediaInput | SeasonCreateOrConnectWithoutMediaInput[]
    upsert?: SeasonUpsertWithWhereUniqueWithoutMediaInput | SeasonUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: SeasonCreateManyMediaInputEnvelope
    set?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    disconnect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    delete?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    connect?: SeasonWhereUniqueInput | SeasonWhereUniqueInput[]
    update?: SeasonUpdateWithWhereUniqueWithoutMediaInput | SeasonUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: SeasonUpdateManyWithWhereWithoutMediaInput | SeasonUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
  }

  export type WatchingUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<WatchingCreateWithoutMediaInput, WatchingUncheckedCreateWithoutMediaInput> | WatchingCreateWithoutMediaInput[] | WatchingUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: WatchingCreateOrConnectWithoutMediaInput | WatchingCreateOrConnectWithoutMediaInput[]
    upsert?: WatchingUpsertWithWhereUniqueWithoutMediaInput | WatchingUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: WatchingCreateManyMediaInputEnvelope
    set?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    disconnect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    delete?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    connect?: WatchingWhereUniqueInput | WatchingWhereUniqueInput[]
    update?: WatchingUpdateWithWhereUniqueWithoutMediaInput | WatchingUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: WatchingUpdateManyWithWhereWithoutMediaInput | WatchingUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: WatchingScalarWhereInput | WatchingScalarWhereInput[]
  }

  export type ActorCreateNestedOneWithoutMediaInput = {
    create?: XOR<ActorCreateWithoutMediaInput, ActorUncheckedCreateWithoutMediaInput>
    connectOrCreate?: ActorCreateOrConnectWithoutMediaInput
    connect?: ActorWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutActorInput = {
    create?: XOR<MediaCreateWithoutActorInput, MediaUncheckedCreateWithoutActorInput>
    connectOrCreate?: MediaCreateOrConnectWithoutActorInput
    connect?: MediaWhereUniqueInput
  }

  export type ActorUpdateOneRequiredWithoutMediaNestedInput = {
    create?: XOR<ActorCreateWithoutMediaInput, ActorUncheckedCreateWithoutMediaInput>
    connectOrCreate?: ActorCreateOrConnectWithoutMediaInput
    upsert?: ActorUpsertWithoutMediaInput
    connect?: ActorWhereUniqueInput
    update?: XOR<XOR<ActorUpdateToOneWithWhereWithoutMediaInput, ActorUpdateWithoutMediaInput>, ActorUncheckedUpdateWithoutMediaInput>
  }

  export type MediaUpdateOneRequiredWithoutActorNestedInput = {
    create?: XOR<MediaCreateWithoutActorInput, MediaUncheckedCreateWithoutActorInput>
    connectOrCreate?: MediaCreateOrConnectWithoutActorInput
    upsert?: MediaUpsertWithoutActorInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutActorInput, MediaUpdateWithoutActorInput>, MediaUncheckedUpdateWithoutActorInput>
  }

  export type Actor_MediaCreateNestedManyWithoutActorInput = {
    create?: XOR<Actor_MediaCreateWithoutActorInput, Actor_MediaUncheckedCreateWithoutActorInput> | Actor_MediaCreateWithoutActorInput[] | Actor_MediaUncheckedCreateWithoutActorInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutActorInput | Actor_MediaCreateOrConnectWithoutActorInput[]
    createMany?: Actor_MediaCreateManyActorInputEnvelope
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
  }

  export type Actor_MediaUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<Actor_MediaCreateWithoutActorInput, Actor_MediaUncheckedCreateWithoutActorInput> | Actor_MediaCreateWithoutActorInput[] | Actor_MediaUncheckedCreateWithoutActorInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutActorInput | Actor_MediaCreateOrConnectWithoutActorInput[]
    createMany?: Actor_MediaCreateManyActorInputEnvelope
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type Actor_MediaUpdateManyWithoutActorNestedInput = {
    create?: XOR<Actor_MediaCreateWithoutActorInput, Actor_MediaUncheckedCreateWithoutActorInput> | Actor_MediaCreateWithoutActorInput[] | Actor_MediaUncheckedCreateWithoutActorInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutActorInput | Actor_MediaCreateOrConnectWithoutActorInput[]
    upsert?: Actor_MediaUpsertWithWhereUniqueWithoutActorInput | Actor_MediaUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: Actor_MediaCreateManyActorInputEnvelope
    set?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    disconnect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    delete?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    update?: Actor_MediaUpdateWithWhereUniqueWithoutActorInput | Actor_MediaUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: Actor_MediaUpdateManyWithWhereWithoutActorInput | Actor_MediaUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: Actor_MediaScalarWhereInput | Actor_MediaScalarWhereInput[]
  }

  export type Actor_MediaUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<Actor_MediaCreateWithoutActorInput, Actor_MediaUncheckedCreateWithoutActorInput> | Actor_MediaCreateWithoutActorInput[] | Actor_MediaUncheckedCreateWithoutActorInput[]
    connectOrCreate?: Actor_MediaCreateOrConnectWithoutActorInput | Actor_MediaCreateOrConnectWithoutActorInput[]
    upsert?: Actor_MediaUpsertWithWhereUniqueWithoutActorInput | Actor_MediaUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: Actor_MediaCreateManyActorInputEnvelope
    set?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    disconnect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    delete?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    connect?: Actor_MediaWhereUniqueInput | Actor_MediaWhereUniqueInput[]
    update?: Actor_MediaUpdateWithWhereUniqueWithoutActorInput | Actor_MediaUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: Actor_MediaUpdateManyWithWhereWithoutActorInput | Actor_MediaUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: Actor_MediaScalarWhereInput | Actor_MediaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWatchListInput = {
    create?: XOR<UserCreateWithoutWatchListInput, UserUncheckedCreateWithoutWatchListInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchListInput
    connect?: UserWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutWatchlistInput = {
    create?: XOR<MediaCreateWithoutWatchlistInput, MediaUncheckedCreateWithoutWatchlistInput>
    connectOrCreate?: MediaCreateOrConnectWithoutWatchlistInput
    connect?: MediaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWatchListNestedInput = {
    create?: XOR<UserCreateWithoutWatchListInput, UserUncheckedCreateWithoutWatchListInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchListInput
    upsert?: UserUpsertWithoutWatchListInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWatchListInput, UserUpdateWithoutWatchListInput>, UserUncheckedUpdateWithoutWatchListInput>
  }

  export type MediaUpdateOneRequiredWithoutWatchlistNestedInput = {
    create?: XOR<MediaCreateWithoutWatchlistInput, MediaUncheckedCreateWithoutWatchlistInput>
    connectOrCreate?: MediaCreateOrConnectWithoutWatchlistInput
    upsert?: MediaUpsertWithoutWatchlistInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutWatchlistInput, MediaUpdateWithoutWatchlistInput>, MediaUncheckedUpdateWithoutWatchlistInput>
  }

  export type UserCreateNestedOneWithoutRatingInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    connect?: UserWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutRatingInput = {
    create?: XOR<MediaCreateWithoutRatingInput, MediaUncheckedCreateWithoutRatingInput>
    connectOrCreate?: MediaCreateOrConnectWithoutRatingInput
    connect?: MediaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    upsert?: UserUpsertWithoutRatingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingInput, UserUpdateWithoutRatingInput>, UserUncheckedUpdateWithoutRatingInput>
  }

  export type MediaUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<MediaCreateWithoutRatingInput, MediaUncheckedCreateWithoutRatingInput>
    connectOrCreate?: MediaCreateOrConnectWithoutRatingInput
    upsert?: MediaUpsertWithoutRatingInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutRatingInput, MediaUpdateWithoutRatingInput>, MediaUncheckedUpdateWithoutRatingInput>
  }

  export type MediaCreateNestedOneWithoutSeasonInput = {
    create?: XOR<MediaCreateWithoutSeasonInput, MediaUncheckedCreateWithoutSeasonInput>
    connectOrCreate?: MediaCreateOrConnectWithoutSeasonInput
    connect?: MediaWhereUniqueInput
  }

  export type EpisodeCreateNestedManyWithoutSeasonInput = {
    create?: XOR<EpisodeCreateWithoutSeasonInput, EpisodeUncheckedCreateWithoutSeasonInput> | EpisodeCreateWithoutSeasonInput[] | EpisodeUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutSeasonInput | EpisodeCreateOrConnectWithoutSeasonInput[]
    createMany?: EpisodeCreateManySeasonInputEnvelope
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
  }

  export type EpisodeUncheckedCreateNestedManyWithoutSeasonInput = {
    create?: XOR<EpisodeCreateWithoutSeasonInput, EpisodeUncheckedCreateWithoutSeasonInput> | EpisodeCreateWithoutSeasonInput[] | EpisodeUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutSeasonInput | EpisodeCreateOrConnectWithoutSeasonInput[]
    createMany?: EpisodeCreateManySeasonInputEnvelope
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
  }

  export type MediaUpdateOneRequiredWithoutSeasonNestedInput = {
    create?: XOR<MediaCreateWithoutSeasonInput, MediaUncheckedCreateWithoutSeasonInput>
    connectOrCreate?: MediaCreateOrConnectWithoutSeasonInput
    upsert?: MediaUpsertWithoutSeasonInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutSeasonInput, MediaUpdateWithoutSeasonInput>, MediaUncheckedUpdateWithoutSeasonInput>
  }

  export type EpisodeUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<EpisodeCreateWithoutSeasonInput, EpisodeUncheckedCreateWithoutSeasonInput> | EpisodeCreateWithoutSeasonInput[] | EpisodeUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutSeasonInput | EpisodeCreateOrConnectWithoutSeasonInput[]
    upsert?: EpisodeUpsertWithWhereUniqueWithoutSeasonInput | EpisodeUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: EpisodeCreateManySeasonInputEnvelope
    set?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    disconnect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    delete?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    update?: EpisodeUpdateWithWhereUniqueWithoutSeasonInput | EpisodeUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: EpisodeUpdateManyWithWhereWithoutSeasonInput | EpisodeUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
  }

  export type EpisodeUncheckedUpdateManyWithoutSeasonNestedInput = {
    create?: XOR<EpisodeCreateWithoutSeasonInput, EpisodeUncheckedCreateWithoutSeasonInput> | EpisodeCreateWithoutSeasonInput[] | EpisodeUncheckedCreateWithoutSeasonInput[]
    connectOrCreate?: EpisodeCreateOrConnectWithoutSeasonInput | EpisodeCreateOrConnectWithoutSeasonInput[]
    upsert?: EpisodeUpsertWithWhereUniqueWithoutSeasonInput | EpisodeUpsertWithWhereUniqueWithoutSeasonInput[]
    createMany?: EpisodeCreateManySeasonInputEnvelope
    set?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    disconnect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    delete?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    connect?: EpisodeWhereUniqueInput | EpisodeWhereUniqueInput[]
    update?: EpisodeUpdateWithWhereUniqueWithoutSeasonInput | EpisodeUpdateWithWhereUniqueWithoutSeasonInput[]
    updateMany?: EpisodeUpdateManyWithWhereWithoutSeasonInput | EpisodeUpdateManyWithWhereWithoutSeasonInput[]
    deleteMany?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
  }

  export type SeasonCreateNestedOneWithoutEpisodesInput = {
    create?: XOR<SeasonCreateWithoutEpisodesInput, SeasonUncheckedCreateWithoutEpisodesInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutEpisodesInput
    connect?: SeasonWhereUniqueInput
  }

  export type SeasonUpdateOneWithoutEpisodesNestedInput = {
    create?: XOR<SeasonCreateWithoutEpisodesInput, SeasonUncheckedCreateWithoutEpisodesInput>
    connectOrCreate?: SeasonCreateOrConnectWithoutEpisodesInput
    upsert?: SeasonUpsertWithoutEpisodesInput
    disconnect?: SeasonWhereInput | boolean
    delete?: SeasonWhereInput | boolean
    connect?: SeasonWhereUniqueInput
    update?: XOR<XOR<SeasonUpdateToOneWithWhereWithoutEpisodesInput, SeasonUpdateWithoutEpisodesInput>, SeasonUncheckedUpdateWithoutEpisodesInput>
  }

  export type CategorieCreateNestedOneWithoutMediaInput = {
    create?: XOR<CategorieCreateWithoutMediaInput, CategorieUncheckedCreateWithoutMediaInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutMediaInput
    connect?: CategorieWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<MediaCreateWithoutCategoriesInput, MediaUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MediaCreateOrConnectWithoutCategoriesInput
    connect?: MediaWhereUniqueInput
  }

  export type CategorieUpdateOneRequiredWithoutMediaNestedInput = {
    create?: XOR<CategorieCreateWithoutMediaInput, CategorieUncheckedCreateWithoutMediaInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutMediaInput
    upsert?: CategorieUpsertWithoutMediaInput
    connect?: CategorieWhereUniqueInput
    update?: XOR<XOR<CategorieUpdateToOneWithWhereWithoutMediaInput, CategorieUpdateWithoutMediaInput>, CategorieUncheckedUpdateWithoutMediaInput>
  }

  export type MediaUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<MediaCreateWithoutCategoriesInput, MediaUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MediaCreateOrConnectWithoutCategoriesInput
    upsert?: MediaUpsertWithoutCategoriesInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutCategoriesInput, MediaUpdateWithoutCategoriesInput>, MediaUncheckedUpdateWithoutCategoriesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type User_PlatformCreateWithoutUserInput = {
    platform: PlatformCreateNestedOneWithoutUserInput
  }

  export type User_PlatformUncheckedCreateWithoutUserInput = {
    id?: number
    platformId: number
  }

  export type User_PlatformCreateOrConnectWithoutUserInput = {
    where: User_PlatformWhereUniqueInput
    create: XOR<User_PlatformCreateWithoutUserInput, User_PlatformUncheckedCreateWithoutUserInput>
  }

  export type User_PlatformCreateManyUserInputEnvelope = {
    data: User_PlatformCreateManyUserInput | User_PlatformCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WatchingCreateWithoutUserInput = {
    created_at?: Date | string
    media: MediaCreateNestedOneWithoutWatchingInput
  }

  export type WatchingUncheckedCreateWithoutUserInput = {
    id?: number
    created_at?: Date | string
    mediaId: number
  }

  export type WatchingCreateOrConnectWithoutUserInput = {
    where: WatchingWhereUniqueInput
    create: XOR<WatchingCreateWithoutUserInput, WatchingUncheckedCreateWithoutUserInput>
  }

  export type WatchingCreateManyUserInputEnvelope = {
    data: WatchingCreateManyUserInput | WatchingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WatchListCreateWithoutUserInput = {
    created_at?: Date | string
    media: MediaCreateNestedOneWithoutWatchlistInput
  }

  export type WatchListUncheckedCreateWithoutUserInput = {
    id?: number
    created_at?: Date | string
    mediaId: number
  }

  export type WatchListCreateOrConnectWithoutUserInput = {
    where: WatchListWhereUniqueInput
    create: XOR<WatchListCreateWithoutUserInput, WatchListUncheckedCreateWithoutUserInput>
  }

  export type WatchListCreateManyUserInputEnvelope = {
    data: WatchListCreateManyUserInput | WatchListCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutUserInput = {
    score?: number
    createdAt?: Date | string
    media: MediaCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutUserInput = {
    id?: number
    score?: number
    mediaId: number
    createdAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutUserInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateManyUserInputEnvelope = {
    data: RatingCreateManyUserInput | RatingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type User_PlatformUpsertWithWhereUniqueWithoutUserInput = {
    where: User_PlatformWhereUniqueInput
    update: XOR<User_PlatformUpdateWithoutUserInput, User_PlatformUncheckedUpdateWithoutUserInput>
    create: XOR<User_PlatformCreateWithoutUserInput, User_PlatformUncheckedCreateWithoutUserInput>
  }

  export type User_PlatformUpdateWithWhereUniqueWithoutUserInput = {
    where: User_PlatformWhereUniqueInput
    data: XOR<User_PlatformUpdateWithoutUserInput, User_PlatformUncheckedUpdateWithoutUserInput>
  }

  export type User_PlatformUpdateManyWithWhereWithoutUserInput = {
    where: User_PlatformScalarWhereInput
    data: XOR<User_PlatformUpdateManyMutationInput, User_PlatformUncheckedUpdateManyWithoutUserInput>
  }

  export type User_PlatformScalarWhereInput = {
    AND?: User_PlatformScalarWhereInput | User_PlatformScalarWhereInput[]
    OR?: User_PlatformScalarWhereInput[]
    NOT?: User_PlatformScalarWhereInput | User_PlatformScalarWhereInput[]
    id?: IntFilter<"User_Platform"> | number
    userId?: IntFilter<"User_Platform"> | number
    platformId?: IntFilter<"User_Platform"> | number
  }

  export type WatchingUpsertWithWhereUniqueWithoutUserInput = {
    where: WatchingWhereUniqueInput
    update: XOR<WatchingUpdateWithoutUserInput, WatchingUncheckedUpdateWithoutUserInput>
    create: XOR<WatchingCreateWithoutUserInput, WatchingUncheckedCreateWithoutUserInput>
  }

  export type WatchingUpdateWithWhereUniqueWithoutUserInput = {
    where: WatchingWhereUniqueInput
    data: XOR<WatchingUpdateWithoutUserInput, WatchingUncheckedUpdateWithoutUserInput>
  }

  export type WatchingUpdateManyWithWhereWithoutUserInput = {
    where: WatchingScalarWhereInput
    data: XOR<WatchingUpdateManyMutationInput, WatchingUncheckedUpdateManyWithoutUserInput>
  }

  export type WatchingScalarWhereInput = {
    AND?: WatchingScalarWhereInput | WatchingScalarWhereInput[]
    OR?: WatchingScalarWhereInput[]
    NOT?: WatchingScalarWhereInput | WatchingScalarWhereInput[]
    id?: IntFilter<"Watching"> | number
    created_at?: DateTimeFilter<"Watching"> | Date | string
    userId?: IntFilter<"Watching"> | number
    mediaId?: IntFilter<"Watching"> | number
  }

  export type WatchListUpsertWithWhereUniqueWithoutUserInput = {
    where: WatchListWhereUniqueInput
    update: XOR<WatchListUpdateWithoutUserInput, WatchListUncheckedUpdateWithoutUserInput>
    create: XOR<WatchListCreateWithoutUserInput, WatchListUncheckedCreateWithoutUserInput>
  }

  export type WatchListUpdateWithWhereUniqueWithoutUserInput = {
    where: WatchListWhereUniqueInput
    data: XOR<WatchListUpdateWithoutUserInput, WatchListUncheckedUpdateWithoutUserInput>
  }

  export type WatchListUpdateManyWithWhereWithoutUserInput = {
    where: WatchListScalarWhereInput
    data: XOR<WatchListUpdateManyMutationInput, WatchListUncheckedUpdateManyWithoutUserInput>
  }

  export type WatchListScalarWhereInput = {
    AND?: WatchListScalarWhereInput | WatchListScalarWhereInput[]
    OR?: WatchListScalarWhereInput[]
    NOT?: WatchListScalarWhereInput | WatchListScalarWhereInput[]
    id?: IntFilter<"WatchList"> | number
    created_at?: DateTimeFilter<"WatchList"> | Date | string
    userId?: IntFilter<"WatchList"> | number
    mediaId?: IntFilter<"WatchList"> | number
  }

  export type RatingUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithWhereWithoutUserInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutUserInput>
  }

  export type RatingScalarWhereInput = {
    AND?: RatingScalarWhereInput | RatingScalarWhereInput[]
    OR?: RatingScalarWhereInput[]
    NOT?: RatingScalarWhereInput | RatingScalarWhereInput[]
    id?: IntFilter<"Rating"> | number
    score?: IntFilter<"Rating"> | number
    userId?: IntFilter<"Rating"> | number
    mediaId?: IntFilter<"Rating"> | number
    createdAt?: DateTimeFilter<"Rating"> | Date | string
  }

  export type UserCreateWithoutPlatformInput = {
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    watching?: WatchingCreateNestedManyWithoutUserInput
    WatchList?: WatchListCreateNestedManyWithoutUserInput
    rating?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlatformInput = {
    id?: number
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    watching?: WatchingUncheckedCreateNestedManyWithoutUserInput
    WatchList?: WatchListUncheckedCreateNestedManyWithoutUserInput
    rating?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPlatformInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlatformInput, UserUncheckedCreateWithoutPlatformInput>
  }

  export type PlatformCreateWithoutUserInput = {
    title: string
    logo_url: string
    link: string
    media?: Media_PlatformCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    logo_url: string
    link: string
    media?: Media_PlatformUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformCreateOrConnectWithoutUserInput = {
    where: PlatformWhereUniqueInput
    create: XOR<PlatformCreateWithoutUserInput, PlatformUncheckedCreateWithoutUserInput>
  }

  export type UserUpsertWithoutPlatformInput = {
    update: XOR<UserUpdateWithoutPlatformInput, UserUncheckedUpdateWithoutPlatformInput>
    create: XOR<UserCreateWithoutPlatformInput, UserUncheckedCreateWithoutPlatformInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlatformInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlatformInput, UserUncheckedUpdateWithoutPlatformInput>
  }

  export type UserUpdateWithoutPlatformInput = {
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    watching?: WatchingUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUpdateManyWithoutUserNestedInput
    rating?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    watching?: WatchingUncheckedUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUncheckedUpdateManyWithoutUserNestedInput
    rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlatformUpsertWithoutUserInput = {
    update: XOR<PlatformUpdateWithoutUserInput, PlatformUncheckedUpdateWithoutUserInput>
    create: XOR<PlatformCreateWithoutUserInput, PlatformUncheckedCreateWithoutUserInput>
    where?: PlatformWhereInput
  }

  export type PlatformUpdateToOneWithWhereWithoutUserInput = {
    where?: PlatformWhereInput
    data: XOR<PlatformUpdateWithoutUserInput, PlatformUncheckedUpdateWithoutUserInput>
  }

  export type PlatformUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    media?: Media_PlatformUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    media?: Media_PlatformUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type User_PlatformCreateWithoutPlatformInput = {
    user: UserCreateNestedOneWithoutPlatformInput
  }

  export type User_PlatformUncheckedCreateWithoutPlatformInput = {
    id?: number
    userId: number
  }

  export type User_PlatformCreateOrConnectWithoutPlatformInput = {
    where: User_PlatformWhereUniqueInput
    create: XOR<User_PlatformCreateWithoutPlatformInput, User_PlatformUncheckedCreateWithoutPlatformInput>
  }

  export type User_PlatformCreateManyPlatformInputEnvelope = {
    data: User_PlatformCreateManyPlatformInput | User_PlatformCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type Media_PlatformCreateWithoutPlatformInput = {
    media: MediaCreateNestedOneWithoutPlatformsInput
  }

  export type Media_PlatformUncheckedCreateWithoutPlatformInput = {
    id?: number
    mediaId: number
  }

  export type Media_PlatformCreateOrConnectWithoutPlatformInput = {
    where: Media_PlatformWhereUniqueInput
    create: XOR<Media_PlatformCreateWithoutPlatformInput, Media_PlatformUncheckedCreateWithoutPlatformInput>
  }

  export type Media_PlatformCreateManyPlatformInputEnvelope = {
    data: Media_PlatformCreateManyPlatformInput | Media_PlatformCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type User_PlatformUpsertWithWhereUniqueWithoutPlatformInput = {
    where: User_PlatformWhereUniqueInput
    update: XOR<User_PlatformUpdateWithoutPlatformInput, User_PlatformUncheckedUpdateWithoutPlatformInput>
    create: XOR<User_PlatformCreateWithoutPlatformInput, User_PlatformUncheckedCreateWithoutPlatformInput>
  }

  export type User_PlatformUpdateWithWhereUniqueWithoutPlatformInput = {
    where: User_PlatformWhereUniqueInput
    data: XOR<User_PlatformUpdateWithoutPlatformInput, User_PlatformUncheckedUpdateWithoutPlatformInput>
  }

  export type User_PlatformUpdateManyWithWhereWithoutPlatformInput = {
    where: User_PlatformScalarWhereInput
    data: XOR<User_PlatformUpdateManyMutationInput, User_PlatformUncheckedUpdateManyWithoutPlatformInput>
  }

  export type Media_PlatformUpsertWithWhereUniqueWithoutPlatformInput = {
    where: Media_PlatformWhereUniqueInput
    update: XOR<Media_PlatformUpdateWithoutPlatformInput, Media_PlatformUncheckedUpdateWithoutPlatformInput>
    create: XOR<Media_PlatformCreateWithoutPlatformInput, Media_PlatformUncheckedCreateWithoutPlatformInput>
  }

  export type Media_PlatformUpdateWithWhereUniqueWithoutPlatformInput = {
    where: Media_PlatformWhereUniqueInput
    data: XOR<Media_PlatformUpdateWithoutPlatformInput, Media_PlatformUncheckedUpdateWithoutPlatformInput>
  }

  export type Media_PlatformUpdateManyWithWhereWithoutPlatformInput = {
    where: Media_PlatformScalarWhereInput
    data: XOR<Media_PlatformUpdateManyMutationInput, Media_PlatformUncheckedUpdateManyWithoutPlatformInput>
  }

  export type Media_PlatformScalarWhereInput = {
    AND?: Media_PlatformScalarWhereInput | Media_PlatformScalarWhereInput[]
    OR?: Media_PlatformScalarWhereInput[]
    NOT?: Media_PlatformScalarWhereInput | Media_PlatformScalarWhereInput[]
    id?: IntFilter<"Media_Platform"> | number
    mediaId?: IntFilter<"Media_Platform"> | number
    platformId?: IntFilter<"Media_Platform"> | number
  }

  export type MediaCreateWithoutPlatformsInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    categories?: Categorie_MovieCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaCreateNestedManyWithoutMediaInput
    watchlist?: WatchListCreateNestedManyWithoutMediaInput
    Rating?: RatingCreateNestedManyWithoutMediaInput
    season?: SeasonCreateNestedManyWithoutMediaInput
    watching?: WatchingCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutPlatformsInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    categories?: Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaUncheckedCreateNestedManyWithoutMediaInput
    watchlist?: WatchListUncheckedCreateNestedManyWithoutMediaInput
    Rating?: RatingUncheckedCreateNestedManyWithoutMediaInput
    season?: SeasonUncheckedCreateNestedManyWithoutMediaInput
    watching?: WatchingUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutPlatformsInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutPlatformsInput, MediaUncheckedCreateWithoutPlatformsInput>
  }

  export type PlatformCreateWithoutMediaInput = {
    title: string
    logo_url: string
    link: string
    user?: User_PlatformCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateWithoutMediaInput = {
    id?: number
    title: string
    logo_url: string
    link: string
    user?: User_PlatformUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformCreateOrConnectWithoutMediaInput = {
    where: PlatformWhereUniqueInput
    create: XOR<PlatformCreateWithoutMediaInput, PlatformUncheckedCreateWithoutMediaInput>
  }

  export type MediaUpsertWithoutPlatformsInput = {
    update: XOR<MediaUpdateWithoutPlatformsInput, MediaUncheckedUpdateWithoutPlatformsInput>
    create: XOR<MediaCreateWithoutPlatformsInput, MediaUncheckedCreateWithoutPlatformsInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutPlatformsInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutPlatformsInput, MediaUncheckedUpdateWithoutPlatformsInput>
  }

  export type MediaUpdateWithoutPlatformsInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    categories?: Categorie_MovieUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUpdateManyWithoutMediaNestedInput
    Rating?: RatingUpdateManyWithoutMediaNestedInput
    season?: SeasonUpdateManyWithoutMediaNestedInput
    watching?: WatchingUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutPlatformsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    categories?: Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUncheckedUpdateManyWithoutMediaNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutMediaNestedInput
    season?: SeasonUncheckedUpdateManyWithoutMediaNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type PlatformUpsertWithoutMediaInput = {
    update: XOR<PlatformUpdateWithoutMediaInput, PlatformUncheckedUpdateWithoutMediaInput>
    create: XOR<PlatformCreateWithoutMediaInput, PlatformUncheckedCreateWithoutMediaInput>
    where?: PlatformWhereInput
  }

  export type PlatformUpdateToOneWithWhereWithoutMediaInput = {
    where?: PlatformWhereInput
    data: XOR<PlatformUpdateWithoutMediaInput, PlatformUncheckedUpdateWithoutMediaInput>
  }

  export type PlatformUpdateWithoutMediaInput = {
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    user?: User_PlatformUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    user?: User_PlatformUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type UserCreateWithoutWatchingInput = {
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformCreateNestedManyWithoutUserInput
    WatchList?: WatchListCreateNestedManyWithoutUserInput
    rating?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWatchingInput = {
    id?: number
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformUncheckedCreateNestedManyWithoutUserInput
    WatchList?: WatchListUncheckedCreateNestedManyWithoutUserInput
    rating?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWatchingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
  }

  export type MediaCreateWithoutWatchingInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaCreateNestedManyWithoutMediaInput
    watchlist?: WatchListCreateNestedManyWithoutMediaInput
    Rating?: RatingCreateNestedManyWithoutMediaInput
    season?: SeasonCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutWatchingInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformUncheckedCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaUncheckedCreateNestedManyWithoutMediaInput
    watchlist?: WatchListUncheckedCreateNestedManyWithoutMediaInput
    Rating?: RatingUncheckedCreateNestedManyWithoutMediaInput
    season?: SeasonUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutWatchingInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutWatchingInput, MediaUncheckedCreateWithoutWatchingInput>
  }

  export type UserUpsertWithoutWatchingInput = {
    update: XOR<UserUpdateWithoutWatchingInput, UserUncheckedUpdateWithoutWatchingInput>
    create: XOR<UserCreateWithoutWatchingInput, UserUncheckedCreateWithoutWatchingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWatchingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWatchingInput, UserUncheckedUpdateWithoutWatchingInput>
  }

  export type UserUpdateWithoutWatchingInput = {
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUpdateManyWithoutUserNestedInput
    rating?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWatchingInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUncheckedUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUncheckedUpdateManyWithoutUserNestedInput
    rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MediaUpsertWithoutWatchingInput = {
    update: XOR<MediaUpdateWithoutWatchingInput, MediaUncheckedUpdateWithoutWatchingInput>
    create: XOR<MediaCreateWithoutWatchingInput, MediaUncheckedCreateWithoutWatchingInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutWatchingInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutWatchingInput, MediaUncheckedUpdateWithoutWatchingInput>
  }

  export type MediaUpdateWithoutWatchingInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUpdateManyWithoutMediaNestedInput
    Rating?: RatingUpdateManyWithoutMediaNestedInput
    season?: SeasonUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutWatchingInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUncheckedUpdateManyWithoutMediaNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutMediaNestedInput
    season?: SeasonUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type Categorie_MovieCreateWithoutCategorieInput = {
    media: MediaCreateNestedOneWithoutCategoriesInput
  }

  export type Categorie_MovieUncheckedCreateWithoutCategorieInput = {
    id?: number
    mediaId: number
  }

  export type Categorie_MovieCreateOrConnectWithoutCategorieInput = {
    where: Categorie_MovieWhereUniqueInput
    create: XOR<Categorie_MovieCreateWithoutCategorieInput, Categorie_MovieUncheckedCreateWithoutCategorieInput>
  }

  export type Categorie_MovieCreateManyCategorieInputEnvelope = {
    data: Categorie_MovieCreateManyCategorieInput | Categorie_MovieCreateManyCategorieInput[]
    skipDuplicates?: boolean
  }

  export type Categorie_MovieUpsertWithWhereUniqueWithoutCategorieInput = {
    where: Categorie_MovieWhereUniqueInput
    update: XOR<Categorie_MovieUpdateWithoutCategorieInput, Categorie_MovieUncheckedUpdateWithoutCategorieInput>
    create: XOR<Categorie_MovieCreateWithoutCategorieInput, Categorie_MovieUncheckedCreateWithoutCategorieInput>
  }

  export type Categorie_MovieUpdateWithWhereUniqueWithoutCategorieInput = {
    where: Categorie_MovieWhereUniqueInput
    data: XOR<Categorie_MovieUpdateWithoutCategorieInput, Categorie_MovieUncheckedUpdateWithoutCategorieInput>
  }

  export type Categorie_MovieUpdateManyWithWhereWithoutCategorieInput = {
    where: Categorie_MovieScalarWhereInput
    data: XOR<Categorie_MovieUpdateManyMutationInput, Categorie_MovieUncheckedUpdateManyWithoutCategorieInput>
  }

  export type Categorie_MovieScalarWhereInput = {
    AND?: Categorie_MovieScalarWhereInput | Categorie_MovieScalarWhereInput[]
    OR?: Categorie_MovieScalarWhereInput[]
    NOT?: Categorie_MovieScalarWhereInput | Categorie_MovieScalarWhereInput[]
    id?: IntFilter<"Categorie_Movie"> | number
    categorieId?: IntFilter<"Categorie_Movie"> | number
    mediaId?: IntFilter<"Categorie_Movie"> | number
  }

  export type Media_PlatformCreateWithoutMediaInput = {
    platform: PlatformCreateNestedOneWithoutMediaInput
  }

  export type Media_PlatformUncheckedCreateWithoutMediaInput = {
    id?: number
    platformId: number
  }

  export type Media_PlatformCreateOrConnectWithoutMediaInput = {
    where: Media_PlatformWhereUniqueInput
    create: XOR<Media_PlatformCreateWithoutMediaInput, Media_PlatformUncheckedCreateWithoutMediaInput>
  }

  export type Media_PlatformCreateManyMediaInputEnvelope = {
    data: Media_PlatformCreateManyMediaInput | Media_PlatformCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type Categorie_MovieCreateWithoutMediaInput = {
    categorie: CategorieCreateNestedOneWithoutMediaInput
  }

  export type Categorie_MovieUncheckedCreateWithoutMediaInput = {
    id?: number
    categorieId: number
  }

  export type Categorie_MovieCreateOrConnectWithoutMediaInput = {
    where: Categorie_MovieWhereUniqueInput
    create: XOR<Categorie_MovieCreateWithoutMediaInput, Categorie_MovieUncheckedCreateWithoutMediaInput>
  }

  export type Categorie_MovieCreateManyMediaInputEnvelope = {
    data: Categorie_MovieCreateManyMediaInput | Categorie_MovieCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type Actor_MediaCreateWithoutMediaInput = {
    actor: ActorCreateNestedOneWithoutMediaInput
  }

  export type Actor_MediaUncheckedCreateWithoutMediaInput = {
    id?: number
    actorId: number
  }

  export type Actor_MediaCreateOrConnectWithoutMediaInput = {
    where: Actor_MediaWhereUniqueInput
    create: XOR<Actor_MediaCreateWithoutMediaInput, Actor_MediaUncheckedCreateWithoutMediaInput>
  }

  export type Actor_MediaCreateManyMediaInputEnvelope = {
    data: Actor_MediaCreateManyMediaInput | Actor_MediaCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type WatchListCreateWithoutMediaInput = {
    created_at?: Date | string
    user: UserCreateNestedOneWithoutWatchListInput
  }

  export type WatchListUncheckedCreateWithoutMediaInput = {
    id?: number
    created_at?: Date | string
    userId: number
  }

  export type WatchListCreateOrConnectWithoutMediaInput = {
    where: WatchListWhereUniqueInput
    create: XOR<WatchListCreateWithoutMediaInput, WatchListUncheckedCreateWithoutMediaInput>
  }

  export type WatchListCreateManyMediaInputEnvelope = {
    data: WatchListCreateManyMediaInput | WatchListCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutMediaInput = {
    score?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutMediaInput = {
    id?: number
    score?: number
    userId: number
    createdAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutMediaInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutMediaInput, RatingUncheckedCreateWithoutMediaInput>
  }

  export type RatingCreateManyMediaInputEnvelope = {
    data: RatingCreateManyMediaInput | RatingCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type SeasonCreateWithoutMediaInput = {
    number: number
    episodes?: EpisodeCreateNestedManyWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutMediaInput = {
    id?: number
    number: number
    episodes?: EpisodeUncheckedCreateNestedManyWithoutSeasonInput
  }

  export type SeasonCreateOrConnectWithoutMediaInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutMediaInput, SeasonUncheckedCreateWithoutMediaInput>
  }

  export type SeasonCreateManyMediaInputEnvelope = {
    data: SeasonCreateManyMediaInput | SeasonCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type WatchingCreateWithoutMediaInput = {
    created_at?: Date | string
    user: UserCreateNestedOneWithoutWatchingInput
  }

  export type WatchingUncheckedCreateWithoutMediaInput = {
    id?: number
    created_at?: Date | string
    userId: number
  }

  export type WatchingCreateOrConnectWithoutMediaInput = {
    where: WatchingWhereUniqueInput
    create: XOR<WatchingCreateWithoutMediaInput, WatchingUncheckedCreateWithoutMediaInput>
  }

  export type WatchingCreateManyMediaInputEnvelope = {
    data: WatchingCreateManyMediaInput | WatchingCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type Media_PlatformUpsertWithWhereUniqueWithoutMediaInput = {
    where: Media_PlatformWhereUniqueInput
    update: XOR<Media_PlatformUpdateWithoutMediaInput, Media_PlatformUncheckedUpdateWithoutMediaInput>
    create: XOR<Media_PlatformCreateWithoutMediaInput, Media_PlatformUncheckedCreateWithoutMediaInput>
  }

  export type Media_PlatformUpdateWithWhereUniqueWithoutMediaInput = {
    where: Media_PlatformWhereUniqueInput
    data: XOR<Media_PlatformUpdateWithoutMediaInput, Media_PlatformUncheckedUpdateWithoutMediaInput>
  }

  export type Media_PlatformUpdateManyWithWhereWithoutMediaInput = {
    where: Media_PlatformScalarWhereInput
    data: XOR<Media_PlatformUpdateManyMutationInput, Media_PlatformUncheckedUpdateManyWithoutMediaInput>
  }

  export type Categorie_MovieUpsertWithWhereUniqueWithoutMediaInput = {
    where: Categorie_MovieWhereUniqueInput
    update: XOR<Categorie_MovieUpdateWithoutMediaInput, Categorie_MovieUncheckedUpdateWithoutMediaInput>
    create: XOR<Categorie_MovieCreateWithoutMediaInput, Categorie_MovieUncheckedCreateWithoutMediaInput>
  }

  export type Categorie_MovieUpdateWithWhereUniqueWithoutMediaInput = {
    where: Categorie_MovieWhereUniqueInput
    data: XOR<Categorie_MovieUpdateWithoutMediaInput, Categorie_MovieUncheckedUpdateWithoutMediaInput>
  }

  export type Categorie_MovieUpdateManyWithWhereWithoutMediaInput = {
    where: Categorie_MovieScalarWhereInput
    data: XOR<Categorie_MovieUpdateManyMutationInput, Categorie_MovieUncheckedUpdateManyWithoutMediaInput>
  }

  export type Actor_MediaUpsertWithWhereUniqueWithoutMediaInput = {
    where: Actor_MediaWhereUniqueInput
    update: XOR<Actor_MediaUpdateWithoutMediaInput, Actor_MediaUncheckedUpdateWithoutMediaInput>
    create: XOR<Actor_MediaCreateWithoutMediaInput, Actor_MediaUncheckedCreateWithoutMediaInput>
  }

  export type Actor_MediaUpdateWithWhereUniqueWithoutMediaInput = {
    where: Actor_MediaWhereUniqueInput
    data: XOR<Actor_MediaUpdateWithoutMediaInput, Actor_MediaUncheckedUpdateWithoutMediaInput>
  }

  export type Actor_MediaUpdateManyWithWhereWithoutMediaInput = {
    where: Actor_MediaScalarWhereInput
    data: XOR<Actor_MediaUpdateManyMutationInput, Actor_MediaUncheckedUpdateManyWithoutMediaInput>
  }

  export type Actor_MediaScalarWhereInput = {
    AND?: Actor_MediaScalarWhereInput | Actor_MediaScalarWhereInput[]
    OR?: Actor_MediaScalarWhereInput[]
    NOT?: Actor_MediaScalarWhereInput | Actor_MediaScalarWhereInput[]
    id?: IntFilter<"Actor_Media"> | number
    actorId?: IntFilter<"Actor_Media"> | number
    mediaId?: IntFilter<"Actor_Media"> | number
  }

  export type WatchListUpsertWithWhereUniqueWithoutMediaInput = {
    where: WatchListWhereUniqueInput
    update: XOR<WatchListUpdateWithoutMediaInput, WatchListUncheckedUpdateWithoutMediaInput>
    create: XOR<WatchListCreateWithoutMediaInput, WatchListUncheckedCreateWithoutMediaInput>
  }

  export type WatchListUpdateWithWhereUniqueWithoutMediaInput = {
    where: WatchListWhereUniqueInput
    data: XOR<WatchListUpdateWithoutMediaInput, WatchListUncheckedUpdateWithoutMediaInput>
  }

  export type WatchListUpdateManyWithWhereWithoutMediaInput = {
    where: WatchListScalarWhereInput
    data: XOR<WatchListUpdateManyMutationInput, WatchListUncheckedUpdateManyWithoutMediaInput>
  }

  export type RatingUpsertWithWhereUniqueWithoutMediaInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutMediaInput, RatingUncheckedUpdateWithoutMediaInput>
    create: XOR<RatingCreateWithoutMediaInput, RatingUncheckedCreateWithoutMediaInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutMediaInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutMediaInput, RatingUncheckedUpdateWithoutMediaInput>
  }

  export type RatingUpdateManyWithWhereWithoutMediaInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutMediaInput>
  }

  export type SeasonUpsertWithWhereUniqueWithoutMediaInput = {
    where: SeasonWhereUniqueInput
    update: XOR<SeasonUpdateWithoutMediaInput, SeasonUncheckedUpdateWithoutMediaInput>
    create: XOR<SeasonCreateWithoutMediaInput, SeasonUncheckedCreateWithoutMediaInput>
  }

  export type SeasonUpdateWithWhereUniqueWithoutMediaInput = {
    where: SeasonWhereUniqueInput
    data: XOR<SeasonUpdateWithoutMediaInput, SeasonUncheckedUpdateWithoutMediaInput>
  }

  export type SeasonUpdateManyWithWhereWithoutMediaInput = {
    where: SeasonScalarWhereInput
    data: XOR<SeasonUpdateManyMutationInput, SeasonUncheckedUpdateManyWithoutMediaInput>
  }

  export type SeasonScalarWhereInput = {
    AND?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
    OR?: SeasonScalarWhereInput[]
    NOT?: SeasonScalarWhereInput | SeasonScalarWhereInput[]
    id?: IntFilter<"Season"> | number
    number?: IntFilter<"Season"> | number
    mediaId?: IntFilter<"Season"> | number
  }

  export type WatchingUpsertWithWhereUniqueWithoutMediaInput = {
    where: WatchingWhereUniqueInput
    update: XOR<WatchingUpdateWithoutMediaInput, WatchingUncheckedUpdateWithoutMediaInput>
    create: XOR<WatchingCreateWithoutMediaInput, WatchingUncheckedCreateWithoutMediaInput>
  }

  export type WatchingUpdateWithWhereUniqueWithoutMediaInput = {
    where: WatchingWhereUniqueInput
    data: XOR<WatchingUpdateWithoutMediaInput, WatchingUncheckedUpdateWithoutMediaInput>
  }

  export type WatchingUpdateManyWithWhereWithoutMediaInput = {
    where: WatchingScalarWhereInput
    data: XOR<WatchingUpdateManyMutationInput, WatchingUncheckedUpdateManyWithoutMediaInput>
  }

  export type ActorCreateWithoutMediaInput = {
    name: string
    picture_url?: string | null
  }

  export type ActorUncheckedCreateWithoutMediaInput = {
    id?: number
    name: string
    picture_url?: string | null
  }

  export type ActorCreateOrConnectWithoutMediaInput = {
    where: ActorWhereUniqueInput
    create: XOR<ActorCreateWithoutMediaInput, ActorUncheckedCreateWithoutMediaInput>
  }

  export type MediaCreateWithoutActorInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieCreateNestedManyWithoutMediaInput
    watchlist?: WatchListCreateNestedManyWithoutMediaInput
    Rating?: RatingCreateNestedManyWithoutMediaInput
    season?: SeasonCreateNestedManyWithoutMediaInput
    watching?: WatchingCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutActorInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformUncheckedCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput
    watchlist?: WatchListUncheckedCreateNestedManyWithoutMediaInput
    Rating?: RatingUncheckedCreateNestedManyWithoutMediaInput
    season?: SeasonUncheckedCreateNestedManyWithoutMediaInput
    watching?: WatchingUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutActorInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutActorInput, MediaUncheckedCreateWithoutActorInput>
  }

  export type ActorUpsertWithoutMediaInput = {
    update: XOR<ActorUpdateWithoutMediaInput, ActorUncheckedUpdateWithoutMediaInput>
    create: XOR<ActorCreateWithoutMediaInput, ActorUncheckedCreateWithoutMediaInput>
    where?: ActorWhereInput
  }

  export type ActorUpdateToOneWithWhereWithoutMediaInput = {
    where?: ActorWhereInput
    data: XOR<ActorUpdateWithoutMediaInput, ActorUncheckedUpdateWithoutMediaInput>
  }

  export type ActorUpdateWithoutMediaInput = {
    name?: StringFieldUpdateOperationsInput | string
    picture_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActorUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    picture_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MediaUpsertWithoutActorInput = {
    update: XOR<MediaUpdateWithoutActorInput, MediaUncheckedUpdateWithoutActorInput>
    create: XOR<MediaCreateWithoutActorInput, MediaUncheckedCreateWithoutActorInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutActorInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutActorInput, MediaUncheckedUpdateWithoutActorInput>
  }

  export type MediaUpdateWithoutActorInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUpdateManyWithoutMediaNestedInput
    Rating?: RatingUpdateManyWithoutMediaNestedInput
    season?: SeasonUpdateManyWithoutMediaNestedInput
    watching?: WatchingUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutActorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUncheckedUpdateManyWithoutMediaNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutMediaNestedInput
    season?: SeasonUncheckedUpdateManyWithoutMediaNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type Actor_MediaCreateWithoutActorInput = {
    media: MediaCreateNestedOneWithoutActorInput
  }

  export type Actor_MediaUncheckedCreateWithoutActorInput = {
    id?: number
    mediaId: number
  }

  export type Actor_MediaCreateOrConnectWithoutActorInput = {
    where: Actor_MediaWhereUniqueInput
    create: XOR<Actor_MediaCreateWithoutActorInput, Actor_MediaUncheckedCreateWithoutActorInput>
  }

  export type Actor_MediaCreateManyActorInputEnvelope = {
    data: Actor_MediaCreateManyActorInput | Actor_MediaCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type Actor_MediaUpsertWithWhereUniqueWithoutActorInput = {
    where: Actor_MediaWhereUniqueInput
    update: XOR<Actor_MediaUpdateWithoutActorInput, Actor_MediaUncheckedUpdateWithoutActorInput>
    create: XOR<Actor_MediaCreateWithoutActorInput, Actor_MediaUncheckedCreateWithoutActorInput>
  }

  export type Actor_MediaUpdateWithWhereUniqueWithoutActorInput = {
    where: Actor_MediaWhereUniqueInput
    data: XOR<Actor_MediaUpdateWithoutActorInput, Actor_MediaUncheckedUpdateWithoutActorInput>
  }

  export type Actor_MediaUpdateManyWithWhereWithoutActorInput = {
    where: Actor_MediaScalarWhereInput
    data: XOR<Actor_MediaUpdateManyMutationInput, Actor_MediaUncheckedUpdateManyWithoutActorInput>
  }

  export type UserCreateWithoutWatchListInput = {
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformCreateNestedManyWithoutUserInput
    watching?: WatchingCreateNestedManyWithoutUserInput
    rating?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWatchListInput = {
    id?: number
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformUncheckedCreateNestedManyWithoutUserInput
    watching?: WatchingUncheckedCreateNestedManyWithoutUserInput
    rating?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWatchListInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWatchListInput, UserUncheckedCreateWithoutWatchListInput>
  }

  export type MediaCreateWithoutWatchlistInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaCreateNestedManyWithoutMediaInput
    Rating?: RatingCreateNestedManyWithoutMediaInput
    season?: SeasonCreateNestedManyWithoutMediaInput
    watching?: WatchingCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutWatchlistInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformUncheckedCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaUncheckedCreateNestedManyWithoutMediaInput
    Rating?: RatingUncheckedCreateNestedManyWithoutMediaInput
    season?: SeasonUncheckedCreateNestedManyWithoutMediaInput
    watching?: WatchingUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutWatchlistInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutWatchlistInput, MediaUncheckedCreateWithoutWatchlistInput>
  }

  export type UserUpsertWithoutWatchListInput = {
    update: XOR<UserUpdateWithoutWatchListInput, UserUncheckedUpdateWithoutWatchListInput>
    create: XOR<UserCreateWithoutWatchListInput, UserUncheckedCreateWithoutWatchListInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWatchListInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWatchListInput, UserUncheckedUpdateWithoutWatchListInput>
  }

  export type UserUpdateWithoutWatchListInput = {
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUpdateManyWithoutUserNestedInput
    watching?: WatchingUpdateManyWithoutUserNestedInput
    rating?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWatchListInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUncheckedUpdateManyWithoutUserNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutUserNestedInput
    rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MediaUpsertWithoutWatchlistInput = {
    update: XOR<MediaUpdateWithoutWatchlistInput, MediaUncheckedUpdateWithoutWatchlistInput>
    create: XOR<MediaCreateWithoutWatchlistInput, MediaUncheckedCreateWithoutWatchlistInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutWatchlistInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutWatchlistInput, MediaUncheckedUpdateWithoutWatchlistInput>
  }

  export type MediaUpdateWithoutWatchlistInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUpdateManyWithoutMediaNestedInput
    Rating?: RatingUpdateManyWithoutMediaNestedInput
    season?: SeasonUpdateManyWithoutMediaNestedInput
    watching?: WatchingUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutWatchlistInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutMediaNestedInput
    season?: SeasonUncheckedUpdateManyWithoutMediaNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type UserCreateWithoutRatingInput = {
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformCreateNestedManyWithoutUserInput
    watching?: WatchingCreateNestedManyWithoutUserInput
    WatchList?: WatchListCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRatingInput = {
    id?: number
    email: string
    pseudo: string
    password: string
    created_at?: Date | string
    platform?: User_PlatformUncheckedCreateNestedManyWithoutUserInput
    watching?: WatchingUncheckedCreateNestedManyWithoutUserInput
    WatchList?: WatchListUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRatingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
  }

  export type MediaCreateWithoutRatingInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaCreateNestedManyWithoutMediaInput
    watchlist?: WatchListCreateNestedManyWithoutMediaInput
    season?: SeasonCreateNestedManyWithoutMediaInput
    watching?: WatchingCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutRatingInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformUncheckedCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaUncheckedCreateNestedManyWithoutMediaInput
    watchlist?: WatchListUncheckedCreateNestedManyWithoutMediaInput
    season?: SeasonUncheckedCreateNestedManyWithoutMediaInput
    watching?: WatchingUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutRatingInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutRatingInput, MediaUncheckedCreateWithoutRatingInput>
  }

  export type UserUpsertWithoutRatingInput = {
    update: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
  }

  export type UserUpdateWithoutRatingInput = {
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUpdateManyWithoutUserNestedInput
    watching?: WatchingUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: User_PlatformUncheckedUpdateManyWithoutUserNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutUserNestedInput
    WatchList?: WatchListUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MediaUpsertWithoutRatingInput = {
    update: XOR<MediaUpdateWithoutRatingInput, MediaUncheckedUpdateWithoutRatingInput>
    create: XOR<MediaCreateWithoutRatingInput, MediaUncheckedCreateWithoutRatingInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutRatingInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutRatingInput, MediaUncheckedUpdateWithoutRatingInput>
  }

  export type MediaUpdateWithoutRatingInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUpdateManyWithoutMediaNestedInput
    season?: SeasonUpdateManyWithoutMediaNestedInput
    watching?: WatchingUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUncheckedUpdateManyWithoutMediaNestedInput
    season?: SeasonUncheckedUpdateManyWithoutMediaNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateWithoutSeasonInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaCreateNestedManyWithoutMediaInput
    watchlist?: WatchListCreateNestedManyWithoutMediaInput
    Rating?: RatingCreateNestedManyWithoutMediaInput
    watching?: WatchingCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutSeasonInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformUncheckedCreateNestedManyWithoutMediaInput
    categories?: Categorie_MovieUncheckedCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaUncheckedCreateNestedManyWithoutMediaInput
    watchlist?: WatchListUncheckedCreateNestedManyWithoutMediaInput
    Rating?: RatingUncheckedCreateNestedManyWithoutMediaInput
    watching?: WatchingUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutSeasonInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutSeasonInput, MediaUncheckedCreateWithoutSeasonInput>
  }

  export type EpisodeCreateWithoutSeasonInput = {
    title: string
    description: string
    number: number
  }

  export type EpisodeUncheckedCreateWithoutSeasonInput = {
    id?: number
    title: string
    description: string
    number: number
  }

  export type EpisodeCreateOrConnectWithoutSeasonInput = {
    where: EpisodeWhereUniqueInput
    create: XOR<EpisodeCreateWithoutSeasonInput, EpisodeUncheckedCreateWithoutSeasonInput>
  }

  export type EpisodeCreateManySeasonInputEnvelope = {
    data: EpisodeCreateManySeasonInput | EpisodeCreateManySeasonInput[]
    skipDuplicates?: boolean
  }

  export type MediaUpsertWithoutSeasonInput = {
    update: XOR<MediaUpdateWithoutSeasonInput, MediaUncheckedUpdateWithoutSeasonInput>
    create: XOR<MediaCreateWithoutSeasonInput, MediaUncheckedCreateWithoutSeasonInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutSeasonInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutSeasonInput, MediaUncheckedUpdateWithoutSeasonInput>
  }

  export type MediaUpdateWithoutSeasonInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUpdateManyWithoutMediaNestedInput
    Rating?: RatingUpdateManyWithoutMediaNestedInput
    watching?: WatchingUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput
    categories?: Categorie_MovieUncheckedUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUncheckedUpdateManyWithoutMediaNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutMediaNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type EpisodeUpsertWithWhereUniqueWithoutSeasonInput = {
    where: EpisodeWhereUniqueInput
    update: XOR<EpisodeUpdateWithoutSeasonInput, EpisodeUncheckedUpdateWithoutSeasonInput>
    create: XOR<EpisodeCreateWithoutSeasonInput, EpisodeUncheckedCreateWithoutSeasonInput>
  }

  export type EpisodeUpdateWithWhereUniqueWithoutSeasonInput = {
    where: EpisodeWhereUniqueInput
    data: XOR<EpisodeUpdateWithoutSeasonInput, EpisodeUncheckedUpdateWithoutSeasonInput>
  }

  export type EpisodeUpdateManyWithWhereWithoutSeasonInput = {
    where: EpisodeScalarWhereInput
    data: XOR<EpisodeUpdateManyMutationInput, EpisodeUncheckedUpdateManyWithoutSeasonInput>
  }

  export type EpisodeScalarWhereInput = {
    AND?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
    OR?: EpisodeScalarWhereInput[]
    NOT?: EpisodeScalarWhereInput | EpisodeScalarWhereInput[]
    id?: IntFilter<"Episode"> | number
    title?: StringFilter<"Episode"> | string
    description?: StringFilter<"Episode"> | string
    number?: IntFilter<"Episode"> | number
    seasonId?: IntFilter<"Episode"> | number
  }

  export type SeasonCreateWithoutEpisodesInput = {
    number: number
    media: MediaCreateNestedOneWithoutSeasonInput
  }

  export type SeasonUncheckedCreateWithoutEpisodesInput = {
    id?: number
    number: number
    mediaId: number
  }

  export type SeasonCreateOrConnectWithoutEpisodesInput = {
    where: SeasonWhereUniqueInput
    create: XOR<SeasonCreateWithoutEpisodesInput, SeasonUncheckedCreateWithoutEpisodesInput>
  }

  export type SeasonUpsertWithoutEpisodesInput = {
    update: XOR<SeasonUpdateWithoutEpisodesInput, SeasonUncheckedUpdateWithoutEpisodesInput>
    create: XOR<SeasonCreateWithoutEpisodesInput, SeasonUncheckedCreateWithoutEpisodesInput>
    where?: SeasonWhereInput
  }

  export type SeasonUpdateToOneWithWhereWithoutEpisodesInput = {
    where?: SeasonWhereInput
    data: XOR<SeasonUpdateWithoutEpisodesInput, SeasonUncheckedUpdateWithoutEpisodesInput>
  }

  export type SeasonUpdateWithoutEpisodesInput = {
    number?: IntFieldUpdateOperationsInput | number
    media?: MediaUpdateOneRequiredWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutEpisodesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type CategorieCreateWithoutMediaInput = {
    title: string
    color: string
  }

  export type CategorieUncheckedCreateWithoutMediaInput = {
    id?: number
    title: string
    color: string
  }

  export type CategorieCreateOrConnectWithoutMediaInput = {
    where: CategorieWhereUniqueInput
    create: XOR<CategorieCreateWithoutMediaInput, CategorieUncheckedCreateWithoutMediaInput>
  }

  export type MediaCreateWithoutCategoriesInput = {
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaCreateNestedManyWithoutMediaInput
    watchlist?: WatchListCreateNestedManyWithoutMediaInput
    Rating?: RatingCreateNestedManyWithoutMediaInput
    season?: SeasonCreateNestedManyWithoutMediaInput
    watching?: WatchingCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutCategoriesInput = {
    id?: number
    title: string
    trailer_url: string
    photo_url: string
    logo_url: string
    description: string
    duration: number
    director: string
    platforms?: Media_PlatformUncheckedCreateNestedManyWithoutMediaInput
    actor?: Actor_MediaUncheckedCreateNestedManyWithoutMediaInput
    watchlist?: WatchListUncheckedCreateNestedManyWithoutMediaInput
    Rating?: RatingUncheckedCreateNestedManyWithoutMediaInput
    season?: SeasonUncheckedCreateNestedManyWithoutMediaInput
    watching?: WatchingUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutCategoriesInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutCategoriesInput, MediaUncheckedCreateWithoutCategoriesInput>
  }

  export type CategorieUpsertWithoutMediaInput = {
    update: XOR<CategorieUpdateWithoutMediaInput, CategorieUncheckedUpdateWithoutMediaInput>
    create: XOR<CategorieCreateWithoutMediaInput, CategorieUncheckedCreateWithoutMediaInput>
    where?: CategorieWhereInput
  }

  export type CategorieUpdateToOneWithWhereWithoutMediaInput = {
    where?: CategorieWhereInput
    data: XOR<CategorieUpdateWithoutMediaInput, CategorieUncheckedUpdateWithoutMediaInput>
  }

  export type CategorieUpdateWithoutMediaInput = {
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type CategorieUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type MediaUpsertWithoutCategoriesInput = {
    update: XOR<MediaUpdateWithoutCategoriesInput, MediaUncheckedUpdateWithoutCategoriesInput>
    create: XOR<MediaCreateWithoutCategoriesInput, MediaUncheckedCreateWithoutCategoriesInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutCategoriesInput, MediaUncheckedUpdateWithoutCategoriesInput>
  }

  export type MediaUpdateWithoutCategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUpdateManyWithoutMediaNestedInput
    Rating?: RatingUpdateManyWithoutMediaNestedInput
    season?: SeasonUpdateManyWithoutMediaNestedInput
    watching?: WatchingUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trailer_url?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    logo_url?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    director?: StringFieldUpdateOperationsInput | string
    platforms?: Media_PlatformUncheckedUpdateManyWithoutMediaNestedInput
    actor?: Actor_MediaUncheckedUpdateManyWithoutMediaNestedInput
    watchlist?: WatchListUncheckedUpdateManyWithoutMediaNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutMediaNestedInput
    season?: SeasonUncheckedUpdateManyWithoutMediaNestedInput
    watching?: WatchingUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type User_PlatformCreateManyUserInput = {
    id?: number
    platformId: number
  }

  export type WatchingCreateManyUserInput = {
    id?: number
    created_at?: Date | string
    mediaId: number
  }

  export type WatchListCreateManyUserInput = {
    id?: number
    created_at?: Date | string
    mediaId: number
  }

  export type RatingCreateManyUserInput = {
    id?: number
    score?: number
    mediaId: number
    createdAt?: Date | string
  }

  export type User_PlatformUpdateWithoutUserInput = {
    platform?: PlatformUpdateOneRequiredWithoutUserNestedInput
  }

  export type User_PlatformUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type User_PlatformUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchingUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutWatchingNestedInput
  }

  export type WatchingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchListUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutWatchlistNestedInput
  }

  export type WatchListUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchListUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUpdateWithoutUserInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type User_PlatformCreateManyPlatformInput = {
    id?: number
    userId: number
  }

  export type Media_PlatformCreateManyPlatformInput = {
    id?: number
    mediaId: number
  }

  export type User_PlatformUpdateWithoutPlatformInput = {
    user?: UserUpdateOneRequiredWithoutPlatformNestedInput
  }

  export type User_PlatformUncheckedUpdateWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type User_PlatformUncheckedUpdateManyWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type Media_PlatformUpdateWithoutPlatformInput = {
    media?: MediaUpdateOneRequiredWithoutPlatformsNestedInput
  }

  export type Media_PlatformUncheckedUpdateWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type Media_PlatformUncheckedUpdateManyWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type Categorie_MovieCreateManyCategorieInput = {
    id?: number
    mediaId: number
  }

  export type Categorie_MovieUpdateWithoutCategorieInput = {
    media?: MediaUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type Categorie_MovieUncheckedUpdateWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type Categorie_MovieUncheckedUpdateManyWithoutCategorieInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type Media_PlatformCreateManyMediaInput = {
    id?: number
    platformId: number
  }

  export type Categorie_MovieCreateManyMediaInput = {
    id?: number
    categorieId: number
  }

  export type Actor_MediaCreateManyMediaInput = {
    id?: number
    actorId: number
  }

  export type WatchListCreateManyMediaInput = {
    id?: number
    created_at?: Date | string
    userId: number
  }

  export type RatingCreateManyMediaInput = {
    id?: number
    score?: number
    userId: number
    createdAt?: Date | string
  }

  export type SeasonCreateManyMediaInput = {
    id?: number
    number: number
  }

  export type WatchingCreateManyMediaInput = {
    id?: number
    created_at?: Date | string
    userId: number
  }

  export type Media_PlatformUpdateWithoutMediaInput = {
    platform?: PlatformUpdateOneRequiredWithoutMediaNestedInput
  }

  export type Media_PlatformUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type Media_PlatformUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type Categorie_MovieUpdateWithoutMediaInput = {
    categorie?: CategorieUpdateOneRequiredWithoutMediaNestedInput
  }

  export type Categorie_MovieUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    categorieId?: IntFieldUpdateOperationsInput | number
  }

  export type Categorie_MovieUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    categorieId?: IntFieldUpdateOperationsInput | number
  }

  export type Actor_MediaUpdateWithoutMediaInput = {
    actor?: ActorUpdateOneRequiredWithoutMediaNestedInput
  }

  export type Actor_MediaUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: IntFieldUpdateOperationsInput | number
  }

  export type Actor_MediaUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    actorId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchListUpdateWithoutMediaInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchListNestedInput
  }

  export type WatchListUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchListUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUpdateWithoutMediaInput = {
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeasonUpdateWithoutMediaInput = {
    number?: IntFieldUpdateOperationsInput | number
    episodes?: EpisodeUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    episodes?: EpisodeUncheckedUpdateManyWithoutSeasonNestedInput
  }

  export type SeasonUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type WatchingUpdateWithoutMediaInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchingNestedInput
  }

  export type WatchingUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchingUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type Actor_MediaCreateManyActorInput = {
    id?: number
    mediaId: number
  }

  export type Actor_MediaUpdateWithoutActorInput = {
    media?: MediaUpdateOneRequiredWithoutActorNestedInput
  }

  export type Actor_MediaUncheckedUpdateWithoutActorInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type Actor_MediaUncheckedUpdateManyWithoutActorInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeCreateManySeasonInput = {
    id?: number
    title: string
    description: string
    number: number
  }

  export type EpisodeUpdateWithoutSeasonInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeUncheckedUpdateWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeUncheckedUpdateManyWithoutSeasonInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlatformCountOutputTypeDefaultArgs instead
     */
    export type PlatformCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlatformCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategorieCountOutputTypeDefaultArgs instead
     */
    export type CategorieCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategorieCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaCountOutputTypeDefaultArgs instead
     */
    export type MediaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActorCountOutputTypeDefaultArgs instead
     */
    export type ActorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonCountOutputTypeDefaultArgs instead
     */
    export type SeasonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use User_PlatformDefaultArgs instead
     */
    export type User_PlatformArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = User_PlatformDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlatformDefaultArgs instead
     */
    export type PlatformArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlatformDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Media_PlatformDefaultArgs instead
     */
    export type Media_PlatformArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Media_PlatformDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WatchingDefaultArgs instead
     */
    export type WatchingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WatchingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategorieDefaultArgs instead
     */
    export type CategorieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategorieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaDefaultArgs instead
     */
    export type MediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Actor_MediaDefaultArgs instead
     */
    export type Actor_MediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Actor_MediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActorDefaultArgs instead
     */
    export type ActorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WatchListDefaultArgs instead
     */
    export type WatchListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WatchListDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingDefaultArgs instead
     */
    export type RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeasonDefaultArgs instead
     */
    export type SeasonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeasonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EpisodeDefaultArgs instead
     */
    export type EpisodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EpisodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Categorie_MovieDefaultArgs instead
     */
    export type Categorie_MovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Categorie_MovieDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}